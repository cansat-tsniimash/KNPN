
KNPN_NNA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ace4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800ae88  0800ae88  0001ae88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000200  0800b6c4  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800b6c4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fde8  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ad  00000000  00000000  00040018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000431c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  00044800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ac4  00000000  00000000  00045cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001410e  00000000  00000000  0005e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909eb  00000000  00000000  000728c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001032ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007288  00000000  00000000  00103300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae6c 	.word	0x0800ae6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800ae6c 	.word	0x0800ae6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_write>:
uint8_t buf[32] = {1, 2, 3};
nrf24_fifo_status_t  rx_status;
nrf24_fifo_status_t  tx_status;

int _write(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart1;
	HAL_UART_Transmit(
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <_write+0x28>)
 8001014:	f002 f9cd 	bl	80033b2 <HAL_UART_Transmit>
			&huart1,
			(uint8_t*)ptr, len,
			HAL_MAX_DELAY
	);
	return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000320 	.word	0x20000320

08001028 <app_main>:

int app_main(){
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b0a6      	sub	sp, #152	; 0x98
 800102e:	af04      	add	r7, sp, #16

	// Настройка сдвигового регистра IMU
	shift_reg_t imu_sr;
	imu_sr.latch_port = GPIOC;
 8001030:	4bab      	ldr	r3, [pc, #684]	; (80012e0 <app_main+0x2b8>)
 8001032:	67bb      	str	r3, [r7, #120]	; 0x78
	imu_sr.latch_pin = GPIO_PIN_1;
 8001034:	2302      	movs	r3, #2
 8001036:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	imu_sr.oe_port = GPIOC;
 800103a:	4ba9      	ldr	r3, [pc, #676]	; (80012e0 <app_main+0x2b8>)
 800103c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	imu_sr.oe_pin = GPIO_PIN_13;
 8001040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001044:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	imu_sr.value = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	imu_sr.bus = &hspi2;
 800104e:	4ba5      	ldr	r3, [pc, #660]	; (80012e4 <app_main+0x2bc>)
 8001050:	677b      	str	r3, [r7, #116]	; 0x74
	shift_reg_init(&imu_sr);
 8001052:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fed6 	bl	8005e08 <shift_reg_init>
	shift_reg_write_16(&imu_sr, 0xFFFF);
 800105c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001064:	4618      	mov	r0, r3
 8001066:	f004 ff45 	bl	8005ef4 <shift_reg_write_16>

	// Настройка сдвигового регистра NRF
	shift_reg_t nrf_sr;
	nrf_sr.latch_port = GPIOC;
 800106a:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <app_main+0x2b8>)
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
	nrf_sr.latch_pin = GPIO_PIN_4;
 800106e:	2310      	movs	r3, #16
 8001070:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	nrf_sr.oe_port = GPIOC;
 8001074:	4b9a      	ldr	r3, [pc, #616]	; (80012e0 <app_main+0x2b8>)
 8001076:	66fb      	str	r3, [r7, #108]	; 0x6c
	nrf_sr.oe_pin = GPIO_PIN_5;
 8001078:	2320      	movs	r3, #32
 800107a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	nrf_sr.value = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	nrf_sr.bus = &hspi2;
 8001084:	4b97      	ldr	r3, [pc, #604]	; (80012e4 <app_main+0x2bc>)
 8001086:	663b      	str	r3, [r7, #96]	; 0x60
	shift_reg_init(&nrf_sr);
 8001088:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800108c:	4618      	mov	r0, r3
 800108e:	f004 febb 	bl	8005e08 <shift_reg_init>
	shift_reg_write_8(&nrf_sr, 0xFF);
 8001092:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001096:	21ff      	movs	r1, #255	; 0xff
 8001098:	4618      	mov	r0, r3
 800109a:	f004 ff0b 	bl	8005eb4 <shift_reg_write_8>

	// Настройка nrf
	nrf24_spi_pins_sr_t rf_sr;
	rf_sr.pos_CE = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	rf_sr.pos_CS = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	rf_sr.this =  &nrf_sr;
 80010aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ae:	65bb      	str	r3, [r7, #88]	; 0x58
	nrf24_lower_api_config_t nrf;

	nrf24_spi_init_sr(&nrf, &hspi2 ,&rf_sr );
 80010b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010b8:	498a      	ldr	r1, [pc, #552]	; (80012e4 <app_main+0x2bc>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 f8ae 	bl	800621c <nrf24_spi_init_sr>

	nrf24_rf_config_t nrf_config;
	nrf24_protocol_config_t nrf_protocol_config;

	nrf_config.data_rate = NRF24_DATARATE_1000_KBIT;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	nrf_config.rf_channel = 36;
 80010c6:	2324      	movs	r3, #36	; 0x24
 80010c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	nrf_config.tx_power = NRF24_TXPOWER_MINUS_0_DBM;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	nrf24_setup_rf(&nrf, &nrf_config);
 80010d2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80010d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 f8b9 	bl	8006254 <nrf24_setup_rf>

	nrf_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 80010e2:	2303      	movs	r3, #3
 80010e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	nrf_protocol_config.auto_retransmit_count = 10;
 80010e8:	230a      	movs	r3, #10
 80010ea:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	nrf_protocol_config.auto_retransmit_delay = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	nrf_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	nrf_protocol_config.en_ack_payload = false;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	nrf_protocol_config.en_dyn_ack = false;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	nrf_protocol_config.en_dyn_payload_size = true;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	nrf24_setup_protocol(&nrf, &nrf_protocol_config);
 800110c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001110:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f005 f8fe 	bl	8006318 <nrf24_setup_protocol>


	nrf24_pipe_set_tx_addr(&nrf,0x1234);
 800111c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001120:	f241 2234 	movw	r2, #4660	; 0x1234
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	4608      	mov	r0, r1
 800112a:	f005 f979 	bl	8006420 <nrf24_pipe_set_tx_addr>
	nrf24_mode_power_down(&nrf);
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	4618      	mov	r0, r3
 8001134:	f005 f985 	bl	8006442 <nrf24_mode_power_down>
	nrf24_mode_standby(&nrf);
 8001138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113c:	4618      	mov	r0, r3
 800113e:	f005 f99e 	bl	800647e <nrf24_mode_standby>


	// Настройка Lis
	stmdev_ctx_t lis_ctx;
	lis_spi_intf_sr lis_sr;
	lis_sr.spi = &hspi2;
 8001142:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <app_main+0x2bc>)
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
	lis_sr.sr = &imu_sr;
 8001146:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
	lis_sr.sr_pin = 3;
 800114c:	2303      	movs	r3, #3
 800114e:	627b      	str	r3, [r7, #36]	; 0x24

	lisset_sr(&lis_ctx, &lis_sr);
 8001150:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f004 f86c 	bl	8005238 <lisset_sr>

	// Настройка Lsm
	stmdev_ctx_t stm_ctx;
	lsm_spi_intf_sr lsm_sr;
	lsm_sr.spi = &hspi2;
 8001160:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <app_main+0x2bc>)
 8001162:	613b      	str	r3, [r7, #16]
	lsm_sr.sr = &imu_sr;
 8001164:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001168:	617b      	str	r3, [r7, #20]
	lsm_sr.sr_pin = 4;
 800116a:	2304      	movs	r3, #4
 800116c:	60fb      	str	r3, [r7, #12]

	lsmset_sr(&stm_ctx, &lsm_sr);
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fb99 	bl	80058b0 <lsmset_sr>

	// Настройка bme
	bme_spi_intf_sr bme_sr;
	bme_sr.spi = &hspi2;
 800117e:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <app_main+0x2bc>)
 8001180:	607b      	str	r3, [r7, #4]
	bme_sr.sr = &imu_sr;
 8001182:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001186:	60bb      	str	r3, [r7, #8]
	bme_sr.sr_pin = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	603b      	str	r3, [r7, #0]

	bme_init_default_sr(&bme, &bme_sr);
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4855      	ldr	r0, [pc, #340]	; (80012e8 <app_main+0x2c0>)
 8001192:	f002 fc7b 	bl	8003a8c <bme_init_default_sr>


	//  Вывод в консоль

	while(1){
		nrf24_fifo_status(&nrf,&rx_status, &tx_status);
 8001196:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119a:	4a54      	ldr	r2, [pc, #336]	; (80012ec <app_main+0x2c4>)
 800119c:	4954      	ldr	r1, [pc, #336]	; (80012f0 <app_main+0x2c8>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 f98f 	bl	80064c2 <nrf24_fifo_status>
		nrf24_fifo_write(&nrf, buf, 32,false);
 80011a4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80011a8:	2300      	movs	r3, #0
 80011aa:	2220      	movs	r2, #32
 80011ac:	4951      	ldr	r1, [pc, #324]	; (80012f4 <app_main+0x2cc>)
 80011ae:	f005 f9c8 	bl	8006542 <nrf24_fifo_write>
if(tx_status == NRF24_FIFO_FULL){

}

		lsmread(&stm_ctx, &lsm_temp, &lsm_accel, &lsm_gyro);
 80011b2:	f107 0018 	add.w	r0, r7, #24
 80011b6:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <app_main+0x2d0>)
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <app_main+0x2d4>)
 80011ba:	4951      	ldr	r1, [pc, #324]	; (8001300 <app_main+0x2d8>)
 80011bc:	f004 fbae 	bl	800591c <lsmread>
		lisread(&lis_ctx, &lis_temp, &lis);
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <app_main+0x2dc>)
 80011c6:	4950      	ldr	r1, [pc, #320]	; (8001308 <app_main+0x2e0>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f877 	bl	80052bc <lisread>
		bme_data = bme_read_data(&bme);
 80011ce:	4846      	ldr	r0, [pc, #280]	; (80012e8 <app_main+0x2c0>)
 80011d0:	f002 fcb0 	bl	8003b34 <bme_read_data>
 80011d4:	eeb0 5a40 	vmov.f32	s10, s0
 80011d8:	eef0 5a60 	vmov.f32	s11, s1
 80011dc:	eeb0 6a41 	vmov.f32	s12, s2
 80011e0:	eef0 6a61 	vmov.f32	s13, s3
 80011e4:	eeb0 7a42 	vmov.f32	s14, s4
 80011e8:	eef0 7a62 	vmov.f32	s15, s5
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <app_main+0x2e4>)
 80011ee:	ed83 5b00 	vstr	d5, [r3]
 80011f2:	ed83 6b02 	vstr	d6, [r3, #8]
 80011f6:	ed83 7b04 	vstr	d7, [r3, #16]
		printf("АКСЕЛЕРОМЕТР X %f\n АКСЕЛЕРОМЕТР Y %f\n АКСЕЛЕРОМЕТР Z %f\n", lsm_accel[0], lsm_accel[1], lsm_accel[2]);
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <app_main+0x2d4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9aa 	bl	8000558 <__aeabi_f2d>
 8001204:	4680      	mov	r8, r0
 8001206:	4689      	mov	r9, r1
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <app_main+0x2d4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9a3 	bl	8000558 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <app_main+0x2d4>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f99c 	bl	8000558 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001228:	e9cd 4500 	strd	r4, r5, [sp]
 800122c:	4642      	mov	r2, r8
 800122e:	464b      	mov	r3, r9
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <app_main+0x2e8>)
 8001232:	f006 f867 	bl	8007304 <iprintf>
		printf("ГИРОСКОП X %f\n ГИРОСКОП Y %f\n ГИРОСКОП Z %f\n", lsm_gyro[0], lsm_gyro[1], lsm_gyro[2]);
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <app_main+0x2d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f98c 	bl	8000558 <__aeabi_f2d>
 8001240:	4680      	mov	r8, r0
 8001242:	4689      	mov	r9, r1
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <app_main+0x2d0>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f985 	bl	8000558 <__aeabi_f2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <app_main+0x2d0>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001264:	e9cd 4500 	strd	r4, r5, [sp]
 8001268:	4642      	mov	r2, r8
 800126a:	464b      	mov	r3, r9
 800126c:	4829      	ldr	r0, [pc, #164]	; (8001314 <app_main+0x2ec>)
 800126e:	f006 f849 	bl	8007304 <iprintf>
		printf("Температура %f\n\n\n\n", lsm_temp);
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <app_main+0x2d8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f96e 	bl	8000558 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4825      	ldr	r0, [pc, #148]	; (8001318 <app_main+0x2f0>)
 8001282:	f006 f83f 	bl	8007304 <iprintf>
		printf("МАГНИТОМЕТР X %f\n МАГНИТОМЕТР Y %f\n МАГНИТОМЕТР Z %f\n", lis[0], lis[1], lis[2]);
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <app_main+0x2dc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f964 	bl	8000558 <__aeabi_f2d>
 8001290:	4680      	mov	r8, r0
 8001292:	4689      	mov	r9, r1
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <app_main+0x2dc>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f95d 	bl	8000558 <__aeabi_f2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <app_main+0x2dc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012b4:	e9cd 4500 	strd	r4, r5, [sp]
 80012b8:	4642      	mov	r2, r8
 80012ba:	464b      	mov	r3, r9
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <app_main+0x2f4>)
 80012be:	f006 f821 	bl	8007304 <iprintf>
		printf("Давление  %lf \n Температура %lf \n", bme_data.pressure, bme_data.temperature);
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <app_main+0x2e4>)
 80012c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <app_main+0x2e4>)
 80012ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012ce:	e9cd 2300 	strd	r2, r3, [sp]
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4812      	ldr	r0, [pc, #72]	; (8001320 <app_main+0x2f8>)
 80012d8:	f006 f814 	bl	8007304 <iprintf>
		nrf24_fifo_status(&nrf,&rx_status, &tx_status);
 80012dc:	e75b      	b.n	8001196 <app_main+0x16e>
 80012de:	bf00      	nop
 80012e0:	40020800 	.word	0x40020800
 80012e4:	200002c8 	.word	0x200002c8
 80012e8:	20000250 	.word	0x20000250
 80012ec:	200002c4 	.word	0x200002c4
 80012f0:	20000230 	.word	0x20000230
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200002b8 	.word	0x200002b8
 80012fc:	200002ac 	.word	0x200002ac
 8001300:	20000298 	.word	0x20000298
 8001304:	2000029c 	.word	0x2000029c
 8001308:	200002a8 	.word	0x200002a8
 800130c:	20000238 	.word	0x20000238
 8001310:	0800ae88 	.word	0x0800ae88
 8001314:	0800aee8 	.word	0x0800aee8
 8001318:	0800af30 	.word	0x0800af30
 800131c:	0800af50 	.word	0x0800af50
 8001320:	0800afa8 	.word	0x0800afa8

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 faec 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f80a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f000 f8c8 	bl	80014c4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001334:	f000 f866 	bl	8001404 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001338:	f000 f89a 	bl	8001470 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_main();
 800133c:	f7ff fe74 	bl	8001028 <app_main>
 8001340:	e7fc      	b.n	800133c <main+0x18>
	...

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f005 f954 	bl	8006600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <SystemClock_Config+0xb8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <SystemClock_Config+0xb8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <SystemClock_Config+0xb8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <SystemClock_Config+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <SystemClock_Config+0xbc>)
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <SystemClock_Config+0xbc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	2310      	movs	r3, #16
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fdbd 	bl	8001f38 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013c4:	f000 f8d0 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f820 	bl	8002428 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ee:	f000 f8bb 	bl	8001568 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_SPI2_Init+0x64>)
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_SPI2_Init+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_SPI2_Init+0x64>)
 8001410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001414:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_SPI2_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_SPI2_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_SPI2_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_SPI2_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_SPI2_Init+0x64>)
 8001430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001434:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_SPI2_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_SPI2_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_SPI2_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_SPI2_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_SPI2_Init+0x64>)
 8001450:	220a      	movs	r2, #10
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_SPI2_Init+0x64>)
 8001456:	f001 f9b7 	bl	80027c8 <HAL_SPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001460:	f000 f882 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002c8 	.word	0x200002c8
 800146c:	40003800 	.word	0x40003800

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f001 ff36 	bl	8003318 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f859 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000320 	.word	0x20000320
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_GPIO_Init+0x9c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <MX_GPIO_Init+0x9c>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_GPIO_Init+0x9c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_GPIO_Init+0x9c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <MX_GPIO_Init+0x9c>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_GPIO_Init+0x9c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_GPIO_Init+0x9c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <MX_GPIO_Init+0x9c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_GPIO_Init+0x9c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f242 0132 	movw	r1, #8242	; 0x2032
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <MX_GPIO_Init+0xa0>)
 8001536:	f000 fce5 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800153a:	f242 0332 	movw	r3, #8242	; 0x2032
 800153e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_GPIO_Init+0xa0>)
 8001554:	f000 fb52 	bl	8001bfc <HAL_GPIO_Init>

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40020800 	.word	0x40020800

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_MspInit+0x4c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_SPI_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12c      	bne.n	8001640 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_SPI_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_SPI_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_SPI_MspInit+0x88>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_SPI_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800161e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001630:	2305      	movs	r3, #5
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_SPI_MspInit+0x8c>)
 800163c:	f000 fade 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40003800 	.word	0x40003800
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x84>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12c      	bne.n	80016d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x88>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x88>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x88>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_UART_MspInit+0x8c>)
 80016cc:	f000 fa96 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f93a 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	return 1;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_kill>:

int _kill(int pid, int sig)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001752:	f004 ff1d 	bl	8006590 <__errno>
 8001756:	4603      	mov	r3, r0
 8001758:	2216      	movs	r2, #22
 800175a:	601a      	str	r2, [r3, #0]
	return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_exit>:

void _exit (int status)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ffe7 	bl	8001748 <_kill>
	while (1) {}		/* Make sure we hang here */
 800177a:	e7fe      	b.n	800177a <_exit+0x12>

0800177c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00a      	b.n	80017a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800178e:	f3af 8000 	nop.w
 8001792:	4601      	mov	r1, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	60ba      	str	r2, [r7, #8]
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf0      	blt.n	800178e <_read+0x12>
	}

return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	605a      	str	r2, [r3, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f004 fe9e 	bl	8006590 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20010000 	.word	0x20010000
 8001880:	00000400 	.word	0x00000400
 8001884:	2000021c 	.word	0x2000021c
 8001888:	20000378 	.word	0x20000378

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018da:	f7ff ffd7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f004 fe5d 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff fd1f 	bl	8001324 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80018f4:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 80018f8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80018fc:	20000378 	.word	0x20000378

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f931 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fe1c 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f93b 	bl	8001be2 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f911 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000028 	.word	0x20000028
 80019a4:	20000024 	.word	0x20000024

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000028 	.word	0x20000028
 80019cc:	20000364 	.word	0x20000364

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000364 	.word	0x20000364

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000028 	.word	0x20000028

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff47 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff5c 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffb0 	bl	8001b50 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e159      	b.n	8001ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8148 	bne.w	8001ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a2 	beq.w	8001ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9e:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x202>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2f4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x1fe>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_GPIO_Init+0x2f8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x1f6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_GPIO_Init+0x300>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x1f2>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e10:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e42:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6c:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	f67f aea2 	bls.w	8001c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e264      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f56:	4ba3      	ldr	r3, [pc, #652]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d00c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4b9d      	ldr	r3, [pc, #628]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d05b      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e23f      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x74>
 8001f9e:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a90      	ldr	r2, [pc, #576]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a87      	ldr	r2, [pc, #540]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fcee 	bl	80019d0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fcea 	bl	80019d0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e204      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fcda 	bl	80019d0 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fcd6 	bl	80019d0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1f0      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002066:	4b5f      	ldr	r3, [pc, #380]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x152>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c4      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4952      	ldr	r1, [pc, #328]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e03a      	b.n	8002116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_RCC_OscConfig+0x2b0>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7ff fc8f 	bl	80019d0 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff fc8b 	bl	80019d0 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1a5      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4940      	ldr	r1, [pc, #256]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x2b0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff fc6e 	bl	80019d0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fc6a 	bl	80019d0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e184      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d030      	beq.n	8002184 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d016      	beq.n	8002158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCC_OscConfig+0x2b4>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fc4e 	bl	80019d0 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff fc4a 	bl	80019d0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e164      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x200>
 8002156:	e015      	b.n	8002184 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_OscConfig+0x2b4>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7ff fc37 	bl	80019d0 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002166:	f7ff fc33 	bl	80019d0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e14d      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80a0 	beq.w	80022d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x2b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d121      	bne.n	8002212 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RCC_OscConfig+0x2b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_RCC_OscConfig+0x2b8>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fbf9 	bl	80019d0 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e011      	b.n	8002206 <HAL_RCC_OscConfig+0x2ce>
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
 80021f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7ff fbec 	bl	80019d0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e106      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <HAL_RCC_OscConfig+0x4e4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d106      	bne.n	8002228 <HAL_RCC_OscConfig+0x2f0>
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x32a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x312>
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x32a>
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a74      	ldr	r2, [pc, #464]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a71      	ldr	r2, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff fbb1 	bl	80019d0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff fbad 	bl	80019d0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0c5      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x33a>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7ff fb9b 	bl	80019d0 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7ff fb97 	bl	80019d0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0af      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a55      	ldr	r2, [pc, #340]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 809b 	beq.w	8002412 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022dc:	4b50      	ldr	r3, [pc, #320]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d05c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d141      	bne.n	8002374 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4ec>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fb6b 	bl	80019d0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fb67 	bl	80019d0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e081      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	019b      	lsls	r3, r3, #6
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	3b01      	subs	r3, #1
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002346:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HAL_RCC_OscConfig+0x4ec>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fb40 	bl	80019d0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fb3c 	bl	80019d0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e056      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x41c>
 8002372:	e04e      	b.n	8002412 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_OscConfig+0x4ec>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fb29 	bl	80019d0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff fb25 	bl	80019d0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e03f      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	4b22      	ldr	r3, [pc, #136]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x44a>
 80023a0:	e037      	b.n	8002412 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e032      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d028      	beq.n	800240e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d121      	bne.n	800240e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d11a      	bne.n	800240e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023de:	4013      	ands	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d111      	bne.n	800240e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40007000 	.word	0x40007000
 8002420:	40023800 	.word	0x40023800
 8002424:	42470060 	.word	0x42470060

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0cc      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d90c      	bls.n	8002464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	494d      	ldr	r1, [pc, #308]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d044      	beq.n	8002548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d119      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e067      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4934      	ldr	r1, [pc, #208]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff fa5a 	bl	80019d0 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7ff fa56 	bl	80019d0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e04f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d20c      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4916      	ldr	r1, [pc, #88]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ae:	f000 f821 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f9ba 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00
 80025e4:	40023800 	.word	0x40023800
 80025e8:	0800afe0 	.word	0x0800afe0
 80025ec:	20000020 	.word	0x20000020
 80025f0:	20000024 	.word	0x20000024

080025f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025fa:	2100      	movs	r1, #0
 80025fc:	6079      	str	r1, [r7, #4]
 80025fe:	2100      	movs	r1, #0
 8002600:	60f9      	str	r1, [r7, #12]
 8002602:	2100      	movs	r1, #0
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002606:	2100      	movs	r1, #0
 8002608:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260a:	4952      	ldr	r1, [pc, #328]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 800260c:	6889      	ldr	r1, [r1, #8]
 800260e:	f001 010c 	and.w	r1, r1, #12
 8002612:	2908      	cmp	r1, #8
 8002614:	d00d      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3e>
 8002616:	2908      	cmp	r1, #8
 8002618:	f200 8094 	bhi.w	8002744 <HAL_RCC_GetSysClockFreq+0x150>
 800261c:	2900      	cmp	r1, #0
 800261e:	d002      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x32>
 8002620:	2904      	cmp	r1, #4
 8002622:	d003      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x38>
 8002624:	e08e      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_GetSysClockFreq+0x164>)
 8002628:	60bb      	str	r3, [r7, #8]
       break;
 800262a:	e08e      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_RCC_GetSysClockFreq+0x168>)
 800262e:	60bb      	str	r3, [r7, #8]
      break;
 8002630:	e08b      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002632:	4948      	ldr	r1, [pc, #288]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 8002634:	6849      	ldr	r1, [r1, #4]
 8002636:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800263a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263c:	4945      	ldr	r1, [pc, #276]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 800263e:	6849      	ldr	r1, [r1, #4]
 8002640:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002644:	2900      	cmp	r1, #0
 8002646:	d024      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002648:	4942      	ldr	r1, [pc, #264]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 800264a:	6849      	ldr	r1, [r1, #4]
 800264c:	0989      	lsrs	r1, r1, #6
 800264e:	4608      	mov	r0, r1
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002658:	f04f 0500 	mov.w	r5, #0
 800265c:	ea00 0204 	and.w	r2, r0, r4
 8002660:	ea01 0305 	and.w	r3, r1, r5
 8002664:	493d      	ldr	r1, [pc, #244]	; (800275c <HAL_RCC_GetSysClockFreq+0x168>)
 8002666:	fb01 f003 	mul.w	r0, r1, r3
 800266a:	2100      	movs	r1, #0
 800266c:	fb01 f102 	mul.w	r1, r1, r2
 8002670:	1844      	adds	r4, r0, r1
 8002672:	493a      	ldr	r1, [pc, #232]	; (800275c <HAL_RCC_GetSysClockFreq+0x168>)
 8002674:	fba2 0101 	umull	r0, r1, r2, r1
 8002678:	1863      	adds	r3, r4, r1
 800267a:	4619      	mov	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f7fe fb08 	bl	8000c98 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e04a      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	461a      	mov	r2, r3
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	ea02 0400 	and.w	r4, r2, r0
 80026aa:	ea03 0501 	and.w	r5, r3, r1
 80026ae:	4620      	mov	r0, r4
 80026b0:	4629      	mov	r1, r5
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	014b      	lsls	r3, r1, #5
 80026bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026c0:	0142      	lsls	r2, r0, #5
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	1b00      	subs	r0, r0, r4
 80026c8:	eb61 0105 	sbc.w	r1, r1, r5
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	018b      	lsls	r3, r1, #6
 80026d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026da:	0182      	lsls	r2, r0, #6
 80026dc:	1a12      	subs	r2, r2, r0
 80026de:	eb63 0301 	sbc.w	r3, r3, r1
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	00d9      	lsls	r1, r3, #3
 80026ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026f0:	00d0      	lsls	r0, r2, #3
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	1912      	adds	r2, r2, r4
 80026f8:	eb45 0303 	adc.w	r3, r5, r3
 80026fc:	f04f 0000 	mov.w	r0, #0
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	0299      	lsls	r1, r3, #10
 8002706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800270a:	0290      	lsls	r0, r2, #10
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	461a      	mov	r2, r3
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f7fe fabc 	bl	8000c98 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_RCC_GetSysClockFreq+0x160>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	60bb      	str	r3, [r7, #8]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_RCC_GetSysClockFreq+0x164>)
 8002746:	60bb      	str	r3, [r7, #8]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	68bb      	ldr	r3, [r7, #8]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bdb0      	pop	{r4, r5, r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	017d7840 	.word	0x017d7840

08002760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCC_GetHCLKFreq+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000020 	.word	0x20000020

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff0 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	0800aff0 	.word	0x0800aff0

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffdc 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0b5b      	lsrs	r3, r3, #13
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	0800aff0 	.word	0x0800aff0

080027c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07b      	b.n	80028d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ea:	d009      	beq.n	8002800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
 80027f2:	e005      	b.n	8002800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fed2 	bl	80015c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	ea42 0103 	orr.w	r1, r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0104 	and.w	r1, r3, #4
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f003 0210 	and.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_SPI_Transmit+0x22>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e126      	b.n	8002b4a <HAL_SPI_Transmit+0x270>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002904:	f7ff f864 	bl	80019d0 <HAL_GetTick>
 8002908:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800291e:	e10b      	b.n	8002b38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_Transmit+0x52>
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002930:	e102      	b.n	8002b38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002978:	d10f      	bne.n	800299a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002998:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d007      	beq.n	80029b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	d14b      	bne.n	8002a5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_Transmit+0xf6>
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d13e      	bne.n	8002a4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029f4:	e02b      	b.n	8002a4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d112      	bne.n	8002a2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	881a      	ldrh	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	1c9a      	adds	r2, r3, #2
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a28:	e011      	b.n	8002a4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a2a:	f7fe ffd1 	bl	80019d0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d803      	bhi.n	8002a42 <HAL_SPI_Transmit+0x168>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d102      	bne.n	8002a48 <HAL_SPI_Transmit+0x16e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a4c:	e074      	b.n	8002b38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ce      	bne.n	80029f6 <HAL_SPI_Transmit+0x11c>
 8002a58:	e04c      	b.n	8002af4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_Transmit+0x18e>
 8002a62:	8afb      	ldrh	r3, [r7, #22]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d140      	bne.n	8002aea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a8e:	e02c      	b.n	8002aea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d113      	bne.n	8002ac6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ac4:	e011      	b.n	8002aea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ac6:	f7fe ff83 	bl	80019d0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d803      	bhi.n	8002ade <HAL_SPI_Transmit+0x204>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d102      	bne.n	8002ae4 <HAL_SPI_Transmit+0x20a>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ae8:	e026      	b.n	8002b38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1cd      	bne.n	8002a90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fbcb 	bl	8003294 <SPI_EndRxTxTransaction>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e000      	b.n	8002b38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6e:	d112      	bne.n	8002b96 <HAL_SPI_Receive+0x44>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10e      	bne.n	8002b96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f8f1 	bl	8002d74 <HAL_SPI_TransmitReceive>
 8002b92:	4603      	mov	r3, r0
 8002b94:	e0ea      	b.n	8002d6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_SPI_Receive+0x52>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0e3      	b.n	8002d6c <HAL_SPI_Receive+0x21a>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bac:	f7fe ff10 	bl	80019d0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bc2:	e0ca      	b.n	8002d5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_SPI_Receive+0x7e>
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bd4:	e0c1      	b.n	8002d5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	88fa      	ldrh	r2, [r7, #6]
 8002bee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d10f      	bne.n	8002c3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d007      	beq.n	8002c5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d162      	bne.n	8002d2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c64:	e02e      	b.n	8002cc4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d115      	bne.n	8002ca0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f103 020c 	add.w	r2, r3, #12
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c9e:	e011      	b.n	8002cc4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca0:	f7fe fe96 	bl	80019d0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d803      	bhi.n	8002cb8 <HAL_SPI_Receive+0x166>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d102      	bne.n	8002cbe <HAL_SPI_Receive+0x16c>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cc2:	e04a      	b.n	8002d5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1cb      	bne.n	8002c66 <HAL_SPI_Receive+0x114>
 8002cce:	e031      	b.n	8002d34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d113      	bne.n	8002d06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	1c9a      	adds	r2, r3, #2
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d04:	e011      	b.n	8002d2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d06:	f7fe fe63 	bl	80019d0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d803      	bhi.n	8002d1e <HAL_SPI_Receive+0x1cc>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d102      	bne.n	8002d24 <HAL_SPI_Receive+0x1d2>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d28:	e017      	b.n	8002d5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1cd      	bne.n	8002cd0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fa45 	bl	80031c8 <SPI_EndRxTransaction>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
 8002d56:	e000      	b.n	8002d5a <HAL_SPI_Receive+0x208>
  }

error :
 8002d58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x26>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e18a      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x33c>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da2:	f7fe fe15 	bl	80019d0 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d00f      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x70>
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dca:	d107      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x68>
 8002dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d003      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de2:	e15b      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x82>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x82>
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dfc:	e14e      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d003      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2205      	movs	r2, #5
 8002e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	887a      	ldrh	r2, [r7, #2]
 8002e3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d007      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d178      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x10a>
 8002e78:	8b7b      	ldrh	r3, [r7, #26]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d166      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea2:	e053      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d11b      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x176>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d016      	beq.n	8002eea <HAL_SPI_TransmitReceive+0x176>
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d113      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d119      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x1b8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d014      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f2c:	f7fe fd50 	bl	80019d0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d807      	bhi.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d003      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f4a:	e0a7      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1a6      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x130>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1a1      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x130>
 8002f60:	e07c      	b.n	800305c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x1fc>
 8002f6a:	8b7b      	ldrh	r3, [r7, #26]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d16b      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f96:	e057      	b.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d114      	bne.n	8002fe0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d119      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x2ae>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d014      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301e:	2301      	movs	r3, #1
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003022:	f7fe fcd5 	bl	80019d0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_TransmitReceive+0x2c6>
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d102      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x2cc>
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003046:	e029      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1a2      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x224>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d19d      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f917 	bl	8003294 <SPI_EndRxTxTransaction>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003078:	e010      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	e000      	b.n	800309c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800309a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3730      	adds	r7, #48	; 0x30
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030c8:	f7fe fc82 	bl	80019d0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030d8:	f7fe fc7a 	bl	80019d0 <HAL_GetTick>
 80030dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030de:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	015b      	lsls	r3, r3, #5
 80030e4:	0d1b      	lsrs	r3, r3, #20
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ee:	e054      	b.n	800319a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d050      	beq.n	800319a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030f8:	f7fe fc6a 	bl	80019d0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d13d      	bne.n	800318a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800311c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003126:	d111      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003130:	d004      	beq.n	800313c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d107      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d10f      	bne.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e017      	b.n	80031ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3b01      	subs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d19b      	bne.n	80030f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000020 	.word	0x20000020

080031c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031dc:	d111      	bne.n	8003202 <SPI_EndRxTransaction+0x3a>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e6:	d004      	beq.n	80031f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d107      	bne.n	8003202 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320a:	d12a      	bne.n	8003262 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d012      	beq.n	800323c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff ff49 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02d      	beq.n	8003288 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e026      	b.n	800328a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2200      	movs	r2, #0
 8003244:	2101      	movs	r1, #1
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff ff36 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e013      	b.n	800328a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	2101      	movs	r1, #1
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ff23 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e000      	b.n	800328a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <SPI_EndRxTxTransaction+0x7c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <SPI_EndRxTxTransaction+0x80>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0d5b      	lsrs	r3, r3, #21
 80032ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d112      	bne.n	80032e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fef4 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d0f2      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x52>
 8003300:	e000      	b.n	8003304 <SPI_EndRxTxTransaction+0x70>
        break;
 8003302:	bf00      	nop
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000020 	.word	0x20000020
 8003314:	165e9f81 	.word	0x165e9f81

08003318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e03f      	b.n	80033aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f988 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f929 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08a      	sub	sp, #40	; 0x28
 80033b6:	af02      	add	r7, sp, #8
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d17c      	bne.n	80034cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_UART_Transmit+0x2c>
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e075      	b.n	80034ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x3e>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e06e      	b.n	80034ce <HAL_UART_Transmit+0x11c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2221      	movs	r2, #33	; 0x21
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003406:	f7fe fae3 	bl	80019d0 <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d108      	bne.n	8003434 <HAL_UART_Transmit+0x82>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e003      	b.n	800343c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003444:	e02a      	b.n	800349c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f840 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e036      	b.n	80034ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	3302      	adds	r3, #2
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e007      	b.n	800348e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	3301      	adds	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1cf      	bne.n	8003446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f810 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b090      	sub	sp, #64	; 0x40
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	e050      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d04c      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f6:	f7fe fa6b 	bl	80019d0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003502:	429a      	cmp	r2, r3
 8003504:	d241      	bcs.n	800358a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003526:	637a      	str	r2, [r7, #52]	; 0x34
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800352c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	613b      	str	r3, [r7, #16]
   return(result);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800355a:	623a      	str	r2, [r7, #32]
 800355c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	69f9      	ldr	r1, [r7, #28]
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	61bb      	str	r3, [r7, #24]
   return(result);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e00f      	b.n	80035aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d09f      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3740      	adds	r7, #64	; 0x40
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	b09f      	sub	sp, #124	; 0x7c
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	ea40 0301 	orr.w	r3, r0, r1
 80035d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	431a      	orrs	r2, r3
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035f8:	f021 010c 	bic.w	r1, r1, #12
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003602:	430b      	orrs	r3, r1
 8003604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	6999      	ldr	r1, [r3, #24]
 8003614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	ea40 0301 	orr.w	r3, r0, r1
 800361c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4bc5      	ldr	r3, [pc, #788]	; (8003938 <UART_SetConfig+0x384>)
 8003624:	429a      	cmp	r2, r3
 8003626:	d004      	beq.n	8003632 <UART_SetConfig+0x7e>
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4bc3      	ldr	r3, [pc, #780]	; (800393c <UART_SetConfig+0x388>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d103      	bne.n	800363a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003632:	f7ff f8b5 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003636:	6778      	str	r0, [r7, #116]	; 0x74
 8003638:	e002      	b.n	8003640 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800363a:	f7ff f89d 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 800363e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	f040 80b6 	bne.w	80037b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800364c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364e:	461c      	mov	r4, r3
 8003650:	f04f 0500 	mov.w	r5, #0
 8003654:	4622      	mov	r2, r4
 8003656:	462b      	mov	r3, r5
 8003658:	1891      	adds	r1, r2, r2
 800365a:	6439      	str	r1, [r7, #64]	; 0x40
 800365c:	415b      	adcs	r3, r3
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
 8003660:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003664:	1912      	adds	r2, r2, r4
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003678:	00d0      	lsls	r0, r2, #3
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	1911      	adds	r1, r2, r4
 8003680:	6639      	str	r1, [r7, #96]	; 0x60
 8003682:	416b      	adcs	r3, r5
 8003684:	667b      	str	r3, [r7, #100]	; 0x64
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	1891      	adds	r1, r2, r2
 8003692:	63b9      	str	r1, [r7, #56]	; 0x38
 8003694:	415b      	adcs	r3, r3
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800369c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036a0:	f7fd fafa 	bl	8000c98 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4ba5      	ldr	r3, [pc, #660]	; (8003940 <UART_SetConfig+0x38c>)
 80036aa:	fba3 2302 	umull	r2, r3, r3, r2
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	011e      	lsls	r6, r3, #4
 80036b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b4:	461c      	mov	r4, r3
 80036b6:	f04f 0500 	mov.w	r5, #0
 80036ba:	4622      	mov	r2, r4
 80036bc:	462b      	mov	r3, r5
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	6339      	str	r1, [r7, #48]	; 0x30
 80036c2:	415b      	adcs	r3, r3
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036ca:	1912      	adds	r2, r2, r4
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	f04f 0000 	mov.w	r0, #0
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	00d9      	lsls	r1, r3, #3
 80036da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036de:	00d0      	lsls	r0, r2, #3
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	1911      	adds	r1, r2, r4
 80036e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80036e8:	416b      	adcs	r3, r5
 80036ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80036fa:	415b      	adcs	r3, r3
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003702:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003706:	f7fd fac7 	bl	8000c98 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4b8c      	ldr	r3, [pc, #560]	; (8003940 <UART_SetConfig+0x38c>)
 8003710:	fba3 1302 	umull	r1, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	3332      	adds	r3, #50	; 0x32
 8003722:	4a87      	ldr	r2, [pc, #540]	; (8003940 <UART_SetConfig+0x38c>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003730:	441e      	add	r6, r3
 8003732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003734:	4618      	mov	r0, r3
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	1894      	adds	r4, r2, r2
 8003740:	623c      	str	r4, [r7, #32]
 8003742:	415b      	adcs	r3, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800374a:	1812      	adds	r2, r2, r0
 800374c:	eb41 0303 	adc.w	r3, r1, r3
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	f04f 0500 	mov.w	r5, #0
 8003758:	00dd      	lsls	r5, r3, #3
 800375a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800375e:	00d4      	lsls	r4, r2, #3
 8003760:	4622      	mov	r2, r4
 8003762:	462b      	mov	r3, r5
 8003764:	1814      	adds	r4, r2, r0
 8003766:	653c      	str	r4, [r7, #80]	; 0x50
 8003768:	414b      	adcs	r3, r1
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	1891      	adds	r1, r2, r2
 8003778:	61b9      	str	r1, [r7, #24]
 800377a:	415b      	adcs	r3, r3
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003782:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003786:	f7fd fa87 	bl	8000c98 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b6c      	ldr	r3, [pc, #432]	; (8003940 <UART_SetConfig+0x38c>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <UART_SetConfig+0x38c>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4432      	add	r2, r6
 80037b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b6:	e0b9      	b.n	800392c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ba:	461c      	mov	r4, r3
 80037bc:	f04f 0500 	mov.w	r5, #0
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	6139      	str	r1, [r7, #16]
 80037c8:	415b      	adcs	r3, r3
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037d0:	1912      	adds	r2, r2, r4
 80037d2:	eb45 0303 	adc.w	r3, r5, r3
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	00d9      	lsls	r1, r3, #3
 80037e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037e4:	00d0      	lsls	r0, r2, #3
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	eb12 0804 	adds.w	r8, r2, r4
 80037ee:	eb43 0905 	adc.w	r9, r3, r5
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	008b      	lsls	r3, r1, #2
 8003806:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800380a:	0082      	lsls	r2, r0, #2
 800380c:	4640      	mov	r0, r8
 800380e:	4649      	mov	r1, r9
 8003810:	f7fd fa42 	bl	8000c98 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b49      	ldr	r3, [pc, #292]	; (8003940 <UART_SetConfig+0x38c>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011e      	lsls	r6, r3, #4
 8003822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003824:	4618      	mov	r0, r3
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	1894      	adds	r4, r2, r2
 8003830:	60bc      	str	r4, [r7, #8]
 8003832:	415b      	adcs	r3, r3
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800383a:	1812      	adds	r2, r2, r0
 800383c:	eb41 0303 	adc.w	r3, r1, r3
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	f04f 0500 	mov.w	r5, #0
 8003848:	00dd      	lsls	r5, r3, #3
 800384a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800384e:	00d4      	lsls	r4, r2, #3
 8003850:	4622      	mov	r2, r4
 8003852:	462b      	mov	r3, r5
 8003854:	1814      	adds	r4, r2, r0
 8003856:	64bc      	str	r4, [r7, #72]	; 0x48
 8003858:	414b      	adcs	r3, r1
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4618      	mov	r0, r3
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	008b      	lsls	r3, r1, #2
 8003870:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003874:	0082      	lsls	r2, r0, #2
 8003876:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800387a:	f7fd fa0d 	bl	8000c98 <__aeabi_uldivmod>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <UART_SetConfig+0x38c>)
 8003884:	fba3 1302 	umull	r1, r3, r3, r2
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	2164      	movs	r1, #100	; 0x64
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	3332      	adds	r3, #50	; 0x32
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <UART_SetConfig+0x38c>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a2:	441e      	add	r6, r3
 80038a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a6:	4618      	mov	r0, r3
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	1894      	adds	r4, r2, r2
 80038b2:	603c      	str	r4, [r7, #0]
 80038b4:	415b      	adcs	r3, r3
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038bc:	1812      	adds	r2, r2, r0
 80038be:	eb41 0303 	adc.w	r3, r1, r3
 80038c2:	f04f 0400 	mov.w	r4, #0
 80038c6:	f04f 0500 	mov.w	r5, #0
 80038ca:	00dd      	lsls	r5, r3, #3
 80038cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038d0:	00d4      	lsls	r4, r2, #3
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb12 0a00 	adds.w	sl, r2, r0
 80038da:	eb43 0b01 	adc.w	fp, r3, r1
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	008b      	lsls	r3, r1, #2
 80038f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038f6:	0082      	lsls	r2, r0, #2
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	f7fd f9cc 	bl	8000c98 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <UART_SetConfig+0x38c>)
 8003906:	fba3 1302 	umull	r1, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2164      	movs	r1, #100	; 0x64
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	3332      	adds	r3, #50	; 0x32
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <UART_SetConfig+0x38c>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4432      	add	r2, r6
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	377c      	adds	r7, #124	; 0x7c
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40011000 	.word	0x40011000
 800393c:	40011400 	.word	0x40011400
 8003940:	51eb851f 	.word	0x51eb851f

08003944 <bme_spi_read_sr>:


static BME280_INTF_RET_TYPE bme_spi_read_sr(
		uint8_t reg_addr, uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4603      	mov	r3, r0
 8003952:	73fb      	strb	r3, [r7, #15]


	struct bme_spi_intf_sr* spi_intf = intf_ptr;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	617b      	str	r3, [r7, #20]

	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 0);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	6898      	ldr	r0, [r3, #8]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	2200      	movs	r2, #0
 8003964:	4619      	mov	r1, r3
 8003966:	f002 fb12 	bl	8005f8e <shift_reg_write_bit_16>
	reg_addr |= (1 << 7);
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6858      	ldr	r0, [r3, #4]
 8003978:	f107 010f 	add.w	r1, r7, #15
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	2201      	movs	r2, #1
 8003982:	f7fe ffaa 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_len, HAL_MAX_DELAY);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6858      	ldr	r0, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	b29a      	uxth	r2, r3
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	f7ff f8dd 	bl	8002b52 <HAL_SPI_Receive>
	shift_reg_oe(spi_intf->sr, 1);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2101      	movs	r1, #1
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fa6a 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16(spi_intf->sr, spi_intf->sr_pin, 1);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	6898      	ldr	r0, [r3, #8]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2201      	movs	r2, #1
 80039b0:	4619      	mov	r1, r3
 80039b2:	f002 faec 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 fa5b 	bl	8005e78 <shift_reg_oe>

	return 0;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <bme_spi_write_sr>:


static BME280_INTF_RET_TYPE bme_spi_write_sr(
		uint8_t reg_addr, const uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

	struct bme_spi_intf_sr* spi_intf = intf_ptr;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	617b      	str	r3, [r7, #20]


	shift_reg_write_bit_16(spi_intf->sr, spi_intf->sr_pin, 0);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	6898      	ldr	r0, [r3, #8]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2200      	movs	r2, #0
 80039ec:	4619      	mov	r1, r3
 80039ee:	f002 face 	bl	8005f8e <shift_reg_write_bit_16>
	reg_addr &= ~(1 << 7);
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6858      	ldr	r0, [r3, #4]
 8003a00:	f107 010f 	add.w	r1, r7, #15
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f7fe ff66 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6858      	ldr	r0, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	f7fe ff5d 	bl	80028da <HAL_SPI_Transmit>
	shift_reg_oe(spi_intf->sr, 1);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 fa26 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16(spi_intf->sr, spi_intf->sr_pin, 1);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	6898      	ldr	r0, [r3, #8]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2201      	movs	r2, #1
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f002 faa8 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 fa17 	bl	8005e78 <shift_reg_oe>


	return 0;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <bme_delay_us_sr>:


static void bme_delay_us_sr(uint32_t period, void *intf_ptr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	if (period < 1000)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a64:	d202      	bcs.n	8003a6c <bme_delay_us_sr+0x18>
		period = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	e005      	b.n	8003a78 <bme_delay_us_sr+0x24>
	else
		period = period / 1000;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a06      	ldr	r2, [pc, #24]	; (8003a88 <bme_delay_us_sr+0x34>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	607b      	str	r3, [r7, #4]

	HAL_Delay(period);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fd ffb5 	bl	80019e8 <HAL_Delay>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <bme_init_default_sr>:
}



void bme_init_default_sr( struct bme280_dev *bme, struct bme_spi_intf_sr* spi_intf)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	// Настройка bme280 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	(*bme).intf_ptr = spi_intf;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
	(*bme).intf = BME280_SPI_INTF;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	721a      	strb	r2, [r3, #8]
	(*bme).read = bme_spi_read_sr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <bme_init_default_sr+0x9c>)
 8003aa6:	60da      	str	r2, [r3, #12]
	(*bme).write = bme_spi_write_sr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <bme_init_default_sr+0xa0>)
 8003aac:	611a      	str	r2, [r3, #16]
	(*bme).delay_us = bme_delay_us_sr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <bme_init_default_sr+0xa4>)
 8003ab2:	615a      	str	r2, [r3, #20]

    bme280_soft_reset(bme);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa21 	bl	8003efc <bme280_soft_reset>


	bme280_init(bme);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f86a 	bl	8003b94 <bme280_init>


	(*bme).settings.osr_h = BME280_OVERSAMPLING_1X;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	(*bme).settings.osr_p = BME280_OVERSAMPLING_16X;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2205      	movs	r2, #5
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	(*bme).settings.osr_t = BME280_OVERSAMPLING_2X;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	(*bme).settings.filter = BME280_FILTER_COEFF_16;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	(*bme).settings.standby_time = BME280_STANDBY_TIME_0_5_MS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	uint8_t settings_sel;
	settings_sel = BME280_OSR_PRESS_SEL;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
	settings_sel |= BME280_OSR_TEMP_SEL;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	73fb      	strb	r3, [r7, #15]
	settings_sel |= BME280_OSR_HUM_SEL;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	73fb      	strb	r3, [r7, #15]
	settings_sel |= BME280_FILTER_SEL;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	73fb      	strb	r3, [r7, #15]
	settings_sel |= BME280_STANDBY_SEL;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	f043 0310 	orr.w	r3, r3, #16
 8003b0a:	73fb      	strb	r3, [r7, #15]
	 bme280_set_sensor_settings(settings_sel, bme);
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f941 	bl	8003d98 <bme280_set_sensor_settings>
	 bme280_set_sensor_mode(BME280_NORMAL_MODE, bme);
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f000 f992 	bl	8003e42 <bme280_set_sensor_mode>
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	08003945 	.word	0x08003945
 8003b2c:	080039cd 	.word	0x080039cd
 8003b30:	08003a55 	.word	0x08003a55

08003b34 <bme_read_data>:
struct bme280_data bme_read_data(struct bme280_dev *bme)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b094      	sub	sp, #80	; 0x50
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	61f8      	str	r0, [r7, #28]
      	// Чтение данные из bme280
	struct bme280_data comp_data;
		 bme280_get_sensor_data(BME280_ALL, &comp_data, bme);
 8003b3c:	f107 0320 	add.w	r3, r7, #32
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	4619      	mov	r1, r3
 8003b44:	2007      	movs	r0, #7
 8003b46:	f000 fa28 	bl	8003f9a <bme280_get_sensor_data>
		 return comp_data;
 8003b4a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003b4e:	f107 0520 	add.w	r5, r7, #32
 8003b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003b5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8003b5e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003b62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003b66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b6a:	ec45 4b15 	vmov	d5, r4, r5
 8003b6e:	ec41 0b16 	vmov	d6, r0, r1
 8003b72:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b76:	eeb0 0a45 	vmov.f32	s0, s10
 8003b7a:	eef0 0a65 	vmov.f32	s1, s11
 8003b7e:	eeb0 1a46 	vmov.f32	s2, s12
 8003b82:	eef0 1a66 	vmov.f32	s3, s13
 8003b86:	eeb0 2a47 	vmov.f32	s4, s14
 8003b8a:	eef0 2a67 	vmov.f32	s5, s15
 8003b8e:	3750      	adds	r7, #80	; 0x50
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdb0      	pop	{r4, r5, r7, pc}

08003b94 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8003b9c:	2305      	movs	r3, #5
 8003b9e:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f001 fa31 	bl	800500c <null_ptr_check>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d134      	bne.n	8003c20 <bme280_init+0x8c>
    {
        while (try_count)
 8003bb6:	e029      	b.n	8003c0c <bme280_init+0x78>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003bb8:	f107 010d 	add.w	r1, r7, #13
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	20d0      	movs	r0, #208	; 0xd0
 8003bc2:	f000 f833 	bl	8003c2c <bme280_get_regs>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if (rslt == BME280_OK)
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <bme280_init+0x62>
            {
                dev->chip_id = chip_id;
 8003bd2:	7b7a      	ldrb	r2, [r7, #13]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f98f 	bl	8003efc <bme280_soft_reset>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d114      	bne.n	8003c14 <bme280_init+0x80>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f884 	bl	8004cf8 <get_calib_data>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8003bf4:	e00e      	b.n	8003c14 <bme280_init+0x80>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6852      	ldr	r2, [r2, #4]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c04:	4798      	blx	r3
            --try_count;
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1d2      	bne.n	8003bb8 <bme280_init+0x24>
 8003c12:	e000      	b.n	8003c16 <bme280_init+0x82>
                break;
 8003c14:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <bme280_init+0x8c>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8003c1c:	23fe      	movs	r3, #254	; 0xfe
 8003c1e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 f9e4 	bl	800500c <null_ptr_check>
 8003c44:	4603      	mov	r3, r0
 8003c46:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8003c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11f      	bne.n	8003c90 <bme280_get_regs+0x64>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01c      	beq.n	8003c90 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7a1b      	ldrb	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d003      	beq.n	8003c66 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c64:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68dc      	ldr	r4, [r3, #12]
 8003c6a:	89ba      	ldrh	r2, [r7, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	7bf8      	ldrb	r0, [r7, #15]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	47a0      	blx	r4
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 8003c8a:	23fc      	movs	r3, #252	; 0xfc
 8003c8c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8003c8e:	e001      	b.n	8003c94 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003c90:	23ff      	movs	r3, #255	; 0xff
 8003c92:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd90      	pop	{r4, r7, pc}

08003ca0 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b08d      	sub	sp, #52	; 0x34
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d901      	bls.n	8003cba <bme280_set_regs+0x1a>
    {
        len = 10;
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003cba:	6838      	ldr	r0, [r7, #0]
 8003cbc:	f001 f9a6 	bl	800500c <null_ptr_check>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003cc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d159      	bne.n	8003d82 <bme280_set_regs+0xe2>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d056      	beq.n	8003d82 <bme280_set_regs+0xe2>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d053      	beq.n	8003d82 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d04c      	beq.n	8003d7a <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	7a1b      	ldrb	r3, [r3, #8]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d01a      	beq.n	8003d24 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf4:	e011      	b.n	8003d1a <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	440b      	add	r3, r1
 8003d08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d14:	3301      	adds	r3, #1
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3e8      	bcc.n	8003cf6 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d90d      	bls.n	8003d46 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f107 0114 	add.w	r1, r7, #20
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f001 f825 	bl	8004d82 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003d44:	e001      	b.n	8003d4a <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	691c      	ldr	r4, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	7818      	ldrb	r0, [r3, #0]
 8003d52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f107 0114 	add.w	r1, r7, #20
 8003d5c:	47a0      	blx	r4
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 8003d72:	23fc      	movs	r3, #252	; 0xfc
 8003d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8003d78:	e007      	b.n	8003d8a <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8003d7a:	23fd      	movs	r3, #253	; 0xfd
 8003d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8003d80:	e003      	b.n	8003d8a <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003d82:	23ff      	movs	r3, #255	; 0xff
 8003d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d88:	e000      	b.n	8003d8c <bme280_set_regs+0xec>
        if (len != 0)
 8003d8a:	bf00      	nop
    }

    return rslt;
 8003d8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3734      	adds	r7, #52	; 0x34
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}

08003d98 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	f001 f931 	bl	800500c <null_ptr_check>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d13f      	bne.n	8003e36 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003db6:	f107 030e 	add.w	r3, r7, #14
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f874 	bl	8003eaa <bme280_get_sensor_mode>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <bme280_set_sensor_settings+0x46>
 8003dce:	7bbb      	ldrb	r3, [r7, #14]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8003dd4:	6838      	ldr	r0, [r7, #0]
 8003dd6:	f000 fb7e 	bl	80044d6 <put_device_to_sleep>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d127      	bne.n	8003e36 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2007      	movs	r0, #7
 8003dec:	f001 f8f2 	bl	8004fd4 <are_settings_changed>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f9ba 	bl	800417a <set_osr_settings>
 8003e06:	4603      	mov	r3, r0
 8003e08:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d111      	bne.n	8003e36 <bme280_set_sensor_settings+0x9e>
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4619      	mov	r1, r3
 8003e16:	2018      	movs	r0, #24
 8003e18:	f001 f8dc 	bl	8004fd4 <are_settings_changed>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa41 	bl	80042b4 <set_filter_standby_settings>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	6039      	str	r1, [r7, #0]
 8003e4c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003e4e:	6838      	ldr	r0, [r7, #0]
 8003e50:	f001 f8dc 	bl	800500c <null_ptr_check>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d11e      	bne.n	8003e9e <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003e60:	f107 030e 	add.w	r3, r7, #14
 8003e64:	6839      	ldr	r1, [r7, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f81f 	bl	8003eaa <bme280_get_sensor_mode>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <bme280_set_sensor_mode+0x46>
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f000 fb29 	bl	80044d6 <put_device_to_sleep>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8003e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 faeb 	bl	8004470 <write_power_mode>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003eb4:	6838      	ldr	r0, [r7, #0]
 8003eb6:	f001 f8a9 	bl	800500c <null_ptr_check>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d112      	bne.n	8003eec <bme280_get_sensor_mode+0x42>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	20f4      	movs	r0, #244	; 0xf4
 8003ed4:	f7ff feaa 	bl	8003c2c <bme280_get_regs>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e001      	b.n	8003ef0 <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003eec:	23ff      	movs	r3, #255	; 0xff
 8003eee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8003f04:	23e0      	movs	r3, #224	; 0xe0
 8003f06:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8003f10:	23b6      	movs	r3, #182	; 0xb6
 8003f12:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f001 f879 	bl	800500c <null_ptr_check>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d133      	bne.n	8003f8e <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003f26:	f107 010b 	add.w	r1, r7, #11
 8003f2a:	f107 000d 	add.w	r0, r7, #13
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f7ff feb5 	bl	8003ca0 <bme280_set_regs>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d125      	bne.n	8003f8e <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6852      	ldr	r2, [r2, #4]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f50:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8003f52:	f107 010c 	add.w	r1, r7, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	20f3      	movs	r0, #243	; 0xf3
 8003f5c:	f7ff fe66 	bl	8003c2c <bme280_get_regs>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <bme280_soft_reset+0x84>
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	1e5a      	subs	r2, r3, #1
 8003f70:	73ba      	strb	r2, [r7, #14]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <bme280_soft_reset+0x84>
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e0      	bne.n	8003f42 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8003f80:	7b3b      	ldrb	r3, [r7, #12]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8003f8a:	23fa      	movs	r3, #250	; 0xfa
 8003f8c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b08a      	sub	sp, #40	; 0x28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	2300      	movs	r3, #0
 8003fae:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8003fb0:	f107 0310 	add.w	r3, r7, #16
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f001 f825 	bl	800500c <null_ptr_check>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8003fc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d124      	bne.n	800401a <bme280_get_sensor_data+0x80>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d021      	beq.n	800401a <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003fd6:	f107 011c 	add.w	r1, r7, #28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	20f7      	movs	r0, #247	; 0xf7
 8003fe0:	f7ff fe24 	bl	8003c2c <bme280_get_regs>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8003fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003ff2:	f107 0210 	add.w	r2, r7, #16
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 f815 	bl	800402c <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3318      	adds	r3, #24
 8004006:	f107 0110 	add.w	r1, r7, #16
 800400a:	7bf8      	ldrb	r0, [r7, #15]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	f000 f853 	bl	80040b8 <bme280_compensate_data>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8004018:	e002      	b.n	8004020 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800401a:	23ff      	movs	r3, #255	; 0xff
 800401c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8004020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004024:	4618      	mov	r0, r3
 8004026:	3728      	adds	r7, #40	; 0x28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	031b      	lsls	r3, r3, #12
 800403c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3301      	adds	r3, #1
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3302      	adds	r3, #2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	b2db      	uxtb	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	431a      	orrs	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3303      	adds	r3, #3
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	031b      	lsls	r3, r3, #12
 800406a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3305      	adds	r3, #5
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	b2db      	uxtb	r3, r3
 8004080:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	431a      	orrs	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3306      	adds	r3, #6
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3307      	adds	r3, #7
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04b      	beq.n	800416a <bme280_compensate_data+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d048      	beq.n	800416a <bme280_compensate_data+0xb2>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d045      	beq.n	800416a <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	68b8      	ldr	r0, [r7, #8]
 8004116:	f000 fa2b 	bl	8004570 <compensate_temperature>
 800411a:	eeb0 7a40 	vmov.f32	s14, s0
 800411e:	eef0 7a60 	vmov.f32	s15, s1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	ed83 7b02 	vstr	d7, [r3, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004132:	6839      	ldr	r1, [r7, #0]
 8004134:	68b8      	ldr	r0, [r7, #8]
 8004136:	f000 faef 	bl	8004718 <compensate_pressure>
 800413a:	eeb0 7a40 	vmov.f32	s14, s0
 800413e:	eef0 7a60 	vmov.f32	s15, s1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	ed83 7b00 	vstr	d7, [r3]
        }

        if (sensor_comp & BME280_HUM)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f000 fcaf 	bl	8004ab8 <compensate_humidity>
 800415a:	eeb0 7a40 	vmov.f32	s14, s0
 800415e:	eef0 7a60 	vmov.f32	s15, s1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8004168:	e001      	b.n	800416e <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800416a:	23ff      	movs	r3, #255	; 0xff
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800416e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f000 f815 	bl	80041c8 <set_osr_humidity_settings>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f842 	bl	800423c <set_osr_press_temp_settings>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80041bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80041d2:	23f2      	movs	r3, #242	; 0xf2
 80041d4:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	789b      	ldrb	r3, [r3, #2]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80041e2:	f107 010e 	add.w	r1, r7, #14
 80041e6:	f107 000c 	add.w	r0, r7, #12
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f7ff fd57 	bl	8003ca0 <bme280_set_regs>
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80041fe:	23f4      	movs	r3, #244	; 0xf4
 8004200:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004202:	7b38      	ldrb	r0, [r7, #12]
 8004204:	f107 010d 	add.w	r1, r7, #13
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	f7ff fd0e 	bl	8003c2c <bme280_get_regs>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8004214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800421c:	f107 010d 	add.w	r1, r7, #13
 8004220:	f107 000c 	add.w	r0, r7, #12
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2201      	movs	r2, #1
 8004228:	f7ff fd3a 	bl	8003ca0 <bme280_set_regs>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800424a:	23f4      	movs	r3, #244	; 0xf4
 800424c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800424e:	7db8      	ldrb	r0, [r7, #22]
 8004250:	f107 0115 	add.w	r1, r7, #21
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f7ff fce8 	bl	8003c2c <bme280_get_regs>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8004260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11f      	bne.n	80042a8 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8004272:	f107 0315 	add.w	r3, r7, #21
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f88e 	bl	800439a <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8004288:	f107 0315 	add.w	r3, r7, #21
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f8a0 	bl	80043d4 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004294:	f107 0115 	add.w	r1, r7, #21
 8004298:	f107 0016 	add.w	r0, r7, #22
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f7ff fcfe 	bl	8003ca0 <bme280_set_regs>
 80042a4:	4603      	mov	r3, r0
 80042a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80042a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80042c2:	23f5      	movs	r3, #245	; 0xf5
 80042c4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80042c6:	7db8      	ldrb	r0, [r7, #22]
 80042c8:	f107 0115 	add.w	r1, r7, #21
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f7ff fcac 	bl	8003c2c <bme280_get_regs>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 80042d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11f      	bne.n	8004320 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 80042ea:	f107 0315 	add.w	r3, r7, #21
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f81b 	bl	800432c <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8004300:	f107 0315 	add.w	r3, r7, #21
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f82d 	bl	8004366 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800430c:	f107 0115 	add.w	r1, r7, #21
 8004310:	f107 0016 	add.w	r0, r7, #22
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f7ff fcc2 	bl	8003ca0 <bme280_set_regs>
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b25b      	sxtb	r3, r3
 800433c:	f023 031c 	bic.w	r3, r3, #28
 8004340:	b25a      	sxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	78db      	ldrb	r3, [r3, #3]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f003 031c 	and.w	r3, r3, #28
 800434e:	b25b      	sxtb	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	b25b      	sxtb	r3, r3
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	701a      	strb	r2, [r3, #0]
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b25b      	sxtb	r3, r3
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	b25a      	sxtb	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	791b      	ldrb	r3, [r3, #4]
 8004380:	015b      	lsls	r3, r3, #5
 8004382:	b25b      	sxtb	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b25b      	sxtb	r3, r3
 8004388:	b2da      	uxtb	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	701a      	strb	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	f023 031c 	bic.w	r3, r3, #28
 80043ae:	b25a      	sxtb	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	f003 031c 	and.w	r3, r3, #28
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	701a      	strb	r2, [r3, #0]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	b25a      	sxtb	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	015b      	lsls	r3, r3, #5
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	701a      	strb	r2, [r3, #0]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	b2da      	uxtb	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3302      	adds	r3, #2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	109b      	asrs	r3, r3, #2
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	b2da      	uxtb	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3302      	adds	r3, #2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	b2da      	uxtb	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3303      	adds	r3, #3
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	109b      	asrs	r3, r3, #2
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	b2da      	uxtb	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3303      	adds	r3, #3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	b2da      	uxtb	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	711a      	strb	r2, [r3, #4]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800447c:	23f4      	movs	r3, #244	; 0xf4
 800447e:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004480:	7bb8      	ldrb	r0, [r7, #14]
 8004482:	f107 010d 	add.w	r1, r7, #13
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	f7ff fbcf 	bl	8003c2c <bme280_get_regs>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8004492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d117      	bne.n	80044ca <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	b25b      	sxtb	r3, r3
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	4313      	orrs	r3, r2
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80044b6:	f107 010d 	add.w	r1, r7, #13
 80044ba:	f107 000e 	add.w	r0, r7, #14
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f7ff fbed 	bl	8003ca0 <bme280_set_regs>
 80044c6:	4603      	mov	r3, r0
 80044c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80044de:	f107 0110 	add.w	r1, r7, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	20f2      	movs	r0, #242	; 0xf2
 80044e8:	f7ff fba0 	bl	8003c2c <bme280_get_regs>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 80044f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d118      	bne.n	800452a <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 80044f8:	f107 0208 	add.w	r2, r7, #8
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff80 	bl	8004408 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fcf7 	bl	8003efc <bme280_soft_reset>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8004512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f808 	bl	8004536 <reload_device_settings>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800452a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	201f      	movs	r0, #31
 8004546:	f7ff fe18 	bl	800417a <set_osr_settings>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 800454e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	201f      	movs	r0, #31
 800455c:	f7ff feaa 	bl	80042b4 <set_filter_standby_settings>
 8004560:	4603      	mov	r3, r0
 8004562:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8004570:	b5b0      	push	{r4, r5, r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <compensate_temperature+0x18c>)
 8004580:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	4b5d      	ldr	r3, [pc, #372]	; (8004700 <compensate_temperature+0x190>)
 800458a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb ffbe 	bl	8000514 <__aeabi_ui2d>
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <compensate_temperature+0x194>)
 800459e:	f7fc f95d 	bl	800085c <__aeabi_ddiv>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4614      	mov	r4, r2
 80045a8:	461d      	mov	r5, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb ffb0 	bl	8000514 <__aeabi_ui2d>
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <compensate_temperature+0x198>)
 80045ba:	f7fc f94f 	bl	800085c <__aeabi_ddiv>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	f7fb fe67 	bl	8000298 <__aeabi_dsub>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fb ffab 	bl	8000534 <__aeabi_i2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80045e6:	f7fc f80f 	bl	8000608 <__aeabi_dmul>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fb ff8c 	bl	8000514 <__aeabi_ui2d>
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004604:	f7fc f92a 	bl	800085c <__aeabi_ddiv>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fb ff7d 	bl	8000514 <__aeabi_ui2d>
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	4b3b      	ldr	r3, [pc, #236]	; (800470c <compensate_temperature+0x19c>)
 8004620:	f7fc f91c 	bl	800085c <__aeabi_ddiv>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4620      	mov	r0, r4
 800462a:	4629      	mov	r1, r5
 800462c:	f7fb fe34 	bl	8000298 <__aeabi_dsub>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8004638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004640:	f7fb ffe2 	bl	8000608 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4614      	mov	r4, r2
 800464a:	461d      	mov	r5, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fb ff6e 	bl	8000534 <__aeabi_i2d>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb ffd2 	bl	8000608 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 800466c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004670:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004674:	f7fb fe12 	bl	800029c <__adddf3>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	f7fc fa72 	bl	8000b68 <__aeabi_d2iz>
 8004684:	4602      	mov	r2, r0
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 800468a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004692:	f7fb fe03 	bl	800029c <__adddf3>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <compensate_temperature+0x1a0>)
 80046a4:	f7fc f8da 	bl	800085c <__aeabi_ddiv>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 80046b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046b8:	f7fc fa18 	bl	8000aec <__aeabi_dcmplt>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 80046c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80046ca:	e00c      	b.n	80046e6 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046d4:	f7fc fa28 	bl	8000b28 <__aeabi_dcmpgt>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 80046de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 80046e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80046ee:	eeb0 0a47 	vmov.f32	s0, s14
 80046f2:	eef0 0a67 	vmov.f32	s1, s15
 80046f6:	3730      	adds	r7, #48	; 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}
 80046fc:	c0440000 	.word	0xc0440000
 8004700:	40554000 	.word	0x40554000
 8004704:	40d00000 	.word	0x40d00000
 8004708:	40900000 	.word	0x40900000
 800470c:	40c00000 	.word	0x40c00000
 8004710:	40b40000 	.word	0x40b40000
 8004714:	00000000 	.word	0x00000000

08004718 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b08e      	sub	sp, #56	; 0x38
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8004722:	a3d9      	add	r3, pc, #868	; (adr r3, 8004a88 <compensate_pressure+0x370>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 800472c:	a3d8      	add	r3, pc, #864	; (adr r3, 8004a90 <compensate_pressure+0x378>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb fefa 	bl	8000534 <__aeabi_i2d>
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004748:	f7fc f888 	bl	800085c <__aeabi_ddiv>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	4bc1      	ldr	r3, [pc, #772]	; (8004a60 <compensate_pressure+0x348>)
 800475a:	f7fb fd9d 	bl	8000298 <__aeabi_dsub>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8004766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800476a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800476e:	f7fb ff4b 	bl	8000608 <__aeabi_dmul>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4614      	mov	r4, r2
 8004778:	461d      	mov	r5, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004780:	4618      	mov	r0, r3
 8004782:	f7fb fed7 	bl	8000534 <__aeabi_i2d>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4620      	mov	r0, r4
 800478c:	4629      	mov	r1, r5
 800478e:	f7fb ff3b 	bl	8000608 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	4bb1      	ldr	r3, [pc, #708]	; (8004a64 <compensate_pressure+0x34c>)
 80047a0:	f7fc f85c 	bl	800085c <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb febe 	bl	8000534 <__aeabi_i2d>
 80047b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047bc:	f7fb ff24 	bl	8000608 <__aeabi_dmul>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	f7fb fd66 	bl	800029c <__adddf3>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047d8:	f7fb fd60 	bl	800029c <__adddf3>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <compensate_pressure+0x350>)
 80047ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047ee:	f7fc f835 	bl	800085c <__aeabi_ddiv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	461d      	mov	r5, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb fe97 	bl	8000534 <__aeabi_i2d>
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	4b98      	ldr	r3, [pc, #608]	; (8004a6c <compensate_pressure+0x354>)
 800480c:	f7fb fefc 	bl	8000608 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fb fd40 	bl	800029c <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe82 	bl	8000534 <__aeabi_i2d>
 8004830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004834:	f7fb fee8 	bl	8000608 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004844:	f7fb fee0 	bl	8000608 <__aeabi_dmul>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	4b86      	ldr	r3, [pc, #536]	; (8004a70 <compensate_pressure+0x358>)
 8004856:	f7fc f801 	bl	800085c <__aeabi_ddiv>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fe63 	bl	8000534 <__aeabi_i2d>
 800486e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004872:	f7fb fec9 	bl	8000608 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004882:	f7fb fd0b 	bl	800029c <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	4b77      	ldr	r3, [pc, #476]	; (8004a70 <compensate_pressure+0x358>)
 8004894:	f7fb ffe2 	bl	800085c <__aeabi_ddiv>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <compensate_pressure+0x34c>)
 80048a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048aa:	f7fb ffd7 	bl	800085c <__aeabi_ddiv>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	4b6e      	ldr	r3, [pc, #440]	; (8004a74 <compensate_pressure+0x35c>)
 80048bc:	f7fb fcee 	bl	800029c <__adddf3>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	88db      	ldrh	r3, [r3, #6]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fb fe21 	bl	8000514 <__aeabi_ui2d>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fb fe95 	bl	8000608 <__aeabi_dmul>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048f2:	f7fc f919 	bl	8000b28 <__aeabi_dcmpgt>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80cd 	beq.w	8004a98 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fb fe06 	bl	8000514 <__aeabi_ui2d>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	f04f 0000 	mov.w	r0, #0
 8004910:	4959      	ldr	r1, [pc, #356]	; (8004a78 <compensate_pressure+0x360>)
 8004912:	f7fb fcc1 	bl	8000298 <__aeabi_dsub>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <compensate_pressure+0x364>)
 8004924:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004928:	f7fb ff98 	bl	800085c <__aeabi_ddiv>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004934:	f7fb fcb0 	bl	8000298 <__aeabi_dsub>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	a345      	add	r3, pc, #276	; (adr r3, 8004a58 <compensate_pressure+0x340>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fe5f 	bl	8000608 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004956:	f7fb ff81 	bl	800085c <__aeabi_ddiv>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fde3 	bl	8000534 <__aeabi_i2d>
 800496e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004972:	f7fb fe49 	bl	8000608 <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004982:	f7fb fe41 	bl	8000608 <__aeabi_dmul>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <compensate_pressure+0x368>)
 8004994:	f7fb ff62 	bl	800085c <__aeabi_ddiv>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb fdc4 	bl	8000534 <__aeabi_i2d>
 80049ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049b0:	f7fb fe2a 	bl	8000608 <__aeabi_dmul>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <compensate_pressure+0x34c>)
 80049c2:	f7fb ff4b 	bl	800085c <__aeabi_ddiv>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 80049ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049d6:	f7fb fc61 	bl	800029c <__adddf3>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4614      	mov	r4, r2
 80049e0:	461d      	mov	r5, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fb fda3 	bl	8000534 <__aeabi_i2d>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7fb fc51 	bl	800029c <__adddf3>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <compensate_pressure+0x36c>)
 8004a08:	f7fb ff28 	bl	800085c <__aeabi_ddiv>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a14:	f7fb fc42 	bl	800029c <__adddf3>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 8004a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a28:	f7fc f860 	bl	8000aec <__aeabi_dcmplt>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8004a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004a3a:	e031      	b.n	8004aa0 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8004a3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a44:	f7fc f870 	bl	8000b28 <__aeabi_dcmpgt>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d028      	beq.n	8004aa0 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8004a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004a56:	e023      	b.n	8004aa0 <compensate_pressure+0x388>
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	40b86a00 	.word	0x40b86a00
 8004a60:	40ef4000 	.word	0x40ef4000
 8004a64:	40e00000 	.word	0x40e00000
 8004a68:	40100000 	.word	0x40100000
 8004a6c:	40f00000 	.word	0x40f00000
 8004a70:	41200000 	.word	0x41200000
 8004a74:	3ff00000 	.word	0x3ff00000
 8004a78:	41300000 	.word	0x41300000
 8004a7c:	40b00000 	.word	0x40b00000
 8004a80:	41e00000 	.word	0x41e00000
 8004a84:	40300000 	.word	0x40300000
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	40dd4c00 	.word	0x40dd4c00
 8004a90:	00000000 	.word	0x00000000
 8004a94:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8004a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8004aa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aa4:	ec43 2b17 	vmov	d7, r2, r3
}
 8004aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8004aac:	eef0 0a67 	vmov.f32	s1, s15
 8004ab0:	3738      	adds	r7, #56	; 0x38
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab6:	bf00      	nop

08004ab8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8004ab8:	b5b0      	push	{r4, r5, r7, lr}
 8004aba:	b094      	sub	sp, #80	; 0x50
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <compensate_humidity+0x220>)
 8004ad4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fb fd29 	bl	8000534 <__aeabi_i2d>
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <compensate_humidity+0x224>)
 8004ae8:	f7fb fbd6 	bl	8000298 <__aeabi_dsub>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd1a 	bl	8000534 <__aeabi_i2d>
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <compensate_humidity+0x228>)
 8004b06:	f7fb fd7f 	bl	8000608 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4614      	mov	r4, r2
 8004b10:	461d      	mov	r5, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fb fd0b 	bl	8000534 <__aeabi_i2d>
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	4b70      	ldr	r3, [pc, #448]	; (8004ce4 <compensate_humidity+0x22c>)
 8004b24:	f7fb fe9a 	bl	800085c <__aeabi_ddiv>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b34:	f7fb fd68 	bl	8000608 <__aeabi_dmul>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb fbac 	bl	800029c <__adddf3>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fcdf 	bl	8000514 <__aeabi_ui2d>
 8004b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5a:	f7fb fb9d 	bl	8000298 <__aeabi_dsub>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fb fce1 	bl	8000534 <__aeabi_i2d>
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	4b5c      	ldr	r3, [pc, #368]	; (8004ce8 <compensate_humidity+0x230>)
 8004b78:	f7fb fe70 	bl	800085c <__aeabi_ddiv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	7f1b      	ldrb	r3, [r3, #28]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb fcc3 	bl	8000514 <__aeabi_ui2d>
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <compensate_humidity+0x234>)
 8004b94:	f7fb fe62 	bl	800085c <__aeabi_ddiv>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ba4:	f7fb fd30 	bl	8000608 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b4e      	ldr	r3, [pc, #312]	; (8004cf0 <compensate_humidity+0x238>)
 8004bb6:	f7fb fb71 	bl	800029c <__adddf3>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb fcb3 	bl	8000534 <__aeabi_i2d>
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	4b46      	ldr	r3, [pc, #280]	; (8004cec <compensate_humidity+0x234>)
 8004bd4:	f7fb fe42 	bl	800085c <__aeabi_ddiv>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004be4:	f7fb fd10 	bl	8000608 <__aeabi_dmul>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bf4:	f7fb fd08 	bl	8000608 <__aeabi_dmul>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	4b3a      	ldr	r3, [pc, #232]	; (8004cf0 <compensate_humidity+0x238>)
 8004c06:	f7fb fb49 	bl	800029c <__adddf3>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8004c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c1a:	f7fb fcf5 	bl	8000608 <__aeabi_dmul>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4614      	mov	r4, r2
 8004c24:	461d      	mov	r5, r3
 8004c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c2e:	f7fb fceb 	bl	8000608 <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb fce5 	bl	8000608 <__aeabi_dmul>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	7e1b      	ldrb	r3, [r3, #24]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc62 	bl	8000514 <__aeabi_ui2d>
 8004c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c54:	f7fb fcd8 	bl	8000608 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <compensate_humidity+0x23c>)
 8004c66:	f7fb fdf9 	bl	800085c <__aeabi_ddiv>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	f04f 0000 	mov.w	r0, #0
 8004c72:	491f      	ldr	r1, [pc, #124]	; (8004cf0 <compensate_humidity+0x238>)
 8004c74:	f7fb fb10 	bl	8000298 <__aeabi_dsub>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c80:	f7fb fcc2 	bl	8000608 <__aeabi_dmul>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 8004c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c94:	f7fb ff48 	bl	8000b28 <__aeabi_dcmpgt>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8004c9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ca2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004ca6:	e00c      	b.n	8004cc2 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8004ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004cb0:	f7fb ff1c 	bl	8000aec <__aeabi_dcmplt>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8004cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cbe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8004cc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cc6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cca:	eeb0 0a47 	vmov.f32	s0, s14
 8004cce:	eef0 0a67 	vmov.f32	s1, s15
 8004cd2:	3750      	adds	r7, #80	; 0x50
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd8:	40590000 	.word	0x40590000
 8004cdc:	40f2c000 	.word	0x40f2c000
 8004ce0:	40500000 	.word	0x40500000
 8004ce4:	40d00000 	.word	0x40d00000
 8004ce8:	40f00000 	.word	0x40f00000
 8004cec:	41900000 	.word	0x41900000
 8004cf0:	3ff00000 	.word	0x3ff00000
 8004cf4:	41200000 	.word	0x41200000

08004cf8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004d00:	2388      	movs	r3, #136	; 0x88
 8004d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	f107 0310 	add.w	r3, r7, #16
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	611a      	str	r2, [r3, #16]
 8004d1a:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004d1c:	f107 010c 	add.w	r1, r7, #12
 8004d20:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	221a      	movs	r2, #26
 8004d28:	f7fe ff80 	bl	8003c2c <bme280_get_regs>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 8004d32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11d      	bne.n	8004d76 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8004d3a:	f107 030c 	add.w	r3, r7, #12
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f84a 	bl	8004dda <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004d46:	23e1      	movs	r3, #225	; 0xe1
 8004d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004d4c:	f107 010c 	add.w	r1, r7, #12
 8004d50:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2207      	movs	r2, #7
 8004d58:	f7fe ff68 	bl	8003c2c <bme280_get_regs>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 8004d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8004d6a:	f107 030c 	add.w	r3, r7, #12
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f8e1 	bl	8004f38 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8004d76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3728      	adds	r7, #40	; 0x28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
 8004d94:	e016      	b.n	8004dc4 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	3b01      	subs	r3, #1
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	440b      	add	r3, r1
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	441a      	add	r2, r3
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4619      	mov	r1, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	440b      	add	r3, r1
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
 8004dc4:	7dfa      	ldrb	r2, [r7, #23]
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3e4      	bcc.n	8004d96 <interleave_reg_addr+0x14>
    }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	3318      	adds	r3, #24
 8004de8:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3301      	adds	r3, #1
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	b21a      	sxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b21b      	sxth	r3, r3
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3303      	adds	r3, #3
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	b21a      	sxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3302      	adds	r3, #2
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b21a      	sxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3305      	adds	r3, #5
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	b21a      	sxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b21b      	sxth	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3307      	adds	r3, #7
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	b21a      	sxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3306      	adds	r3, #6
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b21b      	sxth	r3, r3
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b21b      	sxth	r3, r3
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3309      	adds	r3, #9
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	b21a      	sxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3308      	adds	r3, #8
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b21a      	sxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	330b      	adds	r3, #11
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	b21a      	sxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	330a      	adds	r3, #10
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	b21a      	sxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	330d      	adds	r3, #13
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	b21a      	sxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	330c      	adds	r3, #12
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	b21a      	sxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	330f      	adds	r3, #15
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	b21a      	sxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	330e      	adds	r3, #14
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	b21a      	sxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3311      	adds	r3, #17
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	b21a      	sxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3310      	adds	r3, #16
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	b21b      	sxth	r3, r3
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b21a      	sxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3313      	adds	r3, #19
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	b21a      	sxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3312      	adds	r3, #18
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b21b      	sxth	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b21a      	sxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3315      	adds	r3, #21
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	b21a      	sxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3314      	adds	r3, #20
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b21b      	sxth	r3, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b21a      	sxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3317      	adds	r3, #23
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3316      	adds	r3, #22
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b21a      	sxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7e5a      	ldrb	r2, [r3, #25]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	761a      	strb	r2, [r3, #24]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	3318      	adds	r3, #24
 8004f46:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	b21a      	sxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b21a      	sxth	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	789a      	ldrb	r2, [r3, #2]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3303      	adds	r3, #3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8004f86:	8a7a      	ldrh	r2, [r7, #18]
 8004f88:	8a3b      	ldrh	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3305      	adds	r3, #5
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8004fae:	89fa      	ldrh	r2, [r7, #14]
 8004fb0:	89bb      	ldrh	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b21a      	sxth	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3306      	adds	r3, #6
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b25a      	sxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	460a      	mov	r2, r1
 8004fde:	71fb      	strb	r3, [r7, #7]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	79bb      	ldrb	r3, [r7, #6]
 8004fec:	4013      	ands	r3, r2
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e001      	b.n	8004ffe <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <null_ptr_check+0x26>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <null_ptr_check+0x26>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <null_ptr_check+0x26>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8005032:	23ff      	movs	r3, #255	; 0xff
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e001      	b.n	800503c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <dwt_delay_init>:

#include <stm32f4xx.h>


int dwt_delay_init(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
    static uint8_t reinit_defence = 0;
    if (reinit_defence) {
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <dwt_delay_init+0x6c>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <dwt_delay_init+0x10>
    	return 1; /*clock cycle counter not started*/
 8005058:	2301      	movs	r3, #1
 800505a:	e027      	b.n	80050ac <dwt_delay_init+0x60>
    }
	/* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800505c:	4b17      	ldr	r3, [pc, #92]	; (80050bc <dwt_delay_init+0x70>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <dwt_delay_init+0x70>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005066:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <dwt_delay_init+0x70>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <dwt_delay_init+0x70>)
 800506e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005072:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8005074:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <dwt_delay_init+0x74>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <dwt_delay_init+0x74>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <dwt_delay_init+0x74>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0e      	ldr	r2, [pc, #56]	; (80050c0 <dwt_delay_init+0x74>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <dwt_delay_init+0x74>)
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8005092:	bf00      	nop
    __ASM volatile ("NOP");
 8005094:	bf00      	nop
    __ASM volatile ("NOP");
 8005096:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT) {
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <dwt_delay_init+0x74>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <dwt_delay_init+0x5e>
    	reinit_defence = 1;
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <dwt_delay_init+0x6c>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
    	return 0; /*clock cycle counter started*/
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <dwt_delay_init+0x60>
    } else {
    	return 1; /*clock cycle counter not started*/
 80050aa:	2301      	movs	r3, #1
    }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000220 	.word	0x20000220
 80050bc:	e000edf0 	.word	0xe000edf0
 80050c0:	e0001000 	.word	0xe0001000

080050c4 <dwt_delay_us>:


void dwt_delay_us(uint32_t pause_us)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	const uint32_t initial_ticks = DWT->CYCCNT;
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <dwt_delay_us+0x44>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]
	const uint32_t ticks_per_us = (HAL_RCC_GetHCLKFreq() / 1000 / 1000);
 80050d2:	f7fd fb45 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a0c      	ldr	r2, [pc, #48]	; (800510c <dwt_delay_us+0x48>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0c9b      	lsrs	r3, r3, #18
 80050e0:	613b      	str	r3, [r7, #16]
	const uint32_t ticks_to_wait = ticks_per_us * pause_us;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	60fb      	str	r3, [r7, #12]

	while ((DWT->CYCCNT - initial_ticks) < ticks_to_wait)
 80050ec:	bf00      	nop
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <dwt_delay_us+0x44>)
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d8f8      	bhi.n	80050ee <dwt_delay_us+0x2a>
	{}
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	e0001000 	.word	0xe0001000
 800510c:	431bde83 	.word	0x431bde83

08005110 <lis3mdl_write_sr>:
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
}

static int32_t lis3mdl_write_sr(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	461a      	mov	r2, r3
 800511c:	460b      	mov	r3, r1
 800511e:	72fb      	strb	r3, [r7, #11]
 8005120:	4613      	mov	r3, r2
 8005122:	813b      	strh	r3, [r7, #8]

	struct lis_spi_intf_sr* spi_intf = intf_ptr;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr&~(1<<7);
 8005128:	7afb      	ldrb	r3, [r7, #11]
 800512a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800512e:	b2db      	uxtb	r3, r3
 8005130:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	b2db      	uxtb	r3, r3
 800513a:	72fb      	strb	r3, [r7, #11]

	shift_reg_write_bit_16(spi_intf->sr, spi_intf->sr_pin, 0);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	6898      	ldr	r0, [r3, #8]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	2200      	movs	r2, #0
 8005148:	4619      	mov	r1, r3
 800514a:	f000 ff20 	bl	8005f8e <shift_reg_write_bit_16>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6858      	ldr	r0, [r3, #4]
 8005152:	f107 010b 	add.w	r1, r7, #11
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	2201      	movs	r2, #1
 800515c:	f7fd fbbd 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6858      	ldr	r0, [r3, #4]
 8005164:	893a      	ldrh	r2, [r7, #8]
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	f7fd fbb5 	bl	80028da <HAL_SPI_Transmit>
	shift_reg_oe(spi_intf->sr, 1);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fe7e 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 1);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	6898      	ldr	r0, [r3, #8]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	2201      	movs	r2, #1
 8005188:	4619      	mov	r1, r3
 800518a:	f000 ff00 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fe6f 	bl	8005e78 <shift_reg_oe>
	return 0;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <lis3mdl_read_sr>:

static int32_t lis3mdl_read_sr(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	461a      	mov	r2, r3
 80051b0:	460b      	mov	r3, r1
 80051b2:	72fb      	strb	r3, [r7, #11]
 80051b4:	4613      	mov	r3, r2
 80051b6:	813b      	strh	r3, [r7, #8]
	struct lis_spi_intf_sr* spi_intf = intf_ptr;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	617b      	str	r3, [r7, #20]

	reg_addr=reg_addr|(1<<7);
 80051bc:	7afb      	ldrb	r3, [r7, #11]
 80051be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	72fb      	strb	r3, [r7, #11]
	reg_addr=reg_addr|(1<<6);
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	72fb      	strb	r3, [r7, #11]

	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 0);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	6898      	ldr	r0, [r3, #8]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2200      	movs	r2, #0
 80051dc:	4619      	mov	r1, r3
 80051de:	f000 fed6 	bl	8005f8e <shift_reg_write_bit_16>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6858      	ldr	r0, [r3, #4]
 80051e6:	f107 010b 	add.w	r1, r7, #11
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295
 80051ee:	2201      	movs	r2, #1
 80051f0:	f7fd fb73 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, data, data_size, HAL_MAX_DELAY);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6858      	ldr	r0, [r3, #4]
 80051f8:	893a      	ldrh	r2, [r7, #8]
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	f7fd fca7 	bl	8002b52 <HAL_SPI_Receive>
	shift_reg_oe(spi_intf->sr, 1);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2101      	movs	r1, #1
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fe34 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 1);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6898      	ldr	r0, [r3, #8]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	2201      	movs	r2, #1
 800521c:	4619      	mov	r1, r3
 800521e:	f000 feb6 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fe25 	bl	8005e78 <shift_reg_oe>
	return 0;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <lisset_sr>:

void lisset_sr(stmdev_ctx_t *ctx, struct lis_spi_intf_sr *spi_interface)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
// Настройка lismdl =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	ctx->handle = spi_interface;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	609a      	str	r2, [r3, #8]
	ctx->read_reg = lis3mdl_read_sr;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <lisset_sr+0x7c>)
 800524c:	605a      	str	r2, [r3, #4]
	ctx->write_reg = lis3mdl_write_sr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <lisset_sr+0x80>)
 8005252:	601a      	str	r2, [r3, #0]

	// Это придется делать прямо сразу еще до всего
	// так как иначе он с ним общаться не сможет (судя по доке по-крайней мере)
	lis3mdl_spi_mode_set(ctx, LIS3MDL_SPI_3_WIRE);
 8005254:	2101      	movs	r1, #1
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa79 	bl	800574e <lis3mdl_spi_mode_set>

	uint8_t whoami_mag = 0x00;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
	lis3mdl_device_id_get(ctx, &whoami_mag);
 8005260:	f107 030f 	add.w	r3, r7, #15
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa3a 	bl	80056e0 <lis3mdl_device_id_get>

	// Убедились что датчик тот который нам нужен
	// Сбросим его
	lis3mdl_reset_set(ctx, PROPERTY_ENABLE);
 800526c:	2101      	movs	r1, #1
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa47 	bl	8005702 <lis3mdl_reset_set>
	HAL_Delay(100);
 8005274:	2064      	movs	r0, #100	; 0x64
 8005276:	f7fc fbb7 	bl	80019e8 <HAL_Delay>

	// Настраиваем
	// Обновление данных только целыми порциями
	lis3mdl_block_data_update_set(ctx, PROPERTY_ENABLE);
 800527a:	2101      	movs	r1, #1
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f99b 	bl	80055b8 <lis3mdl_block_data_update_set>
	// Без экономии энергии
	lis3mdl_fast_low_power_set(ctx, PROPERTY_DISABLE);
 8005282:	2100      	movs	r1, #0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f971 	bl	800556c <lis3mdl_fast_low_power_set>
	// Диапазон измерения (внимание LSM303 умеет только 16G)
	lis3mdl_full_scale_set(ctx, LIS3MDL_16_GAUSS);
 800528a:	2103      	movs	r1, #3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f921 	bl	80054d4 <lis3mdl_full_scale_set>
	// Частота опроса
	// внимание для LSM303 запрещены значения
	// LIS3MDL_LP_1kHz, LIS3MDL_MP_560Hz, LIS3MDL_HP_300Hz, LIS3MDL_UHP_155Hz
	lis3mdl_data_rate_set(ctx, LIS3MDL_UHP_80Hz);
 8005292:	213e      	movs	r1, #62	; 0x3e
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8b1 	bl	80053fc <lis3mdl_data_rate_set>
	// Включаем температурный сенсор
	lis3mdl_temperature_meas_set(ctx, PROPERTY_ENABLE);
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f8f3 	bl	8005488 <lis3mdl_temperature_meas_set>
	// режим работы
	lis3mdl_operating_mode_set(ctx, LIS3MDL_CONTINUOUS_MODE);
 80052a2:	2100      	movs	r1, #0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f93b 	bl	8005520 <lis3mdl_operating_mode_set>
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	080051a5 	.word	0x080051a5
 80052b8:	08005111 	.word	0x08005111

080052bc <lisread>:

void lisread(stmdev_ctx_t *ctx, float *temperature_celsius_mag, float (*mag)[3])
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
    int16_t temperataure_raw_mag;
	int16_t mag_raw[3];
	lis3mdl_magnetic_raw_get(ctx, mag_raw);
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4619      	mov	r1, r3
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f998 	bl	8005604 <lis3mdl_magnetic_raw_get>
	lis3mdl_temperature_raw_get(ctx, &temperataure_raw_mag);
 80052d4:	f107 031a 	add.w	r3, r7, #26
 80052d8:	4619      	mov	r1, r3
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f9dd 	bl	800569a <lis3mdl_temperature_raw_get>
	*temperature_celsius_mag = lis3mdl_from_lsb_to_celsius(temperataure_raw_mag);
 80052e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f86f 	bl	80053c8 <lis3mdl_from_lsb_to_celsius>
 80052ea:	eef0 7a40 	vmov.f32	s15, s0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e014      	b.n	8005324 <lisread+0x68>
		(*mag)[i] = lis3mdl_from_fs16_to_gauss(mag_raw[i]);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	f107 0220 	add.w	r2, r7, #32
 8005302:	4413      	add	r3, r2
 8005304:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f843 	bl	8005394 <lis3mdl_from_fs16_to_gauss>
 800530e:	eef0 7a40 	vmov.f32	s15, s0
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b02      	cmp	r3, #2
 8005328:	dde7      	ble.n	80052fa <lisread+0x3e>
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <lis3mdl_read_reg>:
  *
  */
int32_t lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	461a      	mov	r2, r3
 8005340:	460b      	mov	r3, r1
 8005342:	72fb      	strb	r3, [r7, #11]
 8005344:	4613      	mov	r3, r2
 8005346:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685c      	ldr	r4, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6898      	ldr	r0, [r3, #8]
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	7af9      	ldrb	r1, [r7, #11]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	47a0      	blx	r4
 8005358:	6178      	str	r0, [r7, #20]

  return ret;
 800535a:	697b      	ldr	r3, [r7, #20]
}
 800535c:	4618      	mov	r0, r3
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd90      	pop	{r4, r7, pc}

08005364 <lis3mdl_write_reg>:
  *
  */
int32_t lis3mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005364:	b590      	push	{r4, r7, lr}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	460b      	mov	r3, r1
 8005372:	72fb      	strb	r3, [r7, #11]
 8005374:	4613      	mov	r3, r2
 8005376:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681c      	ldr	r4, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6898      	ldr	r0, [r3, #8]
 8005380:	893b      	ldrh	r3, [r7, #8]
 8005382:	7af9      	ldrb	r1, [r7, #11]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	47a0      	blx	r4
 8005388:	6178      	str	r0, [r7, #20]

  return ret;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}

08005394 <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 800539e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80053c4 <lis3mdl_from_fs16_to_gauss+0x30>
 80053ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80053b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80053b6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	44d5e000 	.word	0x44d5e000

080053c8 <lis3mdl_from_lsb_to_celsius>:

float_t lis3mdl_from_lsb_to_celsius(int16_t lsb)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 8.0f) + (25.0f);
 80053d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053de:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80053e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053e6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80053ea:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80053ee:	eeb0 0a67 	vmov.f32	s0, s15
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005408:	f107 0210 	add.w	r2, r7, #16
 800540c:	2301      	movs	r3, #1
 800540e:	2120      	movs	r1, #32
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ff8f 	bl	8005334 <lis3mdl_read_reg>
 8005416:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005424:	b2da      	uxtb	r2, r3
 8005426:	7c3b      	ldrb	r3, [r7, #16]
 8005428:	f362 0346 	bfi	r3, r2, #1, #6
 800542c:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800542e:	f107 0210 	add.w	r2, r7, #16
 8005432:	2301      	movs	r3, #1
 8005434:	2120      	movs	r1, #32
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff94 	bl	8005364 <lis3mdl_write_reg>
 800543c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d107      	bne.n	8005454 <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8005444:	f107 020c 	add.w	r2, r7, #12
 8005448:	2301      	movs	r3, #1
 800544a:	2123      	movs	r1, #35	; 0x23
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff71 	bl	8005334 <lis3mdl_read_reg>
 8005452:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d111      	bne.n	800547e <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	b2da      	uxtb	r2, r3
 8005466:	7b3b      	ldrb	r3, [r7, #12]
 8005468:	f362 0383 	bfi	r3, r2, #2, #2
 800546c:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 800546e:	f107 020c 	add.w	r2, r7, #12
 8005472:	2301      	movs	r3, #1
 8005474:	2123      	movs	r1, #35	; 0x23
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ff74 	bl	8005364 <lis3mdl_write_reg>
 800547c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <lis3mdl_temperature_meas_set>:
  * @param  val      change the values of temp_en in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_meas_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005494:	f107 0208 	add.w	r2, r7, #8
 8005498:	2301      	movs	r3, #1
 800549a:	2120      	movs	r1, #32
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff49 	bl	8005334 <lis3mdl_read_reg>
 80054a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10f      	bne.n	80054ca <lis3mdl_temperature_meas_set+0x42>
  {
    ctrl_reg1.temp_en = val;
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	7a3b      	ldrb	r3, [r7, #8]
 80054b4:	f362 13c7 	bfi	r3, r2, #7, #1
 80054b8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80054ba:	f107 0208 	add.w	r2, r7, #8
 80054be:	2301      	movs	r3, #1
 80054c0:	2120      	movs	r1, #32
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff4e 	bl	8005364 <lis3mdl_write_reg>
 80054c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80054e0:	f107 0208 	add.w	r2, r7, #8
 80054e4:	2301      	movs	r3, #1
 80054e6:	2121      	movs	r1, #33	; 0x21
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff23 	bl	8005334 <lis3mdl_read_reg>
 80054ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	7a3b      	ldrb	r3, [r7, #8]
 8005500:	f362 1346 	bfi	r3, r2, #5, #2
 8005504:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005506:	f107 0208 	add.w	r2, r7, #8
 800550a:	2301      	movs	r3, #1
 800550c:	2121      	movs	r1, #33	; 0x21
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff28 	bl	8005364 <lis3mdl_write_reg>
 8005514:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005516:	68fb      	ldr	r3, [r7, #12]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800552c:	f107 0208 	add.w	r2, r7, #8
 8005530:	2301      	movs	r3, #1
 8005532:	2122      	movs	r1, #34	; 0x22
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff fefd 	bl	8005334 <lis3mdl_read_reg>
 800553a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	b2da      	uxtb	r2, r3
 800554a:	7a3b      	ldrb	r3, [r7, #8]
 800554c:	f362 0301 	bfi	r3, r2, #0, #2
 8005550:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8005552:	f107 0208 	add.w	r2, r7, #8
 8005556:	2301      	movs	r3, #1
 8005558:	2122      	movs	r1, #34	; 0x22
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ff02 	bl	8005364 <lis3mdl_write_reg>
 8005560:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005562:	68fb      	ldr	r3, [r7, #12]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <lis3mdl_fast_low_power_set>:
  * @param  val      change the values of lp in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_fast_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8005578:	f107 0208 	add.w	r2, r7, #8
 800557c:	2301      	movs	r3, #1
 800557e:	2122      	movs	r1, #34	; 0x22
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff fed7 	bl	8005334 <lis3mdl_read_reg>
 8005586:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <lis3mdl_fast_low_power_set+0x42>
  {
    ctrl_reg3.lp = val;
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	7a3b      	ldrb	r3, [r7, #8]
 8005598:	f362 1345 	bfi	r3, r2, #5, #1
 800559c:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800559e:	f107 0208 	add.w	r2, r7, #8
 80055a2:	2301      	movs	r3, #1
 80055a4:	2122      	movs	r1, #34	; 0x22
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fedc 	bl	8005364 <lis3mdl_write_reg>
 80055ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	2301      	movs	r3, #1
 80055ca:	2124      	movs	r1, #36	; 0x24
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff feb1 	bl	8005334 <lis3mdl_read_reg>
 80055d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	7a3b      	ldrb	r3, [r7, #8]
 80055e4:	f362 1386 	bfi	r3, r2, #6, #1
 80055e8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80055ea:	f107 0208 	add.w	r2, r7, #8
 80055ee:	2301      	movs	r3, #1
 80055f0:	2124      	movs	r1, #36	; 0x24
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff feb6 	bl	8005364 <lis3mdl_write_reg>
 80055f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 800560e:	f107 020c 	add.w	r2, r7, #12
 8005612:	2306      	movs	r3, #6
 8005614:	2128      	movs	r1, #40	; 0x28
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fe8c 	bl	8005334 <lis3mdl_read_reg>
 800561c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800561e:	7b7b      	ldrb	r3, [r7, #13]
 8005620:	b21a      	sxth	r2, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800562c:	b29b      	uxth	r3, r3
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	b29a      	uxth	r2, r3
 8005632:	7b3b      	ldrb	r3, [r7, #12]
 8005634:	b29b      	uxth	r3, r3
 8005636:	4413      	add	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	b21a      	sxth	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	3302      	adds	r3, #2
 8005646:	b212      	sxth	r2, r2
 8005648:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	3302      	adds	r3, #2
 800564e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005652:	b29b      	uxth	r3, r3
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	b29a      	uxth	r2, r3
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	b29b      	uxth	r3, r3
 800565c:	4413      	add	r3, r2
 800565e:	b29a      	uxth	r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	3302      	adds	r3, #2
 8005664:	b212      	sxth	r2, r2
 8005666:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005668:	7c7a      	ldrb	r2, [r7, #17]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3304      	adds	r3, #4
 800566e:	b212      	sxth	r2, r2
 8005670:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	3304      	adds	r3, #4
 8005676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800567a:	b29b      	uxth	r3, r3
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	b29a      	uxth	r2, r3
 8005680:	7c3b      	ldrb	r3, [r7, #16]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4413      	add	r3, r2
 8005686:	b29a      	uxth	r2, r3
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	3304      	adds	r3, #4
 800568c:	b212      	sxth	r2, r2
 800568e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005690:	697b      	ldr	r3, [r7, #20]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <lis3mdl_temperature_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_TEMP_OUT_L, (uint8_t *) buff, 2);
 80056a4:	f107 0208 	add.w	r2, r7, #8
 80056a8:	2302      	movs	r3, #2
 80056aa:	212e      	movs	r1, #46	; 0x2e
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe41 	bl	8005334 <lis3mdl_read_reg>
 80056b2:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80056b4:	7a7b      	ldrb	r3, [r7, #9]
 80056b6:	b21a      	sxth	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	7a3b      	ldrb	r3, [r7, #8]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 80056ea:	2301      	movs	r3, #1
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	210f      	movs	r1, #15
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fe1f 	bl	8005334 <lis3mdl_read_reg>
 80056f6:	60f8      	str	r0, [r7, #12]

  return ret;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <lis3mdl_reset_set>:
  * @param  val      change the values of soft_rst in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800570e:	f107 0208 	add.w	r2, r7, #8
 8005712:	2301      	movs	r3, #1
 8005714:	2121      	movs	r1, #33	; 0x21
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fe0c 	bl	8005334 <lis3mdl_read_reg>
 800571c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10f      	bne.n	8005744 <lis3mdl_reset_set+0x42>
  {
    ctrl_reg2.soft_rst = val;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	7a3b      	ldrb	r3, [r7, #8]
 800572e:	f362 0382 	bfi	r3, r2, #2, #1
 8005732:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005734:	f107 0208 	add.w	r2, r7, #8
 8005738:	2301      	movs	r3, #1
 800573a:	2121      	movs	r1, #33	; 0x21
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fe11 	bl	8005364 <lis3mdl_write_reg>
 8005742:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005744:	68fb      	ldr	r3, [r7, #12]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <lis3mdl_spi_mode_set>:
  * @param  val      change the values of sim in reg CTRL_REG3
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_spi_mode_set(stmdev_ctx_t *ctx, lis3mdl_sim_t val)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 800575a:	f107 0208 	add.w	r2, r7, #8
 800575e:	2301      	movs	r3, #1
 8005760:	2122      	movs	r1, #34	; 0x22
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fde6 	bl	8005334 <lis3mdl_read_reg>
 8005768:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10f      	bne.n	8005790 <lis3mdl_spi_mode_set+0x42>
  {
    ctrl_reg3.sim = (uint8_t)val;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	7a3b      	ldrb	r3, [r7, #8]
 800577a:	f362 0382 	bfi	r3, r2, #2, #1
 800577e:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8005780:	f107 0208 	add.w	r2, r7, #8
 8005784:	2301      	movs	r3, #1
 8005786:	2122      	movs	r1, #34	; 0x22
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff fdeb 	bl	8005364 <lis3mdl_write_reg>
 800578e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005790:	68fb      	ldr	r3, [r7, #12]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <lsmd6s3_write_sr>:
}



static int32_t lsmd6s3_write_sr(void * intf_ptr, uint8_t reg_addr, const uint8_t * data, uint16_t data_size)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	461a      	mov	r2, r3
 80057a6:	460b      	mov	r3, r1
 80057a8:	72fb      	strb	r3, [r7, #11]
 80057aa:	4613      	mov	r3, r2
 80057ac:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf_sr* spi_intf = intf_ptr;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr&~(1<<7);
 80057b2:	7afb      	ldrb	r3, [r7, #11]
 80057b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	72fb      	strb	r3, [r7, #11]

	shift_reg_write_bit_16(spi_intf->sr, spi_intf->sr_pin, 0);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6898      	ldr	r0, [r3, #8]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2200      	movs	r2, #0
 80057c8:	4619      	mov	r1, r3
 80057ca:	f000 fbe0 	bl	8005f8e <shift_reg_write_bit_16>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6858      	ldr	r0, [r3, #4]
 80057d2:	f107 010b 	add.w	r1, r7, #11
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
 80057da:	2201      	movs	r2, #1
 80057dc:	f7fd f87d 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6858      	ldr	r0, [r3, #4]
 80057e4:	893a      	ldrh	r2, [r7, #8]
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	f7fd f875 	bl	80028da <HAL_SPI_Transmit>
	shift_reg_oe(spi_intf->sr, 1);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb3e 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 1);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6898      	ldr	r0, [r3, #8]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	2201      	movs	r2, #1
 8005808:	4619      	mov	r1, r3
 800580a:	f000 fbc0 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fb2f 	bl	8005e78 <shift_reg_oe>

	return 0;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <lsm6ds3_read_sr>:


static int32_t lsm6ds3_read_sr(void * intf_ptr, uint8_t reg_addr, uint8_t * data, uint16_t data_size)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	461a      	mov	r2, r3
 8005830:	460b      	mov	r3, r1
 8005832:	72fb      	strb	r3, [r7, #11]
 8005834:	4613      	mov	r3, r2
 8005836:	813b      	strh	r3, [r7, #8]
	struct lsm_spi_intf_sr* spi_intf = intf_ptr;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	617b      	str	r3, [r7, #20]


	reg_addr=reg_addr|(1<<7);
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005842:	b2db      	uxtb	r3, r3
 8005844:	72fb      	strb	r3, [r7, #11]

	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 0);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	6898      	ldr	r0, [r3, #8]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	2200      	movs	r2, #0
 8005852:	4619      	mov	r1, r3
 8005854:	f000 fb9b 	bl	8005f8e <shift_reg_write_bit_16>
	HAL_SPI_Transmit(spi_intf->spi, &reg_addr, 1, HAL_MAX_DELAY);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6858      	ldr	r0, [r3, #4]
 800585c:	f107 010b 	add.w	r1, r7, #11
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
 8005864:	2201      	movs	r2, #1
 8005866:	f7fd f838 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_intf->spi, (uint8_t*)data, data_size, HAL_MAX_DELAY);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	6858      	ldr	r0, [r3, #4]
 800586e:	893a      	ldrh	r2, [r7, #8]
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	f7fd f96c 	bl	8002b52 <HAL_SPI_Receive>
	shift_reg_oe(spi_intf->sr, 1);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f000 faf9 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_16  (spi_intf->sr, spi_intf->sr_pin, 1);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	6898      	ldr	r0, [r3, #8]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	2201      	movs	r2, #1
 8005892:	4619      	mov	r1, r3
 8005894:	f000 fb7b 	bl	8005f8e <shift_reg_write_bit_16>
	shift_reg_oe(spi_intf->sr, 0);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 faea 	bl	8005e78 <shift_reg_oe>


	return 0;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <lsmset_sr>:
		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
}

void lsmset_sr(stmdev_ctx_t *ctx, struct lsm_spi_intf_sr *spi_interface)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		ctx->handle = spi_interface;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	609a      	str	r2, [r3, #8]
		ctx->read_reg = lsm6ds3_read_sr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a14      	ldr	r2, [pc, #80]	; (8005914 <lsmset_sr+0x64>)
 80058c4:	605a      	str	r2, [r3, #4]
		ctx->write_reg = lsmd6s3_write_sr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <lsmset_sr+0x68>)
 80058ca:	601a      	str	r2, [r3, #0]

		uint8_t whoami = 0x00;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]
		lsm6ds3_device_id_get(ctx, &whoami);
 80058d0:	f107 030f 	add.w	r3, r7, #15
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa5f 	bl	8005d9a <lsm6ds3_device_id_get>

		lsm6ds3_reset_set(ctx, PROPERTY_ENABLE);
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa6c 	bl	8005dbc <lsm6ds3_reset_set>
		HAL_Delay(100);
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	f7fc f87f 	bl	80019e8 <HAL_Delay>

		lsm6ds3_xl_full_scale_set(ctx, LSM6DS3_16g);
 80058ea:	2101      	movs	r1, #1
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f903 	bl	8005af8 <lsm6ds3_xl_full_scale_set>
		lsm6ds3_xl_data_rate_set(ctx, LSM6DS3_XL_ODR_104Hz);
 80058f2:	2104      	movs	r1, #4
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f925 	bl	8005b44 <lsm6ds3_xl_data_rate_set>

		lsm6ds3_gy_full_scale_set(ctx, LSM6DS3_2000dps);
 80058fa:	2106      	movs	r1, #6
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f947 	bl	8005b90 <lsm6ds3_gy_full_scale_set>
		lsm6ds3_gy_data_rate_set(ctx, LSM6DS3_GY_ODR_104Hz);
 8005902:	2104      	movs	r1, #4
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f969 	bl	8005bdc <lsm6ds3_gy_data_rate_set>
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	08005825 	.word	0x08005825
 8005918:	0800579b 	.word	0x0800579b

0800591c <lsmread>:
void lsmread(stmdev_ctx_t *ctx, float *temperature_celsius_gyro, float (*acc_g)[3], float (*gyro_dps)[3])
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
	// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw_gyro = {0};
 800592a:	2300      	movs	r3, #0
 800592c:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t acc_raw[3] = {0};
 800592e:	f107 031c 	add.w	r3, r7, #28
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	809a      	strh	r2, [r3, #4]
		int16_t gyro_raw[3] = {0};
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	809a      	strh	r2, [r3, #4]
		lsm6ds3_temperature_raw_get(ctx, &temperature_raw_gyro);
 8005942:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f96d 	bl	8005c28 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(ctx, acc_raw);
 800594e:	f107 031c 	add.w	r3, r7, #28
 8005952:	4619      	mov	r1, r3
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f9d5 	bl	8005d04 <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(ctx, gyro_raw);
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	4619      	mov	r1, r3
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f984 	bl	8005c6e <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		*temperature_celsius_gyro = lsm6ds3_from_lsb_to_celsius(temperature_raw_gyro);
 8005966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f8aa 	bl	8005ac4 <lsm6ds3_from_lsb_to_celsius>
 8005970:	eef0 7a40 	vmov.f32	s15, s0
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
 800597e:	e02e      	b.n	80059de <lsmread+0xc2>
		{
			(*acc_g)[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005988:	4413      	add	r3, r2
 800598a:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f860 	bl	8005a54 <lsm6ds3_from_fs16g_to_mg>
 8005994:	eeb0 7a40 	vmov.f32	s14, s0
 8005998:	eddf 6a15 	vldr	s13, [pc, #84]	; 80059f0 <lsmread+0xd4>
 800599c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	edc3 7a00 	vstr	s15, [r3]
			(*gyro_dps)[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059b4:	4413      	add	r3, r2
 80059b6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f86a 	bl	8005a94 <lsm6ds3_from_fs2000dps_to_mdps>
 80059c0:	eeb0 7a40 	vmov.f32	s14, s0
 80059c4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80059f0 <lsmread+0xd4>
 80059c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	3301      	adds	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	ddcd      	ble.n	8005980 <lsmread+0x64>
		}
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3728      	adds	r7, #40	; 0x28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	447a0000 	.word	0x447a0000

080059f4 <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	461a      	mov	r2, r3
 8005a00:	460b      	mov	r3, r1
 8005a02:	72fb      	strb	r3, [r7, #11]
 8005a04:	4613      	mov	r3, r2
 8005a06:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685c      	ldr	r4, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6898      	ldr	r0, [r3, #8]
 8005a10:	893b      	ldrh	r3, [r7, #8]
 8005a12:	7af9      	ldrb	r1, [r7, #11]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	47a0      	blx	r4
 8005a18:	6178      	str	r0, [r7, #20]

  return ret;
 8005a1a:	697b      	ldr	r3, [r7, #20]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}

08005a24 <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	460b      	mov	r3, r1
 8005a32:	72fb      	strb	r3, [r7, #11]
 8005a34:	4613      	mov	r3, r2
 8005a36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681c      	ldr	r4, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6898      	ldr	r0, [r3, #8]
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	7af9      	ldrb	r1, [r7, #11]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	47a0      	blx	r4
 8005a48:	6178      	str	r0, [r7, #20]

  return ret;
 8005a4a:	697b      	ldr	r3, [r7, #20]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 8005a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005a8c <lsm6ds3_from_fs16g_to_mg+0x38>
 8005a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a72:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005a90 <lsm6ds3_from_fs16g_to_mg+0x3c>
 8005a76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	43f40000 	.word	0x43f40000
 8005a90:	447a0000 	.word	0x447a0000

08005a94 <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aaa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ac0 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 8005aae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	428c0000 	.word	0x428c0000

08005ac4 <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 8005ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ada:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8005ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005aea:	eeb0 0a67 	vmov.f32	s0, s15
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005b04:	f107 0208 	add.w	r2, r7, #8
 8005b08:	2301      	movs	r3, #1
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff71 	bl	80059f4 <lsm6ds3_read_reg>
 8005b12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10f      	bne.n	8005b3a <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	7a3b      	ldrb	r3, [r7, #8]
 8005b24:	f362 0383 	bfi	r3, r2, #2, #2
 8005b28:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005b2a:	f107 0208 	add.w	r2, r7, #8
 8005b2e:	2301      	movs	r3, #1
 8005b30:	2110      	movs	r1, #16
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff76 	bl	8005a24 <lsm6ds3_write_reg>
 8005b38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	2301      	movs	r3, #1
 8005b56:	2110      	movs	r1, #16
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff4b 	bl	80059f4 <lsm6ds3_read_reg>
 8005b5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	f362 1307 	bfi	r3, r2, #4, #4
 8005b74:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005b76:	f107 0208 	add.w	r2, r7, #8
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff ff50 	bl	8005a24 <lsm6ds3_write_reg>
 8005b84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005b9c:	f107 0208 	add.w	r2, r7, #8
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	2111      	movs	r1, #17
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff25 	bl	80059f4 <lsm6ds3_read_reg>
 8005baa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	7a3b      	ldrb	r3, [r7, #8]
 8005bbc:	f362 0343 	bfi	r3, r2, #1, #3
 8005bc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005bc2:	f107 0208 	add.w	r2, r7, #8
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	2111      	movs	r1, #17
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ff2a 	bl	8005a24 <lsm6ds3_write_reg>
 8005bd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005be8:	f107 0208 	add.w	r2, r7, #8
 8005bec:	2301      	movs	r3, #1
 8005bee:	2111      	movs	r1, #17
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff feff 	bl	80059f4 <lsm6ds3_read_reg>
 8005bf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10f      	bne.n	8005c1e <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	7a3b      	ldrb	r3, [r7, #8]
 8005c08:	f362 1307 	bfi	r3, r2, #4, #4
 8005c0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005c0e:	f107 0208 	add.w	r2, r7, #8
 8005c12:	2301      	movs	r3, #1
 8005c14:	2111      	movs	r1, #17
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ff04 	bl	8005a24 <lsm6ds3_write_reg>
 8005c1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8005c32:	f107 0208 	add.w	r2, r7, #8
 8005c36:	2302      	movs	r3, #2
 8005c38:	2120      	movs	r1, #32
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff feda 	bl	80059f4 <lsm6ds3_read_reg>
 8005c40:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8005c42:	7a7b      	ldrb	r3, [r7, #9]
 8005c44:	b21a      	sxth	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	7a3b      	ldrb	r3, [r7, #8]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	b21a      	sxth	r2, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8005c78:	f107 020c 	add.w	r2, r7, #12
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	2122      	movs	r1, #34	; 0x22
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff feb7 	bl	80059f4 <lsm6ds3_read_reg>
 8005c86:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c88:	7b7b      	ldrb	r3, [r7, #13]
 8005c8a:	b21a      	sxth	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	7b3b      	ldrb	r3, [r7, #12]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	b21a      	sxth	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	b212      	sxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3302      	adds	r3, #2
 8005cce:	b212      	sxth	r2, r2
 8005cd0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005cd2:	7c7a      	ldrb	r2, [r7, #17]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	b212      	sxth	r2, r2
 8005cda:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	7c3b      	ldrb	r3, [r7, #16]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	b212      	sxth	r2, r2
 8005cf8:	801a      	strh	r2, [r3, #0]

  return ret;
 8005cfa:	697b      	ldr	r3, [r7, #20]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8005d0e:	f107 020c 	add.w	r2, r7, #12
 8005d12:	2306      	movs	r3, #6
 8005d14:	2128      	movs	r1, #40	; 0x28
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fe6c 	bl	80059f4 <lsm6ds3_read_reg>
 8005d1c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005d1e:	7b7b      	ldrb	r3, [r7, #13]
 8005d20:	b21a      	sxth	r2, r3
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	7b3b      	ldrb	r3, [r7, #12]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b21a      	sxth	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005d40:	7bfa      	ldrb	r2, [r7, #15]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	3302      	adds	r3, #2
 8005d46:	b212      	sxth	r2, r2
 8005d48:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3302      	adds	r3, #2
 8005d64:	b212      	sxth	r2, r2
 8005d66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d68:	7c7a      	ldrb	r2, [r7, #17]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	b212      	sxth	r2, r2
 8005d70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	3304      	adds	r3, #4
 8005d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	7c3b      	ldrb	r3, [r7, #16]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	b212      	sxth	r2, r2
 8005d8e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d90:	697b      	ldr	r3, [r7, #20]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8005da4:	2301      	movs	r3, #1
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	210f      	movs	r1, #15
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fe22 	bl	80059f4 <lsm6ds3_read_reg>
 8005db0:	60f8      	str	r0, [r7, #12]

  return ret;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005dc8:	f107 0208 	add.w	r2, r7, #8
 8005dcc:	2301      	movs	r3, #1
 8005dce:	2112      	movs	r1, #18
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fe0f 	bl	80059f4 <lsm6ds3_read_reg>
 8005dd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	7a3b      	ldrb	r3, [r7, #8]
 8005de8:	f362 0300 	bfi	r3, r2, #0, #1
 8005dec:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005dee:	f107 0208 	add.w	r2, r7, #8
 8005df2:	2301      	movs	r3, #1
 8005df4:	2112      	movs	r1, #18
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fe14 	bl	8005a24 <lsm6ds3_write_reg>
 8005dfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <shift_reg_init>:
#include "../shift_reg.h"
#ifdef HAL_SPI_MODULE_ENABLED

#include "DWT_Delay/dwt_delay.h"

void shift_reg_init(shift_reg_t *this) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->latch_port, this->latch_pin, GPIO_PIN_RESET);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6858      	ldr	r0, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	891b      	ldrh	r3, [r3, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f7fc f872 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->oe_port, this->oe_pin, GPIO_PIN_RESET);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68d8      	ldr	r0, [r3, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8a1b      	ldrh	r3, [r3, #16]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f7fc f86a 	bl	8001f04 <HAL_GPIO_WritePin>
	this->value = 0;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	825a      	strh	r2, [r3, #18]
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <shift_reg_latch>:
	uint16_t next_buffer = ((buffer & 0x00FF) << 8) | ((buffer & 0xFF00) >> 8);
	HAL_SPI_Transmit(this->bus, (uint8_t*)&next_buffer, 2, HAL_MAX_DELAY);
	this->value = buffer;
}

void shift_reg_latch(shift_reg_t *this) {
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
	dwt_delay_init();
 8005e46:	f7ff f901 	bl	800504c <dwt_delay_init>
	HAL_GPIO_WritePin(this->latch_port, this->latch_pin, GPIO_PIN_SET);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6858      	ldr	r0, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	891b      	ldrh	r3, [r3, #8]
 8005e52:	2201      	movs	r2, #1
 8005e54:	4619      	mov	r1, r3
 8005e56:	f7fc f855 	bl	8001f04 <HAL_GPIO_WritePin>
	dwt_delay_us(1);
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7ff f932 	bl	80050c4 <dwt_delay_us>
	HAL_GPIO_WritePin(this->latch_port, this->latch_pin, GPIO_PIN_RESET);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6858      	ldr	r0, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	891b      	ldrh	r3, [r3, #8]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f7fc f84a 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <shift_reg_oe>:

void shift_reg_oe(shift_reg_t *this, bool onoff) { // true значит выключить, false - включить
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
	if (onoff) {
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <shift_reg_oe+0x24>
		HAL_GPIO_WritePin(this->oe_port, this->oe_pin, GPIO_PIN_SET);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68d8      	ldr	r0, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8a1b      	ldrh	r3, [r3, #16]
 8005e92:	2201      	movs	r2, #1
 8005e94:	4619      	mov	r1, r3
 8005e96:	f7fc f835 	bl	8001f04 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(this->oe_port, this->oe_pin, GPIO_PIN_RESET);
	}
}
 8005e9a:	e007      	b.n	8005eac <shift_reg_oe+0x34>
		HAL_GPIO_WritePin(this->oe_port, this->oe_pin, GPIO_PIN_RESET);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68d8      	ldr	r0, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8a1b      	ldrh	r3, [r3, #16]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f7fc f82c 	bl	8001f04 <HAL_GPIO_WritePin>
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <shift_reg_write_8>:

void shift_reg_write_8(shift_reg_t *this, uint8_t buffer) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(this->bus, &buffer, 1, HAL_MAX_DELAY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	1cf9      	adds	r1, r7, #3
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f7fc fd05 	bl	80028da <HAL_SPI_Transmit>
	this->value = (this->value << 8) | buffer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8a5b      	ldrh	r3, [r3, #18]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	b21a      	sxth	r2, r3
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	b21b      	sxth	r3, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	825a      	strh	r2, [r3, #18]
	shift_reg_latch(this);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ffa9 	bl	8005e3e <shift_reg_latch>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <shift_reg_write_16>:

void shift_reg_write_16(shift_reg_t *this, uint16_t buffer) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
	uint16_t next_buffer = ((buffer & 0x00FF) << 8) | ((buffer & 0xFF00) >> 8);
 8005f00:	887b      	ldrh	r3, [r7, #2]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	b21b      	sxth	r3, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(this->bus, (uint8_t*)&next_buffer, 2, HAL_MAX_DELAY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	f107 010e 	add.w	r1, r7, #14
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	2202      	movs	r2, #2
 8005f24:	f7fc fcd9 	bl	80028da <HAL_SPI_Transmit>
	this->value = buffer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	825a      	strh	r2, [r3, #18]
	shift_reg_latch(this);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff85 	bl	8005e3e <shift_reg_latch>
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <shift_reg_write_bit_8>:

void shift_reg_write_bit_8(shift_reg_t *this, uint8_t pos, bool onoff) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp_buffer = this->value & ~(1 << pos);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8a5b      	ldrh	r3, [r3, #18]
 8005f50:	b25a      	sxtb	r2, r3
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2101      	movs	r1, #1
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	4013      	ands	r3, r2
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	73fb      	strb	r3, [r7, #15]
	tmp_buffer = tmp_buffer | ((onoff ? 1 : 0) << pos);
 8005f66:	78bb      	ldrb	r3, [r7, #2]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	b25a      	sxtb	r2, r3
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	73fb      	strb	r3, [r7, #15]
	shift_reg_write_8(this, tmp_buffer);
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff97 	bl	8005eb4 <shift_reg_write_8>
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <shift_reg_write_bit_16>:

void shift_reg_write_bit_16(shift_reg_t *this, uint16_t pos, bool onoff) {
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	807b      	strh	r3, [r7, #2]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	707b      	strb	r3, [r7, #1]
	uint16_t tmp_buffer = this->value & ~(1 << pos);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8a5b      	ldrh	r3, [r3, #18]
 8005fa2:	b21a      	sxth	r2, r3
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	b21b      	sxth	r3, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	81fb      	strh	r3, [r7, #14]
	tmp_buffer = tmp_buffer | ((onoff ? 1 : 0) << pos);
 8005fb8:	787b      	ldrb	r3, [r7, #1]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b21b      	sxth	r3, r3
 8005fcc:	81fb      	strh	r3, [r7, #14]
	shift_reg_write_16(this, tmp_buffer);
 8005fce:	89fb      	ldrh	r3, [r7, #14]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ff8e 	bl	8005ef4 <shift_reg_write_16>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <_nrf24_CS_sr>:
		//HAL_Delay(100);
	}
}

static void _nrf24_CS_sr(void * intf_ptr, bool mode)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_sr_t *api_config_low = (nrf24_spi_pins_sr_t *)api_config->intf_ptr;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	60bb      	str	r3, [r7, #8]
	if (!mode)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	f083 0301 	eor.w	r3, r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d01f      	beq.n	8006042 <_nrf24_CS_sr+0x62>
	{
		shift_reg_oe(api_config_low->this, true);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff ff35 	bl	8005e78 <shift_reg_oe>
		shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CS, !mode);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	7959      	ldrb	r1, [r3, #5]
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f083 0301 	eor.w	r3, r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	f7ff ff84 	bl	8005f3c <shift_reg_write_bit_8>
		shift_reg_oe(api_config_low->this, false);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ff1c 	bl	8005e78 <shift_reg_oe>
	{
		shift_reg_oe(api_config_low->this, true);
		shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CS, !mode);
		shift_reg_oe(api_config_low->this, false);
	}
}
 8006040:	e01e      	b.n	8006080 <_nrf24_CS_sr+0xa0>
		shift_reg_oe(api_config_low->this, true);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff15 	bl	8005e78 <shift_reg_oe>
		shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CS, !mode);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	7959      	ldrb	r1, [r3, #5]
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f083 0301 	eor.w	r3, r3, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	f7ff ff64 	bl	8005f3c <shift_reg_write_bit_8>
		shift_reg_oe(api_config_low->this, false);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fefc 	bl	8005e78 <shift_reg_oe>
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <nrf24_read_register>:

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	460b      	mov	r3, r1
 8006096:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2101      	movs	r1, #1
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	f107 010b 	add.w	r1, r7, #11
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	2201      	movs	r2, #1
 80060be:	f7fc fc0c 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	f7fc fd3f 	bl	8002b52 <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2100      	movs	r1, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	4798      	blx	r3
}
 80060de:	bf00      	nop
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	460b      	mov	r3, r1
 80060f4:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2101      	movs	r1, #1
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 8006104:	7afb      	ldrb	r3, [r7, #11]
 8006106:	b25b      	sxtb	r3, r3
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	b25b      	sxtb	r3, r3
 800610e:	f043 0320 	orr.w	r3, r3, #32
 8006112:	b25b      	sxtb	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	f107 010b 	add.w	r1, r7, #11
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	2201      	movs	r2, #1
 8006126:	f7fc fbd8 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	b29a      	uxth	r2, r3
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	f7fc fbcf 	bl	80028da <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2100      	movs	r1, #0
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	4798      	blx	r3
}
 8006146:	bf00      	nop
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <nrf24_write_tx_payload>:
		api_config->nrf24_CS(intf_ptr, false);
	}
}

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2101      	movs	r1, #1
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 8006170:	23a0      	movs	r3, #160	; 0xa0
 8006172:	74fb      	strb	r3, [r7, #19]
 8006174:	e001      	b.n	800617a <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 8006176:	23b0      	movs	r3, #176	; 0xb0
 8006178:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	f107 0113 	add.w	r1, r7, #19
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	2201      	movs	r2, #1
 8006188:	f7fc fba7 	bl	80028da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	b29a      	uxth	r2, r3
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	f7fc fb9e 	bl	80028da <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2100      	movs	r1, #0
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	4798      	blx	r3
}
 80061a8:	bf00      	nop
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <nrf24_ce_activate>:
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <_nrf24_CE_sr>:
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}

void _nrf24_CE_sr(void * intf_ptr, bool onoff)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_sr_t *api_config_low = (nrf24_spi_pins_sr_t *)api_config->intf_ptr;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	60bb      	str	r3, [r7, #8]

	shift_reg_oe(api_config_low->this, true);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2101      	movs	r1, #1
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fe41 	bl	8005e78 <shift_reg_oe>
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	791b      	ldrb	r3, [r3, #4]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	4619      	mov	r1, r3
 8006202:	f7ff fe9b 	bl	8005f3c <shift_reg_write_bit_8>
	shift_reg_oe(api_config_low->this, false);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe33 	bl	8005e78 <shift_reg_oe>
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <nrf24_spi_init_sr>:
	nrf24->nrf24_CE = _nrf24_CE;
	nrf24->intf_ptr = pins;
}

void nrf24_spi_init_sr(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_sr_t* pins)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS_sr;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a06      	ldr	r2, [pc, #24]	; (800624c <nrf24_spi_init_sr+0x30>)
 8006232:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE_sr;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a06      	ldr	r2, [pc, #24]	; (8006250 <nrf24_spi_init_sr+0x34>)
 8006238:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	60da      	str	r2, [r3, #12]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	08005fe1 	.word	0x08005fe1
 8006250:	080061d5 	.word	0x080061d5

08006254 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 8006262:	f107 020f 	add.w	r2, r7, #15
 8006266:	2301      	movs	r3, #1
 8006268:	2106      	movs	r1, #6
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff0c 	bl	8006088 <nrf24_read_register>
	switch (config->data_rate)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d01c      	beq.n	80062b2 <nrf24_setup_rf+0x5e>
 8006278:	2b02      	cmp	r3, #2
 800627a:	dc25      	bgt.n	80062c8 <nrf24_setup_rf+0x74>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <nrf24_setup_rf+0x32>
 8006280:	2b01      	cmp	r3, #1
 8006282:	d00b      	beq.n	800629c <nrf24_setup_rf+0x48>
 8006284:	e020      	b.n	80062c8 <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	f043 0320 	orr.w	r3, r3, #32
 800628c:	b2db      	uxtb	r3, r3
 800628e:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	f023 0308 	bic.w	r3, r3, #8
 8006296:	b2db      	uxtb	r3, r3
 8006298:	73fb      	strb	r3, [r7, #15]
		break;
 800629a:	e015      	b.n	80062c8 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	f023 0320 	bic.w	r3, r3, #32
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	f023 0308 	bic.w	r3, r3, #8
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	73fb      	strb	r3, [r7, #15]
		break;
 80062b0:	e00a      	b.n	80062c8 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	f023 0320 	bic.w	r3, r3, #32
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	f043 0308 	orr.w	r3, r3, #8
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	73fb      	strb	r3, [r7, #15]
		break;
 80062c6:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	f023 0306 	bic.w	r3, r3, #6
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f003 0306 	and.w	r3, r3, #6
 80062de:	b25a      	sxtb	r2, r3
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 80062ec:	f107 020f 	add.w	r2, r7, #15
 80062f0:	2301      	movs	r3, #1
 80062f2:	2106      	movs	r1, #6
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fef6 	bl	80060e6 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	789b      	ldrb	r3, [r3, #2]
 80062fe:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 8006300:	f107 020e 	add.w	r2, r7, #14
 8006304:	2301      	movs	r3, #1
 8006306:	2105      	movs	r1, #5
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff feec 	bl	80060e6 <nrf24_write_register>
	return 0;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 8006326:	f107 020f 	add.w	r2, r7, #15
 800632a:	2301      	movs	r3, #1
 800632c:	2100      	movs	r1, #0
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff feaa 	bl	8006088 <nrf24_read_register>
    switch (config->crc_size)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d017      	beq.n	800636c <nrf24_setup_protocol+0x54>
 800633c:	2b02      	cmp	r3, #2
 800633e:	dc20      	bgt.n	8006382 <nrf24_setup_protocol+0x6a>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <nrf24_setup_protocol+0x32>
 8006344:	2b01      	cmp	r3, #1
 8006346:	d006      	beq.n	8006356 <nrf24_setup_protocol+0x3e>
 8006348:	e01b      	b.n	8006382 <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	f023 0308 	bic.w	r3, r3, #8
 8006350:	b2db      	uxtb	r3, r3
 8006352:	73fb      	strb	r3, [r7, #15]
    	break;
 8006354:	e015      	b.n	8006382 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	f043 0308 	orr.w	r3, r3, #8
 800635c:	b2db      	uxtb	r3, r3
 800635e:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	f023 0304 	bic.w	r3, r3, #4
 8006366:	b2db      	uxtb	r3, r3
 8006368:	73fb      	strb	r3, [r7, #15]
    	break;
 800636a:	e00a      	b.n	8006382 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	f043 0308 	orr.w	r3, r3, #8
 8006372:	b2db      	uxtb	r3, r3
 8006374:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	f043 0304 	orr.w	r3, r3, #4
 800637c:	b2db      	uxtb	r3, r3
 800637e:	73fb      	strb	r3, [r7, #15]
    	break;
 8006380:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 8006382:	f107 020f 	add.w	r2, r7, #15
 8006386:	2301      	movs	r3, #1
 8006388:	2100      	movs	r1, #0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff feab 	bl	80060e6 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 8006396:	f107 020e 	add.w	r2, r7, #14
 800639a:	2301      	movs	r3, #1
 800639c:	2103      	movs	r1, #3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fea1 	bl	80060e6 <nrf24_write_register>

    uint8_t features = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	78db      	ldrb	r3, [r3, #3]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 80063b0:	7b7b      	ldrb	r3, [r7, #13]
 80063b2:	f043 0302 	orr.w	r3, r3, #2
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 80063c2:	7b7b      	ldrb	r3, [r7, #13]
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	789b      	ldrb	r3, [r3, #2]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 80063d4:	7b7b      	ldrb	r3, [r7, #13]
 80063d6:	f043 0304 	orr.w	r3, r3, #4
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 80063de:	f107 020d 	add.w	r2, r7, #13
 80063e2:	2301      	movs	r3, #1
 80063e4:	211d      	movs	r1, #29
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fe7d 	bl	80060e6 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	799b      	ldrb	r3, [r3, #6]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	795b      	ldrb	r3, [r3, #5]
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b25b      	sxtb	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 8006408:	f107 020c 	add.w	r2, r7, #12
 800640c:	2301      	movs	r3, #1
 800640e:	2104      	movs	r1, #4
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fe68 	bl	80060e6 <nrf24_write_register>
	return 0;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 800642c:	463a      	mov	r2, r7
 800642e:	2305      	movs	r3, #5
 8006430:	2110      	movs	r1, #16
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff fe57 	bl	80060e6 <nrf24_write_register>
	return 0;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <nrf24_mode_power_down>:


int nrf24_mode_power_down(void * intf_ptr)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800644e:	f107 020f 	add.w	r2, r7, #15
 8006452:	2301      	movs	r3, #1
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fe16 	bl	8006088 <nrf24_read_register>
	config_reg &= ~NRF24_CONFIG_PWR_UP;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	f023 0302 	bic.w	r3, r3, #2
 8006462:	b2db      	uxtb	r3, r3
 8006464:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8006466:	f107 020f 	add.w	r2, r7, #15
 800646a:	2301      	movs	r3, #1
 800646c:	2100      	movs	r1, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fe39 	bl	80060e6 <nrf24_write_register>
	return 0;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <nrf24_mode_standby>:


int nrf24_mode_standby(void * intf_ptr)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 800648a:	f107 020f 	add.w	r2, r7, #15
 800648e:	2301      	movs	r3, #1
 8006490:	2100      	movs	r1, #0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fdf8 	bl	8006088 <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80064a2:	f107 020f 	add.w	r2, r7, #15
 80064a6:	2301      	movs	r3, #1
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe1b 	bl	80060e6 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fe7c 	bl	80061b0 <nrf24_ce_activate>
	return 0;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 80064d2:	f107 0217 	add.w	r2, r7, #23
 80064d6:	2301      	movs	r3, #1
 80064d8:	2117      	movs	r1, #23
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fdd4 	bl	8006088 <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <nrf24_fifo_write>:
	return payload_size;
}


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	4611      	mov	r1, r2
 800654e:	461a      	mov	r2, r3
 8006550:	460b      	mov	r3, r1
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	4613      	mov	r3, r2
 8006556:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <nrf24_fifo_write+0x20>
	{
		return 0;
 800655e:	2300      	movs	r3, #0
 8006560:	e011      	b.n	8006586 <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b20      	cmp	r3, #32
 8006566:	d807      	bhi.n	8006578 <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 8006568:	79fa      	ldrb	r2, [r7, #7]
 800656a:	79bb      	ldrb	r3, [r7, #6]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff fded 	bl	800614e <nrf24_write_tx_payload>
		return packet_size;
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	e006      	b.n	8006586 <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 8006578:	79bb      	ldrb	r3, [r7, #6]
 800657a:	2220      	movs	r2, #32
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fde5 	bl	800614e <nrf24_write_tx_payload>
		return 32;
 8006584:	2320      	movs	r3, #32
	}
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <__errno>:
 8006590:	4b01      	ldr	r3, [pc, #4]	; (8006598 <__errno+0x8>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	2000002c 	.word	0x2000002c

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	; (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	; (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	; (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	; (80065e0 <__libc_init_array+0x44>)
 80065b0:	f004 fc5c 	bl	800ae6c <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	0800b4bc 	.word	0x0800b4bc
 80065d8:	0800b4bc 	.word	0x0800b4bc
 80065dc:	0800b4bc 	.word	0x0800b4bc
 80065e0:	0800b4c0 	.word	0x0800b4c0

080065e4 <memcpy>:
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xc>
 80065ee:	4770      	bx	lr
 80065f0:	b510      	push	{r4, lr}
 80065f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fa:	4291      	cmp	r1, r2
 80065fc:	d1f9      	bne.n	80065f2 <memcpy+0xe>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <memset>:
 8006600:	4402      	add	r2, r0
 8006602:	4603      	mov	r3, r0
 8006604:	4293      	cmp	r3, r2
 8006606:	d100      	bne.n	800660a <memset+0xa>
 8006608:	4770      	bx	lr
 800660a:	f803 1b01 	strb.w	r1, [r3], #1
 800660e:	e7f9      	b.n	8006604 <memset+0x4>

08006610 <__cvt>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	ec55 4b10 	vmov	r4, r5, d0
 8006618:	2d00      	cmp	r5, #0
 800661a:	460e      	mov	r6, r1
 800661c:	4619      	mov	r1, r3
 800661e:	462b      	mov	r3, r5
 8006620:	bfbb      	ittet	lt
 8006622:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006626:	461d      	movlt	r5, r3
 8006628:	2300      	movge	r3, #0
 800662a:	232d      	movlt	r3, #45	; 0x2d
 800662c:	700b      	strb	r3, [r1, #0]
 800662e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006630:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006634:	4691      	mov	r9, r2
 8006636:	f023 0820 	bic.w	r8, r3, #32
 800663a:	bfbc      	itt	lt
 800663c:	4622      	movlt	r2, r4
 800663e:	4614      	movlt	r4, r2
 8006640:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006644:	d005      	beq.n	8006652 <__cvt+0x42>
 8006646:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800664a:	d100      	bne.n	800664e <__cvt+0x3e>
 800664c:	3601      	adds	r6, #1
 800664e:	2102      	movs	r1, #2
 8006650:	e000      	b.n	8006654 <__cvt+0x44>
 8006652:	2103      	movs	r1, #3
 8006654:	ab03      	add	r3, sp, #12
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	ab02      	add	r3, sp, #8
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	ec45 4b10 	vmov	d0, r4, r5
 8006660:	4653      	mov	r3, sl
 8006662:	4632      	mov	r2, r6
 8006664:	f001 fdcc 	bl	8008200 <_dtoa_r>
 8006668:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800666c:	4607      	mov	r7, r0
 800666e:	d102      	bne.n	8006676 <__cvt+0x66>
 8006670:	f019 0f01 	tst.w	r9, #1
 8006674:	d022      	beq.n	80066bc <__cvt+0xac>
 8006676:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800667a:	eb07 0906 	add.w	r9, r7, r6
 800667e:	d110      	bne.n	80066a2 <__cvt+0x92>
 8006680:	783b      	ldrb	r3, [r7, #0]
 8006682:	2b30      	cmp	r3, #48	; 0x30
 8006684:	d10a      	bne.n	800669c <__cvt+0x8c>
 8006686:	2200      	movs	r2, #0
 8006688:	2300      	movs	r3, #0
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7fa fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006692:	b918      	cbnz	r0, 800669c <__cvt+0x8c>
 8006694:	f1c6 0601 	rsb	r6, r6, #1
 8006698:	f8ca 6000 	str.w	r6, [sl]
 800669c:	f8da 3000 	ldr.w	r3, [sl]
 80066a0:	4499      	add	r9, r3
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7fa fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 80066ae:	b108      	cbz	r0, 80066b4 <__cvt+0xa4>
 80066b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80066b4:	2230      	movs	r2, #48	; 0x30
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	454b      	cmp	r3, r9
 80066ba:	d307      	bcc.n	80066cc <__cvt+0xbc>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066c0:	1bdb      	subs	r3, r3, r7
 80066c2:	4638      	mov	r0, r7
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	b004      	add	sp, #16
 80066c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	9103      	str	r1, [sp, #12]
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	e7f0      	b.n	80066b6 <__cvt+0xa6>

080066d4 <__exponent>:
 80066d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d6:	4603      	mov	r3, r0
 80066d8:	2900      	cmp	r1, #0
 80066da:	bfb8      	it	lt
 80066dc:	4249      	neglt	r1, r1
 80066de:	f803 2b02 	strb.w	r2, [r3], #2
 80066e2:	bfb4      	ite	lt
 80066e4:	222d      	movlt	r2, #45	; 0x2d
 80066e6:	222b      	movge	r2, #43	; 0x2b
 80066e8:	2909      	cmp	r1, #9
 80066ea:	7042      	strb	r2, [r0, #1]
 80066ec:	dd2a      	ble.n	8006744 <__exponent+0x70>
 80066ee:	f10d 0407 	add.w	r4, sp, #7
 80066f2:	46a4      	mov	ip, r4
 80066f4:	270a      	movs	r7, #10
 80066f6:	46a6      	mov	lr, r4
 80066f8:	460a      	mov	r2, r1
 80066fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80066fe:	fb07 1516 	mls	r5, r7, r6, r1
 8006702:	3530      	adds	r5, #48	; 0x30
 8006704:	2a63      	cmp	r2, #99	; 0x63
 8006706:	f104 34ff 	add.w	r4, r4, #4294967295
 800670a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800670e:	4631      	mov	r1, r6
 8006710:	dcf1      	bgt.n	80066f6 <__exponent+0x22>
 8006712:	3130      	adds	r1, #48	; 0x30
 8006714:	f1ae 0502 	sub.w	r5, lr, #2
 8006718:	f804 1c01 	strb.w	r1, [r4, #-1]
 800671c:	1c44      	adds	r4, r0, #1
 800671e:	4629      	mov	r1, r5
 8006720:	4561      	cmp	r1, ip
 8006722:	d30a      	bcc.n	800673a <__exponent+0x66>
 8006724:	f10d 0209 	add.w	r2, sp, #9
 8006728:	eba2 020e 	sub.w	r2, r2, lr
 800672c:	4565      	cmp	r5, ip
 800672e:	bf88      	it	hi
 8006730:	2200      	movhi	r2, #0
 8006732:	4413      	add	r3, r2
 8006734:	1a18      	subs	r0, r3, r0
 8006736:	b003      	add	sp, #12
 8006738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800673e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006742:	e7ed      	b.n	8006720 <__exponent+0x4c>
 8006744:	2330      	movs	r3, #48	; 0x30
 8006746:	3130      	adds	r1, #48	; 0x30
 8006748:	7083      	strb	r3, [r0, #2]
 800674a:	70c1      	strb	r1, [r0, #3]
 800674c:	1d03      	adds	r3, r0, #4
 800674e:	e7f1      	b.n	8006734 <__exponent+0x60>

08006750 <_printf_float>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	ed2d 8b02 	vpush	{d8}
 8006758:	b08d      	sub	sp, #52	; 0x34
 800675a:	460c      	mov	r4, r1
 800675c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006760:	4616      	mov	r6, r2
 8006762:	461f      	mov	r7, r3
 8006764:	4605      	mov	r5, r0
 8006766:	f002 ff9b 	bl	80096a0 <_localeconv_r>
 800676a:	f8d0 a000 	ldr.w	sl, [r0]
 800676e:	4650      	mov	r0, sl
 8006770:	f7f9 fd36 	bl	80001e0 <strlen>
 8006774:	2300      	movs	r3, #0
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	f8d8 3000 	ldr.w	r3, [r8]
 8006780:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006784:	3307      	adds	r3, #7
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	f8c8 2000 	str.w	r2, [r8]
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800679a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800679e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80067a8:	ee08 0a10 	vmov	s16, r0
 80067ac:	4b9f      	ldr	r3, [pc, #636]	; (8006a2c <_printf_float+0x2dc>)
 80067ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	f7fa f9c1 	bl	8000b3c <__aeabi_dcmpun>
 80067ba:	bb88      	cbnz	r0, 8006820 <_printf_float+0xd0>
 80067bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067c0:	4b9a      	ldr	r3, [pc, #616]	; (8006a2c <_printf_float+0x2dc>)
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	f7fa f99b 	bl	8000b00 <__aeabi_dcmple>
 80067ca:	bb48      	cbnz	r0, 8006820 <_printf_float+0xd0>
 80067cc:	2200      	movs	r2, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	4640      	mov	r0, r8
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7fa f98a 	bl	8000aec <__aeabi_dcmplt>
 80067d8:	b110      	cbz	r0, 80067e0 <_printf_float+0x90>
 80067da:	232d      	movs	r3, #45	; 0x2d
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	4b93      	ldr	r3, [pc, #588]	; (8006a30 <_printf_float+0x2e0>)
 80067e2:	4894      	ldr	r0, [pc, #592]	; (8006a34 <_printf_float+0x2e4>)
 80067e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067e8:	bf94      	ite	ls
 80067ea:	4698      	movls	r8, r3
 80067ec:	4680      	movhi	r8, r0
 80067ee:	2303      	movs	r3, #3
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	9b05      	ldr	r3, [sp, #20]
 80067f4:	f023 0204 	bic.w	r2, r3, #4
 80067f8:	6022      	str	r2, [r4, #0]
 80067fa:	f04f 0900 	mov.w	r9, #0
 80067fe:	9700      	str	r7, [sp, #0]
 8006800:	4633      	mov	r3, r6
 8006802:	aa0b      	add	r2, sp, #44	; 0x2c
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f9d8 	bl	8006bbc <_printf_common>
 800680c:	3001      	adds	r0, #1
 800680e:	f040 8090 	bne.w	8006932 <_printf_float+0x1e2>
 8006812:	f04f 30ff 	mov.w	r0, #4294967295
 8006816:	b00d      	add	sp, #52	; 0x34
 8006818:	ecbd 8b02 	vpop	{d8}
 800681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7fa f988 	bl	8000b3c <__aeabi_dcmpun>
 800682c:	b140      	cbz	r0, 8006840 <_printf_float+0xf0>
 800682e:	464b      	mov	r3, r9
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfbc      	itt	lt
 8006834:	232d      	movlt	r3, #45	; 0x2d
 8006836:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800683a:	487f      	ldr	r0, [pc, #508]	; (8006a38 <_printf_float+0x2e8>)
 800683c:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <_printf_float+0x2ec>)
 800683e:	e7d1      	b.n	80067e4 <_printf_float+0x94>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006846:	9206      	str	r2, [sp, #24]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	d13f      	bne.n	80068cc <_printf_float+0x17c>
 800684c:	2306      	movs	r3, #6
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	9b05      	ldr	r3, [sp, #20]
 8006852:	6861      	ldr	r1, [r4, #4]
 8006854:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006858:	2300      	movs	r3, #0
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	ab0a      	add	r3, sp, #40	; 0x28
 800685e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006862:	ab09      	add	r3, sp, #36	; 0x24
 8006864:	ec49 8b10 	vmov	d0, r8, r9
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	6022      	str	r2, [r4, #0]
 800686c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff fecd 	bl	8006610 <__cvt>
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687a:	2b47      	cmp	r3, #71	; 0x47
 800687c:	4680      	mov	r8, r0
 800687e:	d108      	bne.n	8006892 <_printf_float+0x142>
 8006880:	1cc8      	adds	r0, r1, #3
 8006882:	db02      	blt.n	800688a <_printf_float+0x13a>
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	4299      	cmp	r1, r3
 8006888:	dd41      	ble.n	800690e <_printf_float+0x1be>
 800688a:	f1ab 0b02 	sub.w	fp, fp, #2
 800688e:	fa5f fb8b 	uxtb.w	fp, fp
 8006892:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006896:	d820      	bhi.n	80068da <_printf_float+0x18a>
 8006898:	3901      	subs	r1, #1
 800689a:	465a      	mov	r2, fp
 800689c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068a0:	9109      	str	r1, [sp, #36]	; 0x24
 80068a2:	f7ff ff17 	bl	80066d4 <__exponent>
 80068a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a8:	1813      	adds	r3, r2, r0
 80068aa:	2a01      	cmp	r2, #1
 80068ac:	4681      	mov	r9, r0
 80068ae:	6123      	str	r3, [r4, #16]
 80068b0:	dc02      	bgt.n	80068b8 <_printf_float+0x168>
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	07d2      	lsls	r2, r2, #31
 80068b6:	d501      	bpl.n	80068bc <_printf_float+0x16c>
 80068b8:	3301      	adds	r3, #1
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d09c      	beq.n	80067fe <_printf_float+0xae>
 80068c4:	232d      	movs	r3, #45	; 0x2d
 80068c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ca:	e798      	b.n	80067fe <_printf_float+0xae>
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	2a47      	cmp	r2, #71	; 0x47
 80068d0:	d1be      	bne.n	8006850 <_printf_float+0x100>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1bc      	bne.n	8006850 <_printf_float+0x100>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e7b9      	b.n	800684e <_printf_float+0xfe>
 80068da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068de:	d118      	bne.n	8006912 <_printf_float+0x1c2>
 80068e0:	2900      	cmp	r1, #0
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	dd0b      	ble.n	80068fe <_printf_float+0x1ae>
 80068e6:	6121      	str	r1, [r4, #16]
 80068e8:	b913      	cbnz	r3, 80068f0 <_printf_float+0x1a0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	07d0      	lsls	r0, r2, #31
 80068ee:	d502      	bpl.n	80068f6 <_printf_float+0x1a6>
 80068f0:	3301      	adds	r3, #1
 80068f2:	440b      	add	r3, r1
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068f8:	f04f 0900 	mov.w	r9, #0
 80068fc:	e7de      	b.n	80068bc <_printf_float+0x16c>
 80068fe:	b913      	cbnz	r3, 8006906 <_printf_float+0x1b6>
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	07d2      	lsls	r2, r2, #31
 8006904:	d501      	bpl.n	800690a <_printf_float+0x1ba>
 8006906:	3302      	adds	r3, #2
 8006908:	e7f4      	b.n	80068f4 <_printf_float+0x1a4>
 800690a:	2301      	movs	r3, #1
 800690c:	e7f2      	b.n	80068f4 <_printf_float+0x1a4>
 800690e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	4299      	cmp	r1, r3
 8006916:	db05      	blt.n	8006924 <_printf_float+0x1d4>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	6121      	str	r1, [r4, #16]
 800691c:	07d8      	lsls	r0, r3, #31
 800691e:	d5ea      	bpl.n	80068f6 <_printf_float+0x1a6>
 8006920:	1c4b      	adds	r3, r1, #1
 8006922:	e7e7      	b.n	80068f4 <_printf_float+0x1a4>
 8006924:	2900      	cmp	r1, #0
 8006926:	bfd4      	ite	le
 8006928:	f1c1 0202 	rsble	r2, r1, #2
 800692c:	2201      	movgt	r2, #1
 800692e:	4413      	add	r3, r2
 8006930:	e7e0      	b.n	80068f4 <_printf_float+0x1a4>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	055a      	lsls	r2, r3, #21
 8006936:	d407      	bmi.n	8006948 <_printf_float+0x1f8>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	4642      	mov	r2, r8
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	d12c      	bne.n	80069a0 <_printf_float+0x250>
 8006946:	e764      	b.n	8006812 <_printf_float+0xc2>
 8006948:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800694c:	f240 80e0 	bls.w	8006b10 <_printf_float+0x3c0>
 8006950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	f7fa f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800695c:	2800      	cmp	r0, #0
 800695e:	d034      	beq.n	80069ca <_printf_float+0x27a>
 8006960:	4a37      	ldr	r2, [pc, #220]	; (8006a40 <_printf_float+0x2f0>)
 8006962:	2301      	movs	r3, #1
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af51 	beq.w	8006812 <_printf_float+0xc2>
 8006970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006974:	429a      	cmp	r2, r3
 8006976:	db02      	blt.n	800697e <_printf_float+0x22e>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	07d8      	lsls	r0, r3, #31
 800697c:	d510      	bpl.n	80069a0 <_printf_float+0x250>
 800697e:	ee18 3a10 	vmov	r3, s16
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af41 	beq.w	8006812 <_printf_float+0xc2>
 8006990:	f04f 0800 	mov.w	r8, #0
 8006994:	f104 091a 	add.w	r9, r4, #26
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	4543      	cmp	r3, r8
 800699e:	dc09      	bgt.n	80069b4 <_printf_float+0x264>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	f100 8105 	bmi.w	8006bb2 <_printf_float+0x462>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e730      	b.n	8006816 <_printf_float+0xc6>
 80069b4:	2301      	movs	r3, #1
 80069b6:	464a      	mov	r2, r9
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af27 	beq.w	8006812 <_printf_float+0xc2>
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	e7e6      	b.n	8006998 <_printf_float+0x248>
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc39      	bgt.n	8006a44 <_printf_float+0x2f4>
 80069d0:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <_printf_float+0x2f0>)
 80069d2:	2301      	movs	r3, #1
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af19 	beq.w	8006812 <_printf_float+0xc2>
 80069e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d102      	bne.n	80069ee <_printf_float+0x29e>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	07d9      	lsls	r1, r3, #31
 80069ec:	d5d8      	bpl.n	80069a0 <_printf_float+0x250>
 80069ee:	ee18 3a10 	vmov	r3, s16
 80069f2:	4652      	mov	r2, sl
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af09 	beq.w	8006812 <_printf_float+0xc2>
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	f104 0a1a 	add.w	sl, r4, #26
 8006a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0a:	425b      	negs	r3, r3
 8006a0c:	454b      	cmp	r3, r9
 8006a0e:	dc01      	bgt.n	8006a14 <_printf_float+0x2c4>
 8006a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a12:	e792      	b.n	800693a <_printf_float+0x1ea>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4652      	mov	r2, sl
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f aef7 	beq.w	8006812 <_printf_float+0xc2>
 8006a24:	f109 0901 	add.w	r9, r9, #1
 8006a28:	e7ee      	b.n	8006a08 <_printf_float+0x2b8>
 8006a2a:	bf00      	nop
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	0800b100 	.word	0x0800b100
 8006a34:	0800b104 	.word	0x0800b104
 8006a38:	0800b10c 	.word	0x0800b10c
 8006a3c:	0800b108 	.word	0x0800b108
 8006a40:	0800b110 	.word	0x0800b110
 8006a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfa8      	it	ge
 8006a4c:	461a      	movge	r2, r3
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	4691      	mov	r9, r2
 8006a52:	dc37      	bgt.n	8006ac4 <_printf_float+0x374>
 8006a54:	f04f 0b00 	mov.w	fp, #0
 8006a58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5c:	f104 021a 	add.w	r2, r4, #26
 8006a60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	eba3 0309 	sub.w	r3, r3, r9
 8006a68:	455b      	cmp	r3, fp
 8006a6a:	dc33      	bgt.n	8006ad4 <_printf_float+0x384>
 8006a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a70:	429a      	cmp	r2, r3
 8006a72:	db3b      	blt.n	8006aec <_printf_float+0x39c>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d438      	bmi.n	8006aec <_printf_float+0x39c>
 8006a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	eba2 0901 	sub.w	r9, r2, r1
 8006a86:	4599      	cmp	r9, r3
 8006a88:	bfa8      	it	ge
 8006a8a:	4699      	movge	r9, r3
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	dc35      	bgt.n	8006afe <_printf_float+0x3ae>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9a:	f104 0a1a 	add.w	sl, r4, #26
 8006a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	eba3 0309 	sub.w	r3, r3, r9
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	f77f af79 	ble.w	80069a0 <_printf_float+0x250>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f aeaa 	beq.w	8006812 <_printf_float+0xc2>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	e7ec      	b.n	8006a9e <_printf_float+0x34e>
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4642      	mov	r2, r8
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d1c0      	bne.n	8006a54 <_printf_float+0x304>
 8006ad2:	e69e      	b.n	8006812 <_printf_float+0xc2>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	9205      	str	r2, [sp, #20]
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f ae97 	beq.w	8006812 <_printf_float+0xc2>
 8006ae4:	9a05      	ldr	r2, [sp, #20]
 8006ae6:	f10b 0b01 	add.w	fp, fp, #1
 8006aea:	e7b9      	b.n	8006a60 <_printf_float+0x310>
 8006aec:	ee18 3a10 	vmov	r3, s16
 8006af0:	4652      	mov	r2, sl
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	d1be      	bne.n	8006a7a <_printf_float+0x32a>
 8006afc:	e689      	b.n	8006812 <_printf_float+0xc2>
 8006afe:	9a05      	ldr	r2, [sp, #20]
 8006b00:	464b      	mov	r3, r9
 8006b02:	4442      	add	r2, r8
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d1c1      	bne.n	8006a92 <_printf_float+0x342>
 8006b0e:	e680      	b.n	8006812 <_printf_float+0xc2>
 8006b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b12:	2a01      	cmp	r2, #1
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x3ca>
 8006b16:	07db      	lsls	r3, r3, #31
 8006b18:	d538      	bpl.n	8006b8c <_printf_float+0x43c>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae74 	beq.w	8006812 <_printf_float+0xc2>
 8006b2a:	ee18 3a10 	vmov	r3, s16
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f ae6b 	beq.w	8006812 <_printf_float+0xc2>
 8006b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	f7f9 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b48:	b9d8      	cbnz	r0, 8006b82 <_printf_float+0x432>
 8006b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4c:	f108 0201 	add.w	r2, r8, #1
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d10e      	bne.n	8006b7a <_printf_float+0x42a>
 8006b5c:	e659      	b.n	8006812 <_printf_float+0xc2>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4652      	mov	r2, sl
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f ae52 	beq.w	8006812 <_printf_float+0xc2>
 8006b6e:	f108 0801 	add.w	r8, r8, #1
 8006b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b74:	3b01      	subs	r3, #1
 8006b76:	4543      	cmp	r3, r8
 8006b78:	dcf1      	bgt.n	8006b5e <_printf_float+0x40e>
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b80:	e6dc      	b.n	800693c <_printf_float+0x1ec>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	f104 0a1a 	add.w	sl, r4, #26
 8006b8a:	e7f2      	b.n	8006b72 <_printf_float+0x422>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4642      	mov	r2, r8
 8006b90:	e7df      	b.n	8006b52 <_printf_float+0x402>
 8006b92:	2301      	movs	r3, #1
 8006b94:	464a      	mov	r2, r9
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b8      	blx	r7
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	f43f ae38 	beq.w	8006812 <_printf_float+0xc2>
 8006ba2:	f108 0801 	add.w	r8, r8, #1
 8006ba6:	68e3      	ldr	r3, [r4, #12]
 8006ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006baa:	1a5b      	subs	r3, r3, r1
 8006bac:	4543      	cmp	r3, r8
 8006bae:	dcf0      	bgt.n	8006b92 <_printf_float+0x442>
 8006bb0:	e6fa      	b.n	80069a8 <_printf_float+0x258>
 8006bb2:	f04f 0800 	mov.w	r8, #0
 8006bb6:	f104 0919 	add.w	r9, r4, #25
 8006bba:	e7f4      	b.n	8006ba6 <_printf_float+0x456>

08006bbc <_printf_common>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	4699      	mov	r9, r3
 8006bc4:	688a      	ldr	r2, [r1, #8]
 8006bc6:	690b      	ldr	r3, [r1, #16]
 8006bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	bfb8      	it	lt
 8006bd0:	4613      	movlt	r3, r2
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bd8:	4607      	mov	r7, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b10a      	cbz	r2, 8006be2 <_printf_common+0x26>
 8006bde:	3301      	adds	r3, #1
 8006be0:	6033      	str	r3, [r6, #0]
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	0699      	lsls	r1, r3, #26
 8006be6:	bf42      	ittt	mi
 8006be8:	6833      	ldrmi	r3, [r6, #0]
 8006bea:	3302      	addmi	r3, #2
 8006bec:	6033      	strmi	r3, [r6, #0]
 8006bee:	6825      	ldr	r5, [r4, #0]
 8006bf0:	f015 0506 	ands.w	r5, r5, #6
 8006bf4:	d106      	bne.n	8006c04 <_printf_common+0x48>
 8006bf6:	f104 0a19 	add.w	sl, r4, #25
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	6832      	ldr	r2, [r6, #0]
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	42ab      	cmp	r3, r5
 8006c02:	dc26      	bgt.n	8006c52 <_printf_common+0x96>
 8006c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c08:	1e13      	subs	r3, r2, #0
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	2301      	movne	r3, #1
 8006c10:	0692      	lsls	r2, r2, #26
 8006c12:	d42b      	bmi.n	8006c6c <_printf_common+0xb0>
 8006c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c18:	4649      	mov	r1, r9
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	47c0      	blx	r8
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d01e      	beq.n	8006c60 <_printf_common+0xa4>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	68e5      	ldr	r5, [r4, #12]
 8006c26:	6832      	ldr	r2, [r6, #0]
 8006c28:	f003 0306 	and.w	r3, r3, #6
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	bf08      	it	eq
 8006c30:	1aad      	subeq	r5, r5, r2
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	6922      	ldr	r2, [r4, #16]
 8006c36:	bf0c      	ite	eq
 8006c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c3c:	2500      	movne	r5, #0
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bfc4      	itt	gt
 8006c42:	1a9b      	subgt	r3, r3, r2
 8006c44:	18ed      	addgt	r5, r5, r3
 8006c46:	2600      	movs	r6, #0
 8006c48:	341a      	adds	r4, #26
 8006c4a:	42b5      	cmp	r5, r6
 8006c4c:	d11a      	bne.n	8006c84 <_printf_common+0xc8>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e008      	b.n	8006c64 <_printf_common+0xa8>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4652      	mov	r2, sl
 8006c56:	4649      	mov	r1, r9
 8006c58:	4638      	mov	r0, r7
 8006c5a:	47c0      	blx	r8
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d103      	bne.n	8006c68 <_printf_common+0xac>
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c68:	3501      	adds	r5, #1
 8006c6a:	e7c6      	b.n	8006bfa <_printf_common+0x3e>
 8006c6c:	18e1      	adds	r1, r4, r3
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	2030      	movs	r0, #48	; 0x30
 8006c72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c76:	4422      	add	r2, r4
 8006c78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c80:	3302      	adds	r3, #2
 8006c82:	e7c7      	b.n	8006c14 <_printf_common+0x58>
 8006c84:	2301      	movs	r3, #1
 8006c86:	4622      	mov	r2, r4
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c0      	blx	r8
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0e6      	beq.n	8006c60 <_printf_common+0xa4>
 8006c92:	3601      	adds	r6, #1
 8006c94:	e7d9      	b.n	8006c4a <_printf_common+0x8e>
	...

08006c98 <_printf_i>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	7e27      	ldrb	r7, [r4, #24]
 8006ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ca4:	2f78      	cmp	r7, #120	; 0x78
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	469a      	mov	sl, r3
 8006caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cae:	d807      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cb0:	2f62      	cmp	r7, #98	; 0x62
 8006cb2:	d80a      	bhi.n	8006cca <_printf_i+0x32>
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	f000 80d8 	beq.w	8006e6a <_printf_i+0x1d2>
 8006cba:	2f58      	cmp	r7, #88	; 0x58
 8006cbc:	f000 80a3 	beq.w	8006e06 <_printf_i+0x16e>
 8006cc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cc8:	e03a      	b.n	8006d40 <_printf_i+0xa8>
 8006cca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cce:	2b15      	cmp	r3, #21
 8006cd0:	d8f6      	bhi.n	8006cc0 <_printf_i+0x28>
 8006cd2:	a001      	add	r0, pc, #4	; (adr r0, 8006cd8 <_printf_i+0x40>)
 8006cd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cd8:	08006d31 	.word	0x08006d31
 8006cdc:	08006d45 	.word	0x08006d45
 8006ce0:	08006cc1 	.word	0x08006cc1
 8006ce4:	08006cc1 	.word	0x08006cc1
 8006ce8:	08006cc1 	.word	0x08006cc1
 8006cec:	08006cc1 	.word	0x08006cc1
 8006cf0:	08006d45 	.word	0x08006d45
 8006cf4:	08006cc1 	.word	0x08006cc1
 8006cf8:	08006cc1 	.word	0x08006cc1
 8006cfc:	08006cc1 	.word	0x08006cc1
 8006d00:	08006cc1 	.word	0x08006cc1
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006d75 	.word	0x08006d75
 8006d0c:	08006e33 	.word	0x08006e33
 8006d10:	08006cc1 	.word	0x08006cc1
 8006d14:	08006cc1 	.word	0x08006cc1
 8006d18:	08006e73 	.word	0x08006e73
 8006d1c:	08006cc1 	.word	0x08006cc1
 8006d20:	08006d75 	.word	0x08006d75
 8006d24:	08006cc1 	.word	0x08006cc1
 8006d28:	08006cc1 	.word	0x08006cc1
 8006d2c:	08006e3b 	.word	0x08006e3b
 8006d30:	680b      	ldr	r3, [r1, #0]
 8006d32:	1d1a      	adds	r2, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	600a      	str	r2, [r1, #0]
 8006d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0a3      	b.n	8006e8c <_printf_i+0x1f4>
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	6808      	ldr	r0, [r1, #0]
 8006d48:	062e      	lsls	r6, r5, #24
 8006d4a:	f100 0304 	add.w	r3, r0, #4
 8006d4e:	d50a      	bpl.n	8006d66 <_printf_i+0xce>
 8006d50:	6805      	ldr	r5, [r0, #0]
 8006d52:	600b      	str	r3, [r1, #0]
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	da03      	bge.n	8006d60 <_printf_i+0xc8>
 8006d58:	232d      	movs	r3, #45	; 0x2d
 8006d5a:	426d      	negs	r5, r5
 8006d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d60:	485e      	ldr	r0, [pc, #376]	; (8006edc <_printf_i+0x244>)
 8006d62:	230a      	movs	r3, #10
 8006d64:	e019      	b.n	8006d9a <_printf_i+0x102>
 8006d66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d6a:	6805      	ldr	r5, [r0, #0]
 8006d6c:	600b      	str	r3, [r1, #0]
 8006d6e:	bf18      	it	ne
 8006d70:	b22d      	sxthne	r5, r5
 8006d72:	e7ef      	b.n	8006d54 <_printf_i+0xbc>
 8006d74:	680b      	ldr	r3, [r1, #0]
 8006d76:	6825      	ldr	r5, [r4, #0]
 8006d78:	1d18      	adds	r0, r3, #4
 8006d7a:	6008      	str	r0, [r1, #0]
 8006d7c:	0628      	lsls	r0, r5, #24
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0xec>
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0xf2>
 8006d84:	0669      	lsls	r1, r5, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0xe8>
 8006d88:	881d      	ldrh	r5, [r3, #0]
 8006d8a:	4854      	ldr	r0, [pc, #336]	; (8006edc <_printf_i+0x244>)
 8006d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d8e:	bf0c      	ite	eq
 8006d90:	2308      	moveq	r3, #8
 8006d92:	230a      	movne	r3, #10
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9a:	6866      	ldr	r6, [r4, #4]
 8006d9c:	60a6      	str	r6, [r4, #8]
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90d      	cbnz	r5, 8006db0 <_printf_i+0x118>
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	d04d      	beq.n	8006e4c <_printf_i+0x1b4>
 8006db0:	4616      	mov	r6, r2
 8006db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006db6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dc0:	462f      	mov	r7, r5
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x11a>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x14c>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07df      	lsls	r7, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x14c>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	; 0x30
 8006ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006de4:	1b92      	subs	r2, r2, r6
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee2 	bl	8006bbc <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14c      	bne.n	8006e96 <_printf_i+0x1fe>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	4835      	ldr	r0, [pc, #212]	; (8006edc <_printf_i+0x244>)
 8006e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	680e      	ldr	r6, [r1, #0]
 8006e10:	061f      	lsls	r7, r3, #24
 8006e12:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e16:	600e      	str	r6, [r1, #0]
 8006e18:	d514      	bpl.n	8006e44 <_printf_i+0x1ac>
 8006e1a:	07d9      	lsls	r1, r3, #31
 8006e1c:	bf44      	itt	mi
 8006e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e22:	6023      	strmi	r3, [r4, #0]
 8006e24:	b91d      	cbnz	r5, 8006e2e <_printf_i+0x196>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f023 0320 	bic.w	r3, r3, #32
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	2310      	movs	r3, #16
 8006e30:	e7b0      	b.n	8006d94 <_printf_i+0xfc>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f043 0320 	orr.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2378      	movs	r3, #120	; 0x78
 8006e3c:	4828      	ldr	r0, [pc, #160]	; (8006ee0 <_printf_i+0x248>)
 8006e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e42:	e7e3      	b.n	8006e0c <_printf_i+0x174>
 8006e44:	065e      	lsls	r6, r3, #25
 8006e46:	bf48      	it	mi
 8006e48:	b2ad      	uxthmi	r5, r5
 8006e4a:	e7e6      	b.n	8006e1a <_printf_i+0x182>
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	e7bb      	b.n	8006dc8 <_printf_i+0x130>
 8006e50:	680b      	ldr	r3, [r1, #0]
 8006e52:	6826      	ldr	r6, [r4, #0]
 8006e54:	6960      	ldr	r0, [r4, #20]
 8006e56:	1d1d      	adds	r5, r3, #4
 8006e58:	600d      	str	r5, [r1, #0]
 8006e5a:	0635      	lsls	r5, r6, #24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0x1cc>
 8006e60:	6018      	str	r0, [r3, #0]
 8006e62:	e002      	b.n	8006e6a <_printf_i+0x1d2>
 8006e64:	0671      	lsls	r1, r6, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0x1c8>
 8006e68:	8018      	strh	r0, [r3, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	4616      	mov	r6, r2
 8006e70:	e7ba      	b.n	8006de8 <_printf_i+0x150>
 8006e72:	680b      	ldr	r3, [r1, #0]
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	600a      	str	r2, [r1, #0]
 8006e78:	681e      	ldr	r6, [r3, #0]
 8006e7a:	6862      	ldr	r2, [r4, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7f9 f9b6 	bl	80001f0 <memchr>
 8006e84:	b108      	cbz	r0, 8006e8a <_printf_i+0x1f2>
 8006e86:	1b80      	subs	r0, r0, r6
 8006e88:	6060      	str	r0, [r4, #4]
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	e7a8      	b.n	8006de8 <_printf_i+0x150>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	47d0      	blx	sl
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d0ab      	beq.n	8006dfc <_printf_i+0x164>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	d413      	bmi.n	8006ed2 <_printf_i+0x23a>
 8006eaa:	68e0      	ldr	r0, [r4, #12]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	bfb8      	it	lt
 8006eb2:	4618      	movlt	r0, r3
 8006eb4:	e7a4      	b.n	8006e00 <_printf_i+0x168>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4632      	mov	r2, r6
 8006eba:	4649      	mov	r1, r9
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	47d0      	blx	sl
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d09b      	beq.n	8006dfc <_printf_i+0x164>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	68e3      	ldr	r3, [r4, #12]
 8006ec8:	9903      	ldr	r1, [sp, #12]
 8006eca:	1a5b      	subs	r3, r3, r1
 8006ecc:	42ab      	cmp	r3, r5
 8006ece:	dcf2      	bgt.n	8006eb6 <_printf_i+0x21e>
 8006ed0:	e7eb      	b.n	8006eaa <_printf_i+0x212>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	f104 0619 	add.w	r6, r4, #25
 8006ed8:	e7f5      	b.n	8006ec6 <_printf_i+0x22e>
 8006eda:	bf00      	nop
 8006edc:	0800b112 	.word	0x0800b112
 8006ee0:	0800b123 	.word	0x0800b123

08006ee4 <_scanf_float>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	b087      	sub	sp, #28
 8006eea:	4617      	mov	r7, r2
 8006eec:	9303      	str	r3, [sp, #12]
 8006eee:	688b      	ldr	r3, [r1, #8]
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ef6:	bf83      	ittte	hi
 8006ef8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006efc:	195b      	addhi	r3, r3, r5
 8006efe:	9302      	strhi	r3, [sp, #8]
 8006f00:	2300      	movls	r3, #0
 8006f02:	bf86      	itte	hi
 8006f04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f08:	608b      	strhi	r3, [r1, #8]
 8006f0a:	9302      	strls	r3, [sp, #8]
 8006f0c:	680b      	ldr	r3, [r1, #0]
 8006f0e:	468b      	mov	fp, r1
 8006f10:	2500      	movs	r5, #0
 8006f12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006f16:	f84b 3b1c 	str.w	r3, [fp], #28
 8006f1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f1e:	4680      	mov	r8, r0
 8006f20:	460c      	mov	r4, r1
 8006f22:	465e      	mov	r6, fp
 8006f24:	46aa      	mov	sl, r5
 8006f26:	46a9      	mov	r9, r5
 8006f28:	9501      	str	r5, [sp, #4]
 8006f2a:	68a2      	ldr	r2, [r4, #8]
 8006f2c:	b152      	cbz	r2, 8006f44 <_scanf_float+0x60>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b4e      	cmp	r3, #78	; 0x4e
 8006f34:	d864      	bhi.n	8007000 <_scanf_float+0x11c>
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d83c      	bhi.n	8006fb4 <_scanf_float+0xd0>
 8006f3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f3e:	b2c8      	uxtb	r0, r1
 8006f40:	280e      	cmp	r0, #14
 8006f42:	d93a      	bls.n	8006fba <_scanf_float+0xd6>
 8006f44:	f1b9 0f00 	cmp.w	r9, #0
 8006f48:	d003      	beq.n	8006f52 <_scanf_float+0x6e>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f56:	f1ba 0f01 	cmp.w	sl, #1
 8006f5a:	f200 8113 	bhi.w	8007184 <_scanf_float+0x2a0>
 8006f5e:	455e      	cmp	r6, fp
 8006f60:	f200 8105 	bhi.w	800716e <_scanf_float+0x28a>
 8006f64:	2501      	movs	r5, #1
 8006f66:	4628      	mov	r0, r5
 8006f68:	b007      	add	sp, #28
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f72:	2a0d      	cmp	r2, #13
 8006f74:	d8e6      	bhi.n	8006f44 <_scanf_float+0x60>
 8006f76:	a101      	add	r1, pc, #4	; (adr r1, 8006f7c <_scanf_float+0x98>)
 8006f78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f7c:	080070bb 	.word	0x080070bb
 8006f80:	08006f45 	.word	0x08006f45
 8006f84:	08006f45 	.word	0x08006f45
 8006f88:	08006f45 	.word	0x08006f45
 8006f8c:	0800711b 	.word	0x0800711b
 8006f90:	080070f3 	.word	0x080070f3
 8006f94:	08006f45 	.word	0x08006f45
 8006f98:	08006f45 	.word	0x08006f45
 8006f9c:	080070c9 	.word	0x080070c9
 8006fa0:	08006f45 	.word	0x08006f45
 8006fa4:	08006f45 	.word	0x08006f45
 8006fa8:	08006f45 	.word	0x08006f45
 8006fac:	08006f45 	.word	0x08006f45
 8006fb0:	08007081 	.word	0x08007081
 8006fb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006fb8:	e7db      	b.n	8006f72 <_scanf_float+0x8e>
 8006fba:	290e      	cmp	r1, #14
 8006fbc:	d8c2      	bhi.n	8006f44 <_scanf_float+0x60>
 8006fbe:	a001      	add	r0, pc, #4	; (adr r0, 8006fc4 <_scanf_float+0xe0>)
 8006fc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006fc4:	08007073 	.word	0x08007073
 8006fc8:	08006f45 	.word	0x08006f45
 8006fcc:	08007073 	.word	0x08007073
 8006fd0:	08007107 	.word	0x08007107
 8006fd4:	08006f45 	.word	0x08006f45
 8006fd8:	08007021 	.word	0x08007021
 8006fdc:	0800705d 	.word	0x0800705d
 8006fe0:	0800705d 	.word	0x0800705d
 8006fe4:	0800705d 	.word	0x0800705d
 8006fe8:	0800705d 	.word	0x0800705d
 8006fec:	0800705d 	.word	0x0800705d
 8006ff0:	0800705d 	.word	0x0800705d
 8006ff4:	0800705d 	.word	0x0800705d
 8006ff8:	0800705d 	.word	0x0800705d
 8006ffc:	0800705d 	.word	0x0800705d
 8007000:	2b6e      	cmp	r3, #110	; 0x6e
 8007002:	d809      	bhi.n	8007018 <_scanf_float+0x134>
 8007004:	2b60      	cmp	r3, #96	; 0x60
 8007006:	d8b2      	bhi.n	8006f6e <_scanf_float+0x8a>
 8007008:	2b54      	cmp	r3, #84	; 0x54
 800700a:	d077      	beq.n	80070fc <_scanf_float+0x218>
 800700c:	2b59      	cmp	r3, #89	; 0x59
 800700e:	d199      	bne.n	8006f44 <_scanf_float+0x60>
 8007010:	2d07      	cmp	r5, #7
 8007012:	d197      	bne.n	8006f44 <_scanf_float+0x60>
 8007014:	2508      	movs	r5, #8
 8007016:	e029      	b.n	800706c <_scanf_float+0x188>
 8007018:	2b74      	cmp	r3, #116	; 0x74
 800701a:	d06f      	beq.n	80070fc <_scanf_float+0x218>
 800701c:	2b79      	cmp	r3, #121	; 0x79
 800701e:	e7f6      	b.n	800700e <_scanf_float+0x12a>
 8007020:	6821      	ldr	r1, [r4, #0]
 8007022:	05c8      	lsls	r0, r1, #23
 8007024:	d51a      	bpl.n	800705c <_scanf_float+0x178>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800702c:	6021      	str	r1, [r4, #0]
 800702e:	f109 0901 	add.w	r9, r9, #1
 8007032:	b11b      	cbz	r3, 800703c <_scanf_float+0x158>
 8007034:	3b01      	subs	r3, #1
 8007036:	3201      	adds	r2, #1
 8007038:	9302      	str	r3, [sp, #8]
 800703a:	60a2      	str	r2, [r4, #8]
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	3b01      	subs	r3, #1
 8007040:	60a3      	str	r3, [r4, #8]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	3301      	adds	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3b01      	subs	r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	f340 8084 	ble.w	800715c <_scanf_float+0x278>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	603b      	str	r3, [r7, #0]
 800705a:	e766      	b.n	8006f2a <_scanf_float+0x46>
 800705c:	eb1a 0f05 	cmn.w	sl, r5
 8007060:	f47f af70 	bne.w	8006f44 <_scanf_float+0x60>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	f806 3b01 	strb.w	r3, [r6], #1
 8007070:	e7e4      	b.n	800703c <_scanf_float+0x158>
 8007072:	6822      	ldr	r2, [r4, #0]
 8007074:	0610      	lsls	r0, r2, #24
 8007076:	f57f af65 	bpl.w	8006f44 <_scanf_float+0x60>
 800707a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800707e:	e7f4      	b.n	800706a <_scanf_float+0x186>
 8007080:	f1ba 0f00 	cmp.w	sl, #0
 8007084:	d10e      	bne.n	80070a4 <_scanf_float+0x1c0>
 8007086:	f1b9 0f00 	cmp.w	r9, #0
 800708a:	d10e      	bne.n	80070aa <_scanf_float+0x1c6>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007092:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007096:	d108      	bne.n	80070aa <_scanf_float+0x1c6>
 8007098:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	f04f 0a01 	mov.w	sl, #1
 80070a2:	e7e3      	b.n	800706c <_scanf_float+0x188>
 80070a4:	f1ba 0f02 	cmp.w	sl, #2
 80070a8:	d055      	beq.n	8007156 <_scanf_float+0x272>
 80070aa:	2d01      	cmp	r5, #1
 80070ac:	d002      	beq.n	80070b4 <_scanf_float+0x1d0>
 80070ae:	2d04      	cmp	r5, #4
 80070b0:	f47f af48 	bne.w	8006f44 <_scanf_float+0x60>
 80070b4:	3501      	adds	r5, #1
 80070b6:	b2ed      	uxtb	r5, r5
 80070b8:	e7d8      	b.n	800706c <_scanf_float+0x188>
 80070ba:	f1ba 0f01 	cmp.w	sl, #1
 80070be:	f47f af41 	bne.w	8006f44 <_scanf_float+0x60>
 80070c2:	f04f 0a02 	mov.w	sl, #2
 80070c6:	e7d1      	b.n	800706c <_scanf_float+0x188>
 80070c8:	b97d      	cbnz	r5, 80070ea <_scanf_float+0x206>
 80070ca:	f1b9 0f00 	cmp.w	r9, #0
 80070ce:	f47f af3c 	bne.w	8006f4a <_scanf_float+0x66>
 80070d2:	6822      	ldr	r2, [r4, #0]
 80070d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070dc:	f47f af39 	bne.w	8006f52 <_scanf_float+0x6e>
 80070e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	2501      	movs	r5, #1
 80070e8:	e7c0      	b.n	800706c <_scanf_float+0x188>
 80070ea:	2d03      	cmp	r5, #3
 80070ec:	d0e2      	beq.n	80070b4 <_scanf_float+0x1d0>
 80070ee:	2d05      	cmp	r5, #5
 80070f0:	e7de      	b.n	80070b0 <_scanf_float+0x1cc>
 80070f2:	2d02      	cmp	r5, #2
 80070f4:	f47f af26 	bne.w	8006f44 <_scanf_float+0x60>
 80070f8:	2503      	movs	r5, #3
 80070fa:	e7b7      	b.n	800706c <_scanf_float+0x188>
 80070fc:	2d06      	cmp	r5, #6
 80070fe:	f47f af21 	bne.w	8006f44 <_scanf_float+0x60>
 8007102:	2507      	movs	r5, #7
 8007104:	e7b2      	b.n	800706c <_scanf_float+0x188>
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	0591      	lsls	r1, r2, #22
 800710a:	f57f af1b 	bpl.w	8006f44 <_scanf_float+0x60>
 800710e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007112:	6022      	str	r2, [r4, #0]
 8007114:	f8cd 9004 	str.w	r9, [sp, #4]
 8007118:	e7a8      	b.n	800706c <_scanf_float+0x188>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007124:	d006      	beq.n	8007134 <_scanf_float+0x250>
 8007126:	0550      	lsls	r0, r2, #21
 8007128:	f57f af0c 	bpl.w	8006f44 <_scanf_float+0x60>
 800712c:	f1b9 0f00 	cmp.w	r9, #0
 8007130:	f43f af0f 	beq.w	8006f52 <_scanf_float+0x6e>
 8007134:	0591      	lsls	r1, r2, #22
 8007136:	bf58      	it	pl
 8007138:	9901      	ldrpl	r1, [sp, #4]
 800713a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800713e:	bf58      	it	pl
 8007140:	eba9 0101 	subpl.w	r1, r9, r1
 8007144:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007148:	bf58      	it	pl
 800714a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	e78a      	b.n	800706c <_scanf_float+0x188>
 8007156:	f04f 0a03 	mov.w	sl, #3
 800715a:	e787      	b.n	800706c <_scanf_float+0x188>
 800715c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007160:	4639      	mov	r1, r7
 8007162:	4640      	mov	r0, r8
 8007164:	4798      	blx	r3
 8007166:	2800      	cmp	r0, #0
 8007168:	f43f aedf 	beq.w	8006f2a <_scanf_float+0x46>
 800716c:	e6ea      	b.n	8006f44 <_scanf_float+0x60>
 800716e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007176:	463a      	mov	r2, r7
 8007178:	4640      	mov	r0, r8
 800717a:	4798      	blx	r3
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	3b01      	subs	r3, #1
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	e6ec      	b.n	8006f5e <_scanf_float+0x7a>
 8007184:	1e6b      	subs	r3, r5, #1
 8007186:	2b06      	cmp	r3, #6
 8007188:	d825      	bhi.n	80071d6 <_scanf_float+0x2f2>
 800718a:	2d02      	cmp	r5, #2
 800718c:	d836      	bhi.n	80071fc <_scanf_float+0x318>
 800718e:	455e      	cmp	r6, fp
 8007190:	f67f aee8 	bls.w	8006f64 <_scanf_float+0x80>
 8007194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007198:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800719c:	463a      	mov	r2, r7
 800719e:	4640      	mov	r0, r8
 80071a0:	4798      	blx	r3
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	e7f1      	b.n	800718e <_scanf_float+0x2aa>
 80071aa:	9802      	ldr	r0, [sp, #8]
 80071ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80071b4:	9002      	str	r0, [sp, #8]
 80071b6:	463a      	mov	r2, r7
 80071b8:	4640      	mov	r0, r8
 80071ba:	4798      	blx	r3
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	3b01      	subs	r3, #1
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071c6:	fa5f fa8a 	uxtb.w	sl, sl
 80071ca:	f1ba 0f02 	cmp.w	sl, #2
 80071ce:	d1ec      	bne.n	80071aa <_scanf_float+0x2c6>
 80071d0:	3d03      	subs	r5, #3
 80071d2:	b2ed      	uxtb	r5, r5
 80071d4:	1b76      	subs	r6, r6, r5
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	05da      	lsls	r2, r3, #23
 80071da:	d52f      	bpl.n	800723c <_scanf_float+0x358>
 80071dc:	055b      	lsls	r3, r3, #21
 80071de:	d510      	bpl.n	8007202 <_scanf_float+0x31e>
 80071e0:	455e      	cmp	r6, fp
 80071e2:	f67f aebf 	bls.w	8006f64 <_scanf_float+0x80>
 80071e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ee:	463a      	mov	r2, r7
 80071f0:	4640      	mov	r0, r8
 80071f2:	4798      	blx	r3
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	e7f1      	b.n	80071e0 <_scanf_float+0x2fc>
 80071fc:	46aa      	mov	sl, r5
 80071fe:	9602      	str	r6, [sp, #8]
 8007200:	e7df      	b.n	80071c2 <_scanf_float+0x2de>
 8007202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	2965      	cmp	r1, #101	; 0x65
 800720a:	f103 33ff 	add.w	r3, r3, #4294967295
 800720e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	d00c      	beq.n	8007230 <_scanf_float+0x34c>
 8007216:	2945      	cmp	r1, #69	; 0x45
 8007218:	d00a      	beq.n	8007230 <_scanf_float+0x34c>
 800721a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800721e:	463a      	mov	r2, r7
 8007220:	4640      	mov	r0, r8
 8007222:	4798      	blx	r3
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800722a:	3b01      	subs	r3, #1
 800722c:	1eb5      	subs	r5, r6, #2
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007234:	463a      	mov	r2, r7
 8007236:	4640      	mov	r0, r8
 8007238:	4798      	blx	r3
 800723a:	462e      	mov	r6, r5
 800723c:	6825      	ldr	r5, [r4, #0]
 800723e:	f015 0510 	ands.w	r5, r5, #16
 8007242:	d158      	bne.n	80072f6 <_scanf_float+0x412>
 8007244:	7035      	strb	r5, [r6, #0]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007250:	d11c      	bne.n	800728c <_scanf_float+0x3a8>
 8007252:	9b01      	ldr	r3, [sp, #4]
 8007254:	454b      	cmp	r3, r9
 8007256:	eba3 0209 	sub.w	r2, r3, r9
 800725a:	d124      	bne.n	80072a6 <_scanf_float+0x3c2>
 800725c:	2200      	movs	r2, #0
 800725e:	4659      	mov	r1, fp
 8007260:	4640      	mov	r0, r8
 8007262:	f000 feb3 	bl	8007fcc <_strtod_r>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f011 0f02 	tst.w	r1, #2
 8007270:	ec57 6b10 	vmov	r6, r7, d0
 8007274:	f103 0204 	add.w	r2, r3, #4
 8007278:	d020      	beq.n	80072bc <_scanf_float+0x3d8>
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	600a      	str	r2, [r1, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	e9c3 6700 	strd	r6, r7, [r3]
 8007284:	68e3      	ldr	r3, [r4, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60e3      	str	r3, [r4, #12]
 800728a:	e66c      	b.n	8006f66 <_scanf_float+0x82>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0e4      	beq.n	800725c <_scanf_float+0x378>
 8007292:	9905      	ldr	r1, [sp, #20]
 8007294:	230a      	movs	r3, #10
 8007296:	462a      	mov	r2, r5
 8007298:	3101      	adds	r1, #1
 800729a:	4640      	mov	r0, r8
 800729c:	f000 ff20 	bl	80080e0 <_strtol_r>
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	9e05      	ldr	r6, [sp, #20]
 80072a4:	1ac2      	subs	r2, r0, r3
 80072a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80072aa:	429e      	cmp	r6, r3
 80072ac:	bf28      	it	cs
 80072ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80072b2:	4912      	ldr	r1, [pc, #72]	; (80072fc <_scanf_float+0x418>)
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f843 	bl	8007340 <siprintf>
 80072ba:	e7cf      	b.n	800725c <_scanf_float+0x378>
 80072bc:	f011 0f04 	tst.w	r1, #4
 80072c0:	9903      	ldr	r1, [sp, #12]
 80072c2:	600a      	str	r2, [r1, #0]
 80072c4:	d1db      	bne.n	800727e <_scanf_float+0x39a>
 80072c6:	f8d3 8000 	ldr.w	r8, [r3]
 80072ca:	ee10 2a10 	vmov	r2, s0
 80072ce:	ee10 0a10 	vmov	r0, s0
 80072d2:	463b      	mov	r3, r7
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f9 fc31 	bl	8000b3c <__aeabi_dcmpun>
 80072da:	b128      	cbz	r0, 80072e8 <_scanf_float+0x404>
 80072dc:	4808      	ldr	r0, [pc, #32]	; (8007300 <_scanf_float+0x41c>)
 80072de:	f000 f829 	bl	8007334 <nanf>
 80072e2:	ed88 0a00 	vstr	s0, [r8]
 80072e6:	e7cd      	b.n	8007284 <_scanf_float+0x3a0>
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f9 fc84 	bl	8000bf8 <__aeabi_d2f>
 80072f0:	f8c8 0000 	str.w	r0, [r8]
 80072f4:	e7c6      	b.n	8007284 <_scanf_float+0x3a0>
 80072f6:	2500      	movs	r5, #0
 80072f8:	e635      	b.n	8006f66 <_scanf_float+0x82>
 80072fa:	bf00      	nop
 80072fc:	0800b134 	.word	0x0800b134
 8007300:	0800b4b0 	.word	0x0800b4b0

08007304 <iprintf>:
 8007304:	b40f      	push	{r0, r1, r2, r3}
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <iprintf+0x2c>)
 8007308:	b513      	push	{r0, r1, r4, lr}
 800730a:	681c      	ldr	r4, [r3, #0]
 800730c:	b124      	cbz	r4, 8007318 <iprintf+0x14>
 800730e:	69a3      	ldr	r3, [r4, #24]
 8007310:	b913      	cbnz	r3, 8007318 <iprintf+0x14>
 8007312:	4620      	mov	r0, r4
 8007314:	f001 fdb8 	bl	8008e88 <__sinit>
 8007318:	ab05      	add	r3, sp, #20
 800731a:	9a04      	ldr	r2, [sp, #16]
 800731c:	68a1      	ldr	r1, [r4, #8]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	4620      	mov	r0, r4
 8007322:	f003 f8d9 	bl	800a4d8 <_vfiprintf_r>
 8007326:	b002      	add	sp, #8
 8007328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732c:	b004      	add	sp, #16
 800732e:	4770      	bx	lr
 8007330:	2000002c 	.word	0x2000002c

08007334 <nanf>:
 8007334:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800733c <nanf+0x8>
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	7fc00000 	.word	0x7fc00000

08007340 <siprintf>:
 8007340:	b40e      	push	{r1, r2, r3}
 8007342:	b500      	push	{lr}
 8007344:	b09c      	sub	sp, #112	; 0x70
 8007346:	ab1d      	add	r3, sp, #116	; 0x74
 8007348:	9002      	str	r0, [sp, #8]
 800734a:	9006      	str	r0, [sp, #24]
 800734c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <siprintf+0x38>)
 8007352:	9107      	str	r1, [sp, #28]
 8007354:	9104      	str	r1, [sp, #16]
 8007356:	4909      	ldr	r1, [pc, #36]	; (800737c <siprintf+0x3c>)
 8007358:	f853 2b04 	ldr.w	r2, [r3], #4
 800735c:	9105      	str	r1, [sp, #20]
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	a902      	add	r1, sp, #8
 8007364:	f002 ff8e 	bl	800a284 <_svfiprintf_r>
 8007368:	9b02      	ldr	r3, [sp, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	b01c      	add	sp, #112	; 0x70
 8007370:	f85d eb04 	ldr.w	lr, [sp], #4
 8007374:	b003      	add	sp, #12
 8007376:	4770      	bx	lr
 8007378:	2000002c 	.word	0x2000002c
 800737c:	ffff0208 	.word	0xffff0208

08007380 <sulp>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	4604      	mov	r4, r0
 8007384:	460d      	mov	r5, r1
 8007386:	ec45 4b10 	vmov	d0, r4, r5
 800738a:	4616      	mov	r6, r2
 800738c:	f002 fd16 	bl	8009dbc <__ulp>
 8007390:	ec51 0b10 	vmov	r0, r1, d0
 8007394:	b17e      	cbz	r6, 80073b6 <sulp+0x36>
 8007396:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800739a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd09      	ble.n	80073b6 <sulp+0x36>
 80073a2:	051b      	lsls	r3, r3, #20
 80073a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073a8:	2400      	movs	r4, #0
 80073aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073ae:	4622      	mov	r2, r4
 80073b0:	462b      	mov	r3, r5
 80073b2:	f7f9 f929 	bl	8000608 <__aeabi_dmul>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}

080073b8 <_strtod_l>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	b0a3      	sub	sp, #140	; 0x8c
 80073be:	461f      	mov	r7, r3
 80073c0:	2300      	movs	r3, #0
 80073c2:	931e      	str	r3, [sp, #120]	; 0x78
 80073c4:	4ba4      	ldr	r3, [pc, #656]	; (8007658 <_strtod_l+0x2a0>)
 80073c6:	9219      	str	r2, [sp, #100]	; 0x64
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	4604      	mov	r4, r0
 80073ce:	4618      	mov	r0, r3
 80073d0:	4688      	mov	r8, r1
 80073d2:	f7f8 ff05 	bl	80001e0 <strlen>
 80073d6:	f04f 0a00 	mov.w	sl, #0
 80073da:	4605      	mov	r5, r0
 80073dc:	f04f 0b00 	mov.w	fp, #0
 80073e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80073e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	2a2b      	cmp	r2, #43	; 0x2b
 80073ea:	d04c      	beq.n	8007486 <_strtod_l+0xce>
 80073ec:	d839      	bhi.n	8007462 <_strtod_l+0xaa>
 80073ee:	2a0d      	cmp	r2, #13
 80073f0:	d832      	bhi.n	8007458 <_strtod_l+0xa0>
 80073f2:	2a08      	cmp	r2, #8
 80073f4:	d832      	bhi.n	800745c <_strtod_l+0xa4>
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d03c      	beq.n	8007474 <_strtod_l+0xbc>
 80073fa:	2300      	movs	r3, #0
 80073fc:	930e      	str	r3, [sp, #56]	; 0x38
 80073fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007400:	7833      	ldrb	r3, [r6, #0]
 8007402:	2b30      	cmp	r3, #48	; 0x30
 8007404:	f040 80b4 	bne.w	8007570 <_strtod_l+0x1b8>
 8007408:	7873      	ldrb	r3, [r6, #1]
 800740a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800740e:	2b58      	cmp	r3, #88	; 0x58
 8007410:	d16c      	bne.n	80074ec <_strtod_l+0x134>
 8007412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	ab1e      	add	r3, sp, #120	; 0x78
 8007418:	9702      	str	r7, [sp, #8]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4a8f      	ldr	r2, [pc, #572]	; (800765c <_strtod_l+0x2a4>)
 800741e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007420:	a91d      	add	r1, sp, #116	; 0x74
 8007422:	4620      	mov	r0, r4
 8007424:	f001 fe34 	bl	8009090 <__gethex>
 8007428:	f010 0707 	ands.w	r7, r0, #7
 800742c:	4605      	mov	r5, r0
 800742e:	d005      	beq.n	800743c <_strtod_l+0x84>
 8007430:	2f06      	cmp	r7, #6
 8007432:	d12a      	bne.n	800748a <_strtod_l+0xd2>
 8007434:	3601      	adds	r6, #1
 8007436:	2300      	movs	r3, #0
 8007438:	961d      	str	r6, [sp, #116]	; 0x74
 800743a:	930e      	str	r3, [sp, #56]	; 0x38
 800743c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 8596 	bne.w	8007f70 <_strtod_l+0xbb8>
 8007444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007446:	b1db      	cbz	r3, 8007480 <_strtod_l+0xc8>
 8007448:	4652      	mov	r2, sl
 800744a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800744e:	ec43 2b10 	vmov	d0, r2, r3
 8007452:	b023      	add	sp, #140	; 0x8c
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	2a20      	cmp	r2, #32
 800745a:	d1ce      	bne.n	80073fa <_strtod_l+0x42>
 800745c:	3301      	adds	r3, #1
 800745e:	931d      	str	r3, [sp, #116]	; 0x74
 8007460:	e7c0      	b.n	80073e4 <_strtod_l+0x2c>
 8007462:	2a2d      	cmp	r2, #45	; 0x2d
 8007464:	d1c9      	bne.n	80073fa <_strtod_l+0x42>
 8007466:	2201      	movs	r2, #1
 8007468:	920e      	str	r2, [sp, #56]	; 0x38
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	921d      	str	r2, [sp, #116]	; 0x74
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1c4      	bne.n	80073fe <_strtod_l+0x46>
 8007474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007476:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800747a:	2b00      	cmp	r3, #0
 800747c:	f040 8576 	bne.w	8007f6c <_strtod_l+0xbb4>
 8007480:	4652      	mov	r2, sl
 8007482:	465b      	mov	r3, fp
 8007484:	e7e3      	b.n	800744e <_strtod_l+0x96>
 8007486:	2200      	movs	r2, #0
 8007488:	e7ee      	b.n	8007468 <_strtod_l+0xb0>
 800748a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800748c:	b13a      	cbz	r2, 800749e <_strtod_l+0xe6>
 800748e:	2135      	movs	r1, #53	; 0x35
 8007490:	a820      	add	r0, sp, #128	; 0x80
 8007492:	f002 fd9e 	bl	8009fd2 <__copybits>
 8007496:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007498:	4620      	mov	r0, r4
 800749a:	f002 f963 	bl	8009764 <_Bfree>
 800749e:	3f01      	subs	r7, #1
 80074a0:	2f05      	cmp	r7, #5
 80074a2:	d807      	bhi.n	80074b4 <_strtod_l+0xfc>
 80074a4:	e8df f007 	tbb	[pc, r7]
 80074a8:	1d180b0e 	.word	0x1d180b0e
 80074ac:	030e      	.short	0x030e
 80074ae:	f04f 0b00 	mov.w	fp, #0
 80074b2:	46da      	mov	sl, fp
 80074b4:	0728      	lsls	r0, r5, #28
 80074b6:	d5c1      	bpl.n	800743c <_strtod_l+0x84>
 80074b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80074bc:	e7be      	b.n	800743c <_strtod_l+0x84>
 80074be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80074c2:	e7f7      	b.n	80074b4 <_strtod_l+0xfc>
 80074c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80074c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074d6:	e7ed      	b.n	80074b4 <_strtod_l+0xfc>
 80074d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007660 <_strtod_l+0x2a8>
 80074dc:	f04f 0a00 	mov.w	sl, #0
 80074e0:	e7e8      	b.n	80074b4 <_strtod_l+0xfc>
 80074e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80074e6:	f04f 3aff 	mov.w	sl, #4294967295
 80074ea:	e7e3      	b.n	80074b4 <_strtod_l+0xfc>
 80074ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	921d      	str	r2, [sp, #116]	; 0x74
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b30      	cmp	r3, #48	; 0x30
 80074f6:	d0f9      	beq.n	80074ec <_strtod_l+0x134>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d09f      	beq.n	800743c <_strtod_l+0x84>
 80074fc:	2301      	movs	r3, #1
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007506:	930a      	str	r3, [sp, #40]	; 0x28
 8007508:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800750c:	464f      	mov	r7, r9
 800750e:	220a      	movs	r2, #10
 8007510:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007512:	7806      	ldrb	r6, [r0, #0]
 8007514:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007518:	b2d9      	uxtb	r1, r3
 800751a:	2909      	cmp	r1, #9
 800751c:	d92a      	bls.n	8007574 <_strtod_l+0x1bc>
 800751e:	9907      	ldr	r1, [sp, #28]
 8007520:	462a      	mov	r2, r5
 8007522:	f003 f964 	bl	800a7ee <strncmp>
 8007526:	b398      	cbz	r0, 8007590 <_strtod_l+0x1d8>
 8007528:	2000      	movs	r0, #0
 800752a:	4633      	mov	r3, r6
 800752c:	463d      	mov	r5, r7
 800752e:	9007      	str	r0, [sp, #28]
 8007530:	4602      	mov	r2, r0
 8007532:	2b65      	cmp	r3, #101	; 0x65
 8007534:	d001      	beq.n	800753a <_strtod_l+0x182>
 8007536:	2b45      	cmp	r3, #69	; 0x45
 8007538:	d118      	bne.n	800756c <_strtod_l+0x1b4>
 800753a:	b91d      	cbnz	r5, 8007544 <_strtod_l+0x18c>
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	4303      	orrs	r3, r0
 8007540:	d098      	beq.n	8007474 <_strtod_l+0xbc>
 8007542:	2500      	movs	r5, #0
 8007544:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007548:	f108 0301 	add.w	r3, r8, #1
 800754c:	931d      	str	r3, [sp, #116]	; 0x74
 800754e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007552:	2b2b      	cmp	r3, #43	; 0x2b
 8007554:	d075      	beq.n	8007642 <_strtod_l+0x28a>
 8007556:	2b2d      	cmp	r3, #45	; 0x2d
 8007558:	d07b      	beq.n	8007652 <_strtod_l+0x29a>
 800755a:	f04f 0c00 	mov.w	ip, #0
 800755e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007562:	2909      	cmp	r1, #9
 8007564:	f240 8082 	bls.w	800766c <_strtod_l+0x2b4>
 8007568:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800756c:	2600      	movs	r6, #0
 800756e:	e09d      	b.n	80076ac <_strtod_l+0x2f4>
 8007570:	2300      	movs	r3, #0
 8007572:	e7c4      	b.n	80074fe <_strtod_l+0x146>
 8007574:	2f08      	cmp	r7, #8
 8007576:	bfd8      	it	le
 8007578:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800757a:	f100 0001 	add.w	r0, r0, #1
 800757e:	bfda      	itte	le
 8007580:	fb02 3301 	mlale	r3, r2, r1, r3
 8007584:	9309      	strle	r3, [sp, #36]	; 0x24
 8007586:	fb02 3909 	mlagt	r9, r2, r9, r3
 800758a:	3701      	adds	r7, #1
 800758c:	901d      	str	r0, [sp, #116]	; 0x74
 800758e:	e7bf      	b.n	8007510 <_strtod_l+0x158>
 8007590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007592:	195a      	adds	r2, r3, r5
 8007594:	921d      	str	r2, [sp, #116]	; 0x74
 8007596:	5d5b      	ldrb	r3, [r3, r5]
 8007598:	2f00      	cmp	r7, #0
 800759a:	d037      	beq.n	800760c <_strtod_l+0x254>
 800759c:	9007      	str	r0, [sp, #28]
 800759e:	463d      	mov	r5, r7
 80075a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80075a4:	2a09      	cmp	r2, #9
 80075a6:	d912      	bls.n	80075ce <_strtod_l+0x216>
 80075a8:	2201      	movs	r2, #1
 80075aa:	e7c2      	b.n	8007532 <_strtod_l+0x17a>
 80075ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	921d      	str	r2, [sp, #116]	; 0x74
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	3001      	adds	r0, #1
 80075b6:	2b30      	cmp	r3, #48	; 0x30
 80075b8:	d0f8      	beq.n	80075ac <_strtod_l+0x1f4>
 80075ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80075be:	2a08      	cmp	r2, #8
 80075c0:	f200 84db 	bhi.w	8007f7a <_strtod_l+0xbc2>
 80075c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80075c6:	9007      	str	r0, [sp, #28]
 80075c8:	2000      	movs	r0, #0
 80075ca:	920a      	str	r2, [sp, #40]	; 0x28
 80075cc:	4605      	mov	r5, r0
 80075ce:	3b30      	subs	r3, #48	; 0x30
 80075d0:	f100 0201 	add.w	r2, r0, #1
 80075d4:	d014      	beq.n	8007600 <_strtod_l+0x248>
 80075d6:	9907      	ldr	r1, [sp, #28]
 80075d8:	4411      	add	r1, r2
 80075da:	9107      	str	r1, [sp, #28]
 80075dc:	462a      	mov	r2, r5
 80075de:	eb00 0e05 	add.w	lr, r0, r5
 80075e2:	210a      	movs	r1, #10
 80075e4:	4572      	cmp	r2, lr
 80075e6:	d113      	bne.n	8007610 <_strtod_l+0x258>
 80075e8:	182a      	adds	r2, r5, r0
 80075ea:	2a08      	cmp	r2, #8
 80075ec:	f105 0501 	add.w	r5, r5, #1
 80075f0:	4405      	add	r5, r0
 80075f2:	dc1c      	bgt.n	800762e <_strtod_l+0x276>
 80075f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f6:	220a      	movs	r2, #10
 80075f8:	fb02 3301 	mla	r3, r2, r1, r3
 80075fc:	9309      	str	r3, [sp, #36]	; 0x24
 80075fe:	2200      	movs	r2, #0
 8007600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	911d      	str	r1, [sp, #116]	; 0x74
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	4610      	mov	r0, r2
 800760a:	e7c9      	b.n	80075a0 <_strtod_l+0x1e8>
 800760c:	4638      	mov	r0, r7
 800760e:	e7d2      	b.n	80075b6 <_strtod_l+0x1fe>
 8007610:	2a08      	cmp	r2, #8
 8007612:	dc04      	bgt.n	800761e <_strtod_l+0x266>
 8007614:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007616:	434e      	muls	r6, r1
 8007618:	9609      	str	r6, [sp, #36]	; 0x24
 800761a:	3201      	adds	r2, #1
 800761c:	e7e2      	b.n	80075e4 <_strtod_l+0x22c>
 800761e:	f102 0c01 	add.w	ip, r2, #1
 8007622:	f1bc 0f10 	cmp.w	ip, #16
 8007626:	bfd8      	it	le
 8007628:	fb01 f909 	mulle.w	r9, r1, r9
 800762c:	e7f5      	b.n	800761a <_strtod_l+0x262>
 800762e:	2d10      	cmp	r5, #16
 8007630:	bfdc      	itt	le
 8007632:	220a      	movle	r2, #10
 8007634:	fb02 3909 	mlale	r9, r2, r9, r3
 8007638:	e7e1      	b.n	80075fe <_strtod_l+0x246>
 800763a:	2300      	movs	r3, #0
 800763c:	9307      	str	r3, [sp, #28]
 800763e:	2201      	movs	r2, #1
 8007640:	e77c      	b.n	800753c <_strtod_l+0x184>
 8007642:	f04f 0c00 	mov.w	ip, #0
 8007646:	f108 0302 	add.w	r3, r8, #2
 800764a:	931d      	str	r3, [sp, #116]	; 0x74
 800764c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007650:	e785      	b.n	800755e <_strtod_l+0x1a6>
 8007652:	f04f 0c01 	mov.w	ip, #1
 8007656:	e7f6      	b.n	8007646 <_strtod_l+0x28e>
 8007658:	0800b2f0 	.word	0x0800b2f0
 800765c:	0800b13c 	.word	0x0800b13c
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	911d      	str	r1, [sp, #116]	; 0x74
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b30      	cmp	r3, #48	; 0x30
 800766e:	d0f9      	beq.n	8007664 <_strtod_l+0x2ac>
 8007670:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007674:	2908      	cmp	r1, #8
 8007676:	f63f af79 	bhi.w	800756c <_strtod_l+0x1b4>
 800767a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800767e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007680:	9308      	str	r3, [sp, #32]
 8007682:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007684:	1c59      	adds	r1, r3, #1
 8007686:	911d      	str	r1, [sp, #116]	; 0x74
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800768e:	2e09      	cmp	r6, #9
 8007690:	d937      	bls.n	8007702 <_strtod_l+0x34a>
 8007692:	9e08      	ldr	r6, [sp, #32]
 8007694:	1b89      	subs	r1, r1, r6
 8007696:	2908      	cmp	r1, #8
 8007698:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800769c:	dc02      	bgt.n	80076a4 <_strtod_l+0x2ec>
 800769e:	4576      	cmp	r6, lr
 80076a0:	bfa8      	it	ge
 80076a2:	4676      	movge	r6, lr
 80076a4:	f1bc 0f00 	cmp.w	ip, #0
 80076a8:	d000      	beq.n	80076ac <_strtod_l+0x2f4>
 80076aa:	4276      	negs	r6, r6
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	d14f      	bne.n	8007750 <_strtod_l+0x398>
 80076b0:	9904      	ldr	r1, [sp, #16]
 80076b2:	4301      	orrs	r1, r0
 80076b4:	f47f aec2 	bne.w	800743c <_strtod_l+0x84>
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	f47f aedb 	bne.w	8007474 <_strtod_l+0xbc>
 80076be:	2b69      	cmp	r3, #105	; 0x69
 80076c0:	d027      	beq.n	8007712 <_strtod_l+0x35a>
 80076c2:	dc24      	bgt.n	800770e <_strtod_l+0x356>
 80076c4:	2b49      	cmp	r3, #73	; 0x49
 80076c6:	d024      	beq.n	8007712 <_strtod_l+0x35a>
 80076c8:	2b4e      	cmp	r3, #78	; 0x4e
 80076ca:	f47f aed3 	bne.w	8007474 <_strtod_l+0xbc>
 80076ce:	499e      	ldr	r1, [pc, #632]	; (8007948 <_strtod_l+0x590>)
 80076d0:	a81d      	add	r0, sp, #116	; 0x74
 80076d2:	f001 ff35 	bl	8009540 <__match>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f aecc 	beq.w	8007474 <_strtod_l+0xbc>
 80076dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b28      	cmp	r3, #40	; 0x28
 80076e2:	d12d      	bne.n	8007740 <_strtod_l+0x388>
 80076e4:	4999      	ldr	r1, [pc, #612]	; (800794c <_strtod_l+0x594>)
 80076e6:	aa20      	add	r2, sp, #128	; 0x80
 80076e8:	a81d      	add	r0, sp, #116	; 0x74
 80076ea:	f001 ff3d 	bl	8009568 <__hexnan>
 80076ee:	2805      	cmp	r0, #5
 80076f0:	d126      	bne.n	8007740 <_strtod_l+0x388>
 80076f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80076f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80076fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007700:	e69c      	b.n	800743c <_strtod_l+0x84>
 8007702:	210a      	movs	r1, #10
 8007704:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007708:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800770c:	e7b9      	b.n	8007682 <_strtod_l+0x2ca>
 800770e:	2b6e      	cmp	r3, #110	; 0x6e
 8007710:	e7db      	b.n	80076ca <_strtod_l+0x312>
 8007712:	498f      	ldr	r1, [pc, #572]	; (8007950 <_strtod_l+0x598>)
 8007714:	a81d      	add	r0, sp, #116	; 0x74
 8007716:	f001 ff13 	bl	8009540 <__match>
 800771a:	2800      	cmp	r0, #0
 800771c:	f43f aeaa 	beq.w	8007474 <_strtod_l+0xbc>
 8007720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007722:	498c      	ldr	r1, [pc, #560]	; (8007954 <_strtod_l+0x59c>)
 8007724:	3b01      	subs	r3, #1
 8007726:	a81d      	add	r0, sp, #116	; 0x74
 8007728:	931d      	str	r3, [sp, #116]	; 0x74
 800772a:	f001 ff09 	bl	8009540 <__match>
 800772e:	b910      	cbnz	r0, 8007736 <_strtod_l+0x37e>
 8007730:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007732:	3301      	adds	r3, #1
 8007734:	931d      	str	r3, [sp, #116]	; 0x74
 8007736:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007964 <_strtod_l+0x5ac>
 800773a:	f04f 0a00 	mov.w	sl, #0
 800773e:	e67d      	b.n	800743c <_strtod_l+0x84>
 8007740:	4885      	ldr	r0, [pc, #532]	; (8007958 <_strtod_l+0x5a0>)
 8007742:	f002 fff9 	bl	800a738 <nan>
 8007746:	ed8d 0b04 	vstr	d0, [sp, #16]
 800774a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800774e:	e675      	b.n	800743c <_strtod_l+0x84>
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007754:	1af3      	subs	r3, r6, r3
 8007756:	2f00      	cmp	r7, #0
 8007758:	bf08      	it	eq
 800775a:	462f      	moveq	r7, r5
 800775c:	2d10      	cmp	r5, #16
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	46a8      	mov	r8, r5
 8007762:	bfa8      	it	ge
 8007764:	f04f 0810 	movge.w	r8, #16
 8007768:	f7f8 fed4 	bl	8000514 <__aeabi_ui2d>
 800776c:	2d09      	cmp	r5, #9
 800776e:	4682      	mov	sl, r0
 8007770:	468b      	mov	fp, r1
 8007772:	dd13      	ble.n	800779c <_strtod_l+0x3e4>
 8007774:	4b79      	ldr	r3, [pc, #484]	; (800795c <_strtod_l+0x5a4>)
 8007776:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800777a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	4682      	mov	sl, r0
 8007784:	4648      	mov	r0, r9
 8007786:	468b      	mov	fp, r1
 8007788:	f7f8 fec4 	bl	8000514 <__aeabi_ui2d>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4650      	mov	r0, sl
 8007792:	4659      	mov	r1, fp
 8007794:	f7f8 fd82 	bl	800029c <__adddf3>
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	2d0f      	cmp	r5, #15
 800779e:	dc38      	bgt.n	8007812 <_strtod_l+0x45a>
 80077a0:	9b08      	ldr	r3, [sp, #32]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f43f ae4a 	beq.w	800743c <_strtod_l+0x84>
 80077a8:	dd24      	ble.n	80077f4 <_strtod_l+0x43c>
 80077aa:	2b16      	cmp	r3, #22
 80077ac:	dc0b      	bgt.n	80077c6 <_strtod_l+0x40e>
 80077ae:	4d6b      	ldr	r5, [pc, #428]	; (800795c <_strtod_l+0x5a4>)
 80077b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80077b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80077b8:	4652      	mov	r2, sl
 80077ba:	465b      	mov	r3, fp
 80077bc:	f7f8 ff24 	bl	8000608 <__aeabi_dmul>
 80077c0:	4682      	mov	sl, r0
 80077c2:	468b      	mov	fp, r1
 80077c4:	e63a      	b.n	800743c <_strtod_l+0x84>
 80077c6:	9a08      	ldr	r2, [sp, #32]
 80077c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80077cc:	4293      	cmp	r3, r2
 80077ce:	db20      	blt.n	8007812 <_strtod_l+0x45a>
 80077d0:	4c62      	ldr	r4, [pc, #392]	; (800795c <_strtod_l+0x5a4>)
 80077d2:	f1c5 050f 	rsb	r5, r5, #15
 80077d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077da:	4652      	mov	r2, sl
 80077dc:	465b      	mov	r3, fp
 80077de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e2:	f7f8 ff11 	bl	8000608 <__aeabi_dmul>
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	1b5d      	subs	r5, r3, r5
 80077ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077f2:	e7e3      	b.n	80077bc <_strtod_l+0x404>
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	3316      	adds	r3, #22
 80077f8:	db0b      	blt.n	8007812 <_strtod_l+0x45a>
 80077fa:	9b07      	ldr	r3, [sp, #28]
 80077fc:	4a57      	ldr	r2, [pc, #348]	; (800795c <_strtod_l+0x5a4>)
 80077fe:	1b9e      	subs	r6, r3, r6
 8007800:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007808:	4650      	mov	r0, sl
 800780a:	4659      	mov	r1, fp
 800780c:	f7f9 f826 	bl	800085c <__aeabi_ddiv>
 8007810:	e7d6      	b.n	80077c0 <_strtod_l+0x408>
 8007812:	9b08      	ldr	r3, [sp, #32]
 8007814:	eba5 0808 	sub.w	r8, r5, r8
 8007818:	4498      	add	r8, r3
 800781a:	f1b8 0f00 	cmp.w	r8, #0
 800781e:	dd71      	ble.n	8007904 <_strtod_l+0x54c>
 8007820:	f018 030f 	ands.w	r3, r8, #15
 8007824:	d00a      	beq.n	800783c <_strtod_l+0x484>
 8007826:	494d      	ldr	r1, [pc, #308]	; (800795c <_strtod_l+0x5a4>)
 8007828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800782c:	4652      	mov	r2, sl
 800782e:	465b      	mov	r3, fp
 8007830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007834:	f7f8 fee8 	bl	8000608 <__aeabi_dmul>
 8007838:	4682      	mov	sl, r0
 800783a:	468b      	mov	fp, r1
 800783c:	f038 080f 	bics.w	r8, r8, #15
 8007840:	d04d      	beq.n	80078de <_strtod_l+0x526>
 8007842:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007846:	dd22      	ble.n	800788e <_strtod_l+0x4d6>
 8007848:	2500      	movs	r5, #0
 800784a:	462e      	mov	r6, r5
 800784c:	9509      	str	r5, [sp, #36]	; 0x24
 800784e:	9507      	str	r5, [sp, #28]
 8007850:	2322      	movs	r3, #34	; 0x22
 8007852:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007964 <_strtod_l+0x5ac>
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	f04f 0a00 	mov.w	sl, #0
 800785c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	f43f adec 	beq.w	800743c <_strtod_l+0x84>
 8007864:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007866:	4620      	mov	r0, r4
 8007868:	f001 ff7c 	bl	8009764 <_Bfree>
 800786c:	9907      	ldr	r1, [sp, #28]
 800786e:	4620      	mov	r0, r4
 8007870:	f001 ff78 	bl	8009764 <_Bfree>
 8007874:	4631      	mov	r1, r6
 8007876:	4620      	mov	r0, r4
 8007878:	f001 ff74 	bl	8009764 <_Bfree>
 800787c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800787e:	4620      	mov	r0, r4
 8007880:	f001 ff70 	bl	8009764 <_Bfree>
 8007884:	4629      	mov	r1, r5
 8007886:	4620      	mov	r0, r4
 8007888:	f001 ff6c 	bl	8009764 <_Bfree>
 800788c:	e5d6      	b.n	800743c <_strtod_l+0x84>
 800788e:	2300      	movs	r3, #0
 8007890:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007894:	4650      	mov	r0, sl
 8007896:	4659      	mov	r1, fp
 8007898:	4699      	mov	r9, r3
 800789a:	f1b8 0f01 	cmp.w	r8, #1
 800789e:	dc21      	bgt.n	80078e4 <_strtod_l+0x52c>
 80078a0:	b10b      	cbz	r3, 80078a6 <_strtod_l+0x4ee>
 80078a2:	4682      	mov	sl, r0
 80078a4:	468b      	mov	fp, r1
 80078a6:	4b2e      	ldr	r3, [pc, #184]	; (8007960 <_strtod_l+0x5a8>)
 80078a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80078ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80078b0:	4652      	mov	r2, sl
 80078b2:	465b      	mov	r3, fp
 80078b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80078b8:	f7f8 fea6 	bl	8000608 <__aeabi_dmul>
 80078bc:	4b29      	ldr	r3, [pc, #164]	; (8007964 <_strtod_l+0x5ac>)
 80078be:	460a      	mov	r2, r1
 80078c0:	400b      	ands	r3, r1
 80078c2:	4929      	ldr	r1, [pc, #164]	; (8007968 <_strtod_l+0x5b0>)
 80078c4:	428b      	cmp	r3, r1
 80078c6:	4682      	mov	sl, r0
 80078c8:	d8be      	bhi.n	8007848 <_strtod_l+0x490>
 80078ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078ce:	428b      	cmp	r3, r1
 80078d0:	bf86      	itte	hi
 80078d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800796c <_strtod_l+0x5b4>
 80078d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80078da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80078de:	2300      	movs	r3, #0
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	e081      	b.n	80079e8 <_strtod_l+0x630>
 80078e4:	f018 0f01 	tst.w	r8, #1
 80078e8:	d007      	beq.n	80078fa <_strtod_l+0x542>
 80078ea:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <_strtod_l+0x5a8>)
 80078ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 fe88 	bl	8000608 <__aeabi_dmul>
 80078f8:	2301      	movs	r3, #1
 80078fa:	f109 0901 	add.w	r9, r9, #1
 80078fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007902:	e7ca      	b.n	800789a <_strtod_l+0x4e2>
 8007904:	d0eb      	beq.n	80078de <_strtod_l+0x526>
 8007906:	f1c8 0800 	rsb	r8, r8, #0
 800790a:	f018 020f 	ands.w	r2, r8, #15
 800790e:	d00a      	beq.n	8007926 <_strtod_l+0x56e>
 8007910:	4b12      	ldr	r3, [pc, #72]	; (800795c <_strtod_l+0x5a4>)
 8007912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007916:	4650      	mov	r0, sl
 8007918:	4659      	mov	r1, fp
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 ff9d 	bl	800085c <__aeabi_ddiv>
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	ea5f 1828 	movs.w	r8, r8, asr #4
 800792a:	d0d8      	beq.n	80078de <_strtod_l+0x526>
 800792c:	f1b8 0f1f 	cmp.w	r8, #31
 8007930:	dd1e      	ble.n	8007970 <_strtod_l+0x5b8>
 8007932:	2500      	movs	r5, #0
 8007934:	462e      	mov	r6, r5
 8007936:	9509      	str	r5, [sp, #36]	; 0x24
 8007938:	9507      	str	r5, [sp, #28]
 800793a:	2322      	movs	r3, #34	; 0x22
 800793c:	f04f 0a00 	mov.w	sl, #0
 8007940:	f04f 0b00 	mov.w	fp, #0
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	e789      	b.n	800785c <_strtod_l+0x4a4>
 8007948:	0800b10d 	.word	0x0800b10d
 800794c:	0800b150 	.word	0x0800b150
 8007950:	0800b105 	.word	0x0800b105
 8007954:	0800b193 	.word	0x0800b193
 8007958:	0800b4b0 	.word	0x0800b4b0
 800795c:	0800b390 	.word	0x0800b390
 8007960:	0800b368 	.word	0x0800b368
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	7ca00000 	.word	0x7ca00000
 800796c:	7fefffff 	.word	0x7fefffff
 8007970:	f018 0310 	ands.w	r3, r8, #16
 8007974:	bf18      	it	ne
 8007976:	236a      	movne	r3, #106	; 0x6a
 8007978:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007d30 <_strtod_l+0x978>
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	4650      	mov	r0, sl
 8007980:	4659      	mov	r1, fp
 8007982:	2300      	movs	r3, #0
 8007984:	f018 0f01 	tst.w	r8, #1
 8007988:	d004      	beq.n	8007994 <_strtod_l+0x5dc>
 800798a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800798e:	f7f8 fe3b 	bl	8000608 <__aeabi_dmul>
 8007992:	2301      	movs	r3, #1
 8007994:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007998:	f109 0908 	add.w	r9, r9, #8
 800799c:	d1f2      	bne.n	8007984 <_strtod_l+0x5cc>
 800799e:	b10b      	cbz	r3, 80079a4 <_strtod_l+0x5ec>
 80079a0:	4682      	mov	sl, r0
 80079a2:	468b      	mov	fp, r1
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	b1bb      	cbz	r3, 80079d8 <_strtod_l+0x620>
 80079a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80079ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	4659      	mov	r1, fp
 80079b4:	dd10      	ble.n	80079d8 <_strtod_l+0x620>
 80079b6:	2b1f      	cmp	r3, #31
 80079b8:	f340 8128 	ble.w	8007c0c <_strtod_l+0x854>
 80079bc:	2b34      	cmp	r3, #52	; 0x34
 80079be:	bfde      	ittt	le
 80079c0:	3b20      	suble	r3, #32
 80079c2:	f04f 32ff 	movle.w	r2, #4294967295
 80079c6:	fa02 f303 	lslle.w	r3, r2, r3
 80079ca:	f04f 0a00 	mov.w	sl, #0
 80079ce:	bfcc      	ite	gt
 80079d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079d4:	ea03 0b01 	andle.w	fp, r3, r1
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f9 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d1a4      	bne.n	8007932 <_strtod_l+0x57a>
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079ee:	462b      	mov	r3, r5
 80079f0:	463a      	mov	r2, r7
 80079f2:	4620      	mov	r0, r4
 80079f4:	f001 ff22 	bl	800983c <__s2b>
 80079f8:	9009      	str	r0, [sp, #36]	; 0x24
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f43f af24 	beq.w	8007848 <_strtod_l+0x490>
 8007a00:	9b07      	ldr	r3, [sp, #28]
 8007a02:	1b9e      	subs	r6, r3, r6
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfb4      	ite	lt
 8007a0a:	4633      	movlt	r3, r6
 8007a0c:	2300      	movge	r3, #0
 8007a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	2500      	movs	r5, #0
 8007a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a18:	9318      	str	r3, [sp, #96]	; 0x60
 8007a1a:	462e      	mov	r6, r5
 8007a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1e:	4620      	mov	r0, r4
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	f001 fe5f 	bl	80096e4 <_Balloc>
 8007a26:	9007      	str	r0, [sp, #28]
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f43f af11 	beq.w	8007850 <_strtod_l+0x498>
 8007a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	3202      	adds	r2, #2
 8007a34:	f103 010c 	add.w	r1, r3, #12
 8007a38:	0092      	lsls	r2, r2, #2
 8007a3a:	300c      	adds	r0, #12
 8007a3c:	f7fe fdd2 	bl	80065e4 <memcpy>
 8007a40:	ec4b ab10 	vmov	d0, sl, fp
 8007a44:	aa20      	add	r2, sp, #128	; 0x80
 8007a46:	a91f      	add	r1, sp, #124	; 0x7c
 8007a48:	4620      	mov	r0, r4
 8007a4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007a4e:	f002 fa31 	bl	8009eb4 <__d2b>
 8007a52:	901e      	str	r0, [sp, #120]	; 0x78
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f43f aefb 	beq.w	8007850 <_strtod_l+0x498>
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f001 ff87 	bl	8009970 <__i2b>
 8007a62:	4606      	mov	r6, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f aef3 	beq.w	8007850 <_strtod_l+0x498>
 8007a6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a6c:	9904      	ldr	r1, [sp, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bfab      	itete	ge
 8007a72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007a74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007a76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007a78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007a7c:	bfac      	ite	ge
 8007a7e:	eb03 0902 	addge.w	r9, r3, r2
 8007a82:	1ad7      	sublt	r7, r2, r3
 8007a84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a86:	eba3 0801 	sub.w	r8, r3, r1
 8007a8a:	4490      	add	r8, r2
 8007a8c:	4ba3      	ldr	r3, [pc, #652]	; (8007d1c <_strtod_l+0x964>)
 8007a8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a92:	4598      	cmp	r8, r3
 8007a94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a98:	f280 80cc 	bge.w	8007c34 <_strtod_l+0x87c>
 8007a9c:	eba3 0308 	sub.w	r3, r3, r8
 8007aa0:	2b1f      	cmp	r3, #31
 8007aa2:	eba2 0203 	sub.w	r2, r2, r3
 8007aa6:	f04f 0101 	mov.w	r1, #1
 8007aaa:	f300 80b6 	bgt.w	8007c1a <_strtod_l+0x862>
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab8:	eb09 0802 	add.w	r8, r9, r2
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	45c1      	cmp	r9, r8
 8007ac0:	4417      	add	r7, r2
 8007ac2:	441f      	add	r7, r3
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	bfa8      	it	ge
 8007ac8:	4643      	movge	r3, r8
 8007aca:	42bb      	cmp	r3, r7
 8007acc:	bfa8      	it	ge
 8007ace:	463b      	movge	r3, r7
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfc2      	ittt	gt
 8007ad4:	eba8 0803 	subgt.w	r8, r8, r3
 8007ad8:	1aff      	subgt	r7, r7, r3
 8007ada:	eba9 0903 	subgt.w	r9, r9, r3
 8007ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dd17      	ble.n	8007b14 <_strtod_l+0x75c>
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f001 fffd 	bl	8009ae8 <__pow5mult>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f aead 	beq.w	8007850 <_strtod_l+0x498>
 8007af6:	4601      	mov	r1, r0
 8007af8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007afa:	4620      	mov	r0, r4
 8007afc:	f001 ff4e 	bl	800999c <__multiply>
 8007b00:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f43f aea4 	beq.w	8007850 <_strtod_l+0x498>
 8007b08:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f001 fe2a 	bl	8009764 <_Bfree>
 8007b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b12:	931e      	str	r3, [sp, #120]	; 0x78
 8007b14:	f1b8 0f00 	cmp.w	r8, #0
 8007b18:	f300 8091 	bgt.w	8007c3e <_strtod_l+0x886>
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dd08      	ble.n	8007b34 <_strtod_l+0x77c>
 8007b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b24:	9907      	ldr	r1, [sp, #28]
 8007b26:	4620      	mov	r0, r4
 8007b28:	f001 ffde 	bl	8009ae8 <__pow5mult>
 8007b2c:	9007      	str	r0, [sp, #28]
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f43f ae8e 	beq.w	8007850 <_strtod_l+0x498>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	dd08      	ble.n	8007b4a <_strtod_l+0x792>
 8007b38:	9907      	ldr	r1, [sp, #28]
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f002 f82d 	bl	8009b9c <__lshift>
 8007b42:	9007      	str	r0, [sp, #28]
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f43f ae83 	beq.w	8007850 <_strtod_l+0x498>
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	dd08      	ble.n	8007b62 <_strtod_l+0x7aa>
 8007b50:	4631      	mov	r1, r6
 8007b52:	464a      	mov	r2, r9
 8007b54:	4620      	mov	r0, r4
 8007b56:	f002 f821 	bl	8009b9c <__lshift>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f43f ae77 	beq.w	8007850 <_strtod_l+0x498>
 8007b62:	9a07      	ldr	r2, [sp, #28]
 8007b64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b66:	4620      	mov	r0, r4
 8007b68:	f002 f8a0 	bl	8009cac <__mdiff>
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f ae6e 	beq.w	8007850 <_strtod_l+0x498>
 8007b74:	68c3      	ldr	r3, [r0, #12]
 8007b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60c3      	str	r3, [r0, #12]
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	f002 f879 	bl	8009c74 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	da65      	bge.n	8007c52 <_strtod_l+0x89a>
 8007b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b88:	ea53 030a 	orrs.w	r3, r3, sl
 8007b8c:	f040 8087 	bne.w	8007c9e <_strtod_l+0x8e6>
 8007b90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 8082 	bne.w	8007c9e <_strtod_l+0x8e6>
 8007b9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b9e:	0d1b      	lsrs	r3, r3, #20
 8007ba0:	051b      	lsls	r3, r3, #20
 8007ba2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ba6:	d97a      	bls.n	8007c9e <_strtod_l+0x8e6>
 8007ba8:	696b      	ldr	r3, [r5, #20]
 8007baa:	b913      	cbnz	r3, 8007bb2 <_strtod_l+0x7fa>
 8007bac:	692b      	ldr	r3, [r5, #16]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	dd75      	ble.n	8007c9e <_strtod_l+0x8e6>
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f001 fff0 	bl	8009b9c <__lshift>
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	f002 f858 	bl	8009c74 <__mcmp>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	dd6a      	ble.n	8007c9e <_strtod_l+0x8e6>
 8007bc8:	9904      	ldr	r1, [sp, #16]
 8007bca:	4a55      	ldr	r2, [pc, #340]	; (8007d20 <_strtod_l+0x968>)
 8007bcc:	465b      	mov	r3, fp
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	f000 8085 	beq.w	8007cde <_strtod_l+0x926>
 8007bd4:	ea02 010b 	and.w	r1, r2, fp
 8007bd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007bdc:	dc7f      	bgt.n	8007cde <_strtod_l+0x926>
 8007bde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007be2:	f77f aeaa 	ble.w	800793a <_strtod_l+0x582>
 8007be6:	4a4f      	ldr	r2, [pc, #316]	; (8007d24 <_strtod_l+0x96c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007bee:	4650      	mov	r0, sl
 8007bf0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fd07 	bl	8000608 <__aeabi_dmul>
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4303      	orrs	r3, r0
 8007bfe:	bf08      	it	eq
 8007c00:	2322      	moveq	r3, #34	; 0x22
 8007c02:	4682      	mov	sl, r0
 8007c04:	468b      	mov	fp, r1
 8007c06:	bf08      	it	eq
 8007c08:	6023      	streq	r3, [r4, #0]
 8007c0a:	e62b      	b.n	8007864 <_strtod_l+0x4ac>
 8007c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	ea03 0a0a 	and.w	sl, r3, sl
 8007c18:	e6de      	b.n	80079d8 <_strtod_l+0x620>
 8007c1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007c22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007c26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007c2a:	fa01 f308 	lsl.w	r3, r1, r8
 8007c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c30:	9111      	str	r1, [sp, #68]	; 0x44
 8007c32:	e741      	b.n	8007ab8 <_strtod_l+0x700>
 8007c34:	2300      	movs	r3, #0
 8007c36:	930c      	str	r3, [sp, #48]	; 0x30
 8007c38:	2301      	movs	r3, #1
 8007c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8007c3c:	e73c      	b.n	8007ab8 <_strtod_l+0x700>
 8007c3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007c40:	4642      	mov	r2, r8
 8007c42:	4620      	mov	r0, r4
 8007c44:	f001 ffaa 	bl	8009b9c <__lshift>
 8007c48:	901e      	str	r0, [sp, #120]	; 0x78
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f47f af66 	bne.w	8007b1c <_strtod_l+0x764>
 8007c50:	e5fe      	b.n	8007850 <_strtod_l+0x498>
 8007c52:	465f      	mov	r7, fp
 8007c54:	d16e      	bne.n	8007d34 <_strtod_l+0x97c>
 8007c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c5c:	b342      	cbz	r2, 8007cb0 <_strtod_l+0x8f8>
 8007c5e:	4a32      	ldr	r2, [pc, #200]	; (8007d28 <_strtod_l+0x970>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d128      	bne.n	8007cb6 <_strtod_l+0x8fe>
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	4650      	mov	r0, sl
 8007c68:	b1eb      	cbz	r3, 8007ca6 <_strtod_l+0x8ee>
 8007c6a:	4a2d      	ldr	r2, [pc, #180]	; (8007d20 <_strtod_l+0x968>)
 8007c6c:	403a      	ands	r2, r7
 8007c6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c72:	f04f 31ff 	mov.w	r1, #4294967295
 8007c76:	d819      	bhi.n	8007cac <_strtod_l+0x8f4>
 8007c78:	0d12      	lsrs	r2, r2, #20
 8007c7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	4298      	cmp	r0, r3
 8007c84:	d117      	bne.n	8007cb6 <_strtod_l+0x8fe>
 8007c86:	4b29      	ldr	r3, [pc, #164]	; (8007d2c <_strtod_l+0x974>)
 8007c88:	429f      	cmp	r7, r3
 8007c8a:	d102      	bne.n	8007c92 <_strtod_l+0x8da>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f43f addf 	beq.w	8007850 <_strtod_l+0x498>
 8007c92:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <_strtod_l+0x968>)
 8007c94:	403b      	ands	r3, r7
 8007c96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007c9a:	f04f 0a00 	mov.w	sl, #0
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1a0      	bne.n	8007be6 <_strtod_l+0x82e>
 8007ca4:	e5de      	b.n	8007864 <_strtod_l+0x4ac>
 8007ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8007caa:	e7ea      	b.n	8007c82 <_strtod_l+0x8ca>
 8007cac:	460b      	mov	r3, r1
 8007cae:	e7e8      	b.n	8007c82 <_strtod_l+0x8ca>
 8007cb0:	ea53 030a 	orrs.w	r3, r3, sl
 8007cb4:	d088      	beq.n	8007bc8 <_strtod_l+0x810>
 8007cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb8:	b1db      	cbz	r3, 8007cf2 <_strtod_l+0x93a>
 8007cba:	423b      	tst	r3, r7
 8007cbc:	d0ef      	beq.n	8007c9e <_strtod_l+0x8e6>
 8007cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cc0:	9a04      	ldr	r2, [sp, #16]
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	b1c3      	cbz	r3, 8007cfa <_strtod_l+0x942>
 8007cc8:	f7ff fb5a 	bl	8007380 <sulp>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cd4:	f7f8 fae2 	bl	800029c <__adddf3>
 8007cd8:	4682      	mov	sl, r0
 8007cda:	468b      	mov	fp, r1
 8007cdc:	e7df      	b.n	8007c9e <_strtod_l+0x8e6>
 8007cde:	4013      	ands	r3, r2
 8007ce0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ce4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ce8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007cec:	f04f 3aff 	mov.w	sl, #4294967295
 8007cf0:	e7d5      	b.n	8007c9e <_strtod_l+0x8e6>
 8007cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cf4:	ea13 0f0a 	tst.w	r3, sl
 8007cf8:	e7e0      	b.n	8007cbc <_strtod_l+0x904>
 8007cfa:	f7ff fb41 	bl	8007380 <sulp>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d06:	f7f8 fac7 	bl	8000298 <__aeabi_dsub>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4682      	mov	sl, r0
 8007d10:	468b      	mov	fp, r1
 8007d12:	f7f8 fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d0c1      	beq.n	8007c9e <_strtod_l+0x8e6>
 8007d1a:	e60e      	b.n	800793a <_strtod_l+0x582>
 8007d1c:	fffffc02 	.word	0xfffffc02
 8007d20:	7ff00000 	.word	0x7ff00000
 8007d24:	39500000 	.word	0x39500000
 8007d28:	000fffff 	.word	0x000fffff
 8007d2c:	7fefffff 	.word	0x7fefffff
 8007d30:	0800b168 	.word	0x0800b168
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	f002 f918 	bl	8009f6c <__ratio>
 8007d3c:	ec59 8b10 	vmov	r8, r9, d0
 8007d40:	ee10 0a10 	vmov	r0, s0
 8007d44:	2200      	movs	r2, #0
 8007d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	f7f8 fed8 	bl	8000b00 <__aeabi_dcmple>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d07c      	beq.n	8007e4e <_strtod_l+0xa96>
 8007d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d04c      	beq.n	8007df4 <_strtod_l+0xa3c>
 8007d5a:	4b95      	ldr	r3, [pc, #596]	; (8007fb0 <_strtod_l+0xbf8>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007d62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007fb0 <_strtod_l+0xbf8>
 8007d66:	f04f 0800 	mov.w	r8, #0
 8007d6a:	4b92      	ldr	r3, [pc, #584]	; (8007fb4 <_strtod_l+0xbfc>)
 8007d6c:	403b      	ands	r3, r7
 8007d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8007d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d72:	4b91      	ldr	r3, [pc, #580]	; (8007fb8 <_strtod_l+0xc00>)
 8007d74:	429a      	cmp	r2, r3
 8007d76:	f040 80b2 	bne.w	8007ede <_strtod_l+0xb26>
 8007d7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007d86:	ec4b ab10 	vmov	d0, sl, fp
 8007d8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007d8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d92:	f002 f813 	bl	8009dbc <__ulp>
 8007d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d9a:	ec53 2b10 	vmov	r2, r3, d0
 8007d9e:	f7f8 fc33 	bl	8000608 <__aeabi_dmul>
 8007da2:	4652      	mov	r2, sl
 8007da4:	465b      	mov	r3, fp
 8007da6:	f7f8 fa79 	bl	800029c <__adddf3>
 8007daa:	460b      	mov	r3, r1
 8007dac:	4981      	ldr	r1, [pc, #516]	; (8007fb4 <_strtod_l+0xbfc>)
 8007dae:	4a83      	ldr	r2, [pc, #524]	; (8007fbc <_strtod_l+0xc04>)
 8007db0:	4019      	ands	r1, r3
 8007db2:	4291      	cmp	r1, r2
 8007db4:	4682      	mov	sl, r0
 8007db6:	d95e      	bls.n	8007e76 <_strtod_l+0xabe>
 8007db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d103      	bne.n	8007dca <_strtod_l+0xa12>
 8007dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f43f ad43 	beq.w	8007850 <_strtod_l+0x498>
 8007dca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007fc8 <_strtod_l+0xc10>
 8007dce:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 fcc5 	bl	8009764 <_Bfree>
 8007dda:	9907      	ldr	r1, [sp, #28]
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f001 fcc1 	bl	8009764 <_Bfree>
 8007de2:	4631      	mov	r1, r6
 8007de4:	4620      	mov	r0, r4
 8007de6:	f001 fcbd 	bl	8009764 <_Bfree>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4620      	mov	r0, r4
 8007dee:	f001 fcb9 	bl	8009764 <_Bfree>
 8007df2:	e613      	b.n	8007a1c <_strtod_l+0x664>
 8007df4:	f1ba 0f00 	cmp.w	sl, #0
 8007df8:	d11b      	bne.n	8007e32 <_strtod_l+0xa7a>
 8007dfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dfe:	b9f3      	cbnz	r3, 8007e3e <_strtod_l+0xa86>
 8007e00:	4b6b      	ldr	r3, [pc, #428]	; (8007fb0 <_strtod_l+0xbf8>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	f7f8 fe70 	bl	8000aec <__aeabi_dcmplt>
 8007e0c:	b9d0      	cbnz	r0, 8007e44 <_strtod_l+0xa8c>
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	4b6b      	ldr	r3, [pc, #428]	; (8007fc0 <_strtod_l+0xc08>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	f7f8 fbf7 	bl	8000608 <__aeabi_dmul>
 8007e1a:	4680      	mov	r8, r0
 8007e1c:	4689      	mov	r9, r1
 8007e1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007e26:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007e2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e30:	e79b      	b.n	8007d6a <_strtod_l+0x9b2>
 8007e32:	f1ba 0f01 	cmp.w	sl, #1
 8007e36:	d102      	bne.n	8007e3e <_strtod_l+0xa86>
 8007e38:	2f00      	cmp	r7, #0
 8007e3a:	f43f ad7e 	beq.w	800793a <_strtod_l+0x582>
 8007e3e:	4b61      	ldr	r3, [pc, #388]	; (8007fc4 <_strtod_l+0xc0c>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	e78c      	b.n	8007d5e <_strtod_l+0x9a6>
 8007e44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007fc0 <_strtod_l+0xc08>
 8007e48:	f04f 0800 	mov.w	r8, #0
 8007e4c:	e7e7      	b.n	8007e1e <_strtod_l+0xa66>
 8007e4e:	4b5c      	ldr	r3, [pc, #368]	; (8007fc0 <_strtod_l+0xc08>)
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	2200      	movs	r2, #0
 8007e56:	f7f8 fbd7 	bl	8000608 <__aeabi_dmul>
 8007e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4689      	mov	r9, r1
 8007e60:	b933      	cbnz	r3, 8007e70 <_strtod_l+0xab8>
 8007e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e66:	9012      	str	r0, [sp, #72]	; 0x48
 8007e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007e6e:	e7dd      	b.n	8007e2c <_strtod_l+0xa74>
 8007e70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007e74:	e7f9      	b.n	8007e6a <_strtod_l+0xab2>
 8007e76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e7a:	9b04      	ldr	r3, [sp, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1a8      	bne.n	8007dd2 <_strtod_l+0xa1a>
 8007e80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e86:	0d1b      	lsrs	r3, r3, #20
 8007e88:	051b      	lsls	r3, r3, #20
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d1a1      	bne.n	8007dd2 <_strtod_l+0xa1a>
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 ff19 	bl	8000cc8 <__aeabi_d2lz>
 8007e96:	f7f8 fb89 	bl	80005ac <__aeabi_l2d>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	f7f8 f9f9 	bl	8000298 <__aeabi_dsub>
 8007ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ea8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eac:	ea43 030a 	orr.w	r3, r3, sl
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4689      	mov	r9, r1
 8007eb6:	d053      	beq.n	8007f60 <_strtod_l+0xba8>
 8007eb8:	a335      	add	r3, pc, #212	; (adr r3, 8007f90 <_strtod_l+0xbd8>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fe15 	bl	8000aec <__aeabi_dcmplt>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f47f acce 	bne.w	8007864 <_strtod_l+0x4ac>
 8007ec8:	a333      	add	r3, pc, #204	; (adr r3, 8007f98 <_strtod_l+0xbe0>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f7f8 fe29 	bl	8000b28 <__aeabi_dcmpgt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f43f af7b 	beq.w	8007dd2 <_strtod_l+0xa1a>
 8007edc:	e4c2      	b.n	8007864 <_strtod_l+0x4ac>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	b333      	cbz	r3, 8007f30 <_strtod_l+0xb78>
 8007ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ee4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ee8:	d822      	bhi.n	8007f30 <_strtod_l+0xb78>
 8007eea:	a32d      	add	r3, pc, #180	; (adr r3, 8007fa0 <_strtod_l+0xbe8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fe04 	bl	8000b00 <__aeabi_dcmple>
 8007ef8:	b1a0      	cbz	r0, 8007f24 <_strtod_l+0xb6c>
 8007efa:	4649      	mov	r1, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	f7f8 fe5b 	bl	8000bb8 <__aeabi_d2uiz>
 8007f02:	2801      	cmp	r0, #1
 8007f04:	bf38      	it	cc
 8007f06:	2001      	movcc	r0, #1
 8007f08:	f7f8 fb04 	bl	8000514 <__aeabi_ui2d>
 8007f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f0e:	4680      	mov	r8, r0
 8007f10:	4689      	mov	r9, r1
 8007f12:	bb13      	cbnz	r3, 8007f5a <_strtod_l+0xba2>
 8007f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f18:	9014      	str	r0, [sp, #80]	; 0x50
 8007f1a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f3c:	f001 ff3e 	bl	8009dbc <__ulp>
 8007f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f44:	ec53 2b10 	vmov	r2, r3, d0
 8007f48:	f7f8 fb5e 	bl	8000608 <__aeabi_dmul>
 8007f4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f50:	f7f8 f9a4 	bl	800029c <__adddf3>
 8007f54:	4682      	mov	sl, r0
 8007f56:	468b      	mov	fp, r1
 8007f58:	e78f      	b.n	8007e7a <_strtod_l+0xac2>
 8007f5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007f5e:	e7dd      	b.n	8007f1c <_strtod_l+0xb64>
 8007f60:	a311      	add	r3, pc, #68	; (adr r3, 8007fa8 <_strtod_l+0xbf0>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 fdc1 	bl	8000aec <__aeabi_dcmplt>
 8007f6a:	e7b4      	b.n	8007ed6 <_strtod_l+0xb1e>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	f7ff ba65 	b.w	8007444 <_strtod_l+0x8c>
 8007f7a:	2b65      	cmp	r3, #101	; 0x65
 8007f7c:	f43f ab5d 	beq.w	800763a <_strtod_l+0x282>
 8007f80:	2b45      	cmp	r3, #69	; 0x45
 8007f82:	f43f ab5a 	beq.w	800763a <_strtod_l+0x282>
 8007f86:	2201      	movs	r2, #1
 8007f88:	f7ff bb92 	b.w	80076b0 <_strtod_l+0x2f8>
 8007f8c:	f3af 8000 	nop.w
 8007f90:	94a03595 	.word	0x94a03595
 8007f94:	3fdfffff 	.word	0x3fdfffff
 8007f98:	35afe535 	.word	0x35afe535
 8007f9c:	3fe00000 	.word	0x3fe00000
 8007fa0:	ffc00000 	.word	0xffc00000
 8007fa4:	41dfffff 	.word	0x41dfffff
 8007fa8:	94a03595 	.word	0x94a03595
 8007fac:	3fcfffff 	.word	0x3fcfffff
 8007fb0:	3ff00000 	.word	0x3ff00000
 8007fb4:	7ff00000 	.word	0x7ff00000
 8007fb8:	7fe00000 	.word	0x7fe00000
 8007fbc:	7c9fffff 	.word	0x7c9fffff
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	bff00000 	.word	0xbff00000
 8007fc8:	7fefffff 	.word	0x7fefffff

08007fcc <_strtod_r>:
 8007fcc:	4b01      	ldr	r3, [pc, #4]	; (8007fd4 <_strtod_r+0x8>)
 8007fce:	f7ff b9f3 	b.w	80073b8 <_strtod_l>
 8007fd2:	bf00      	nop
 8007fd4:	20000094 	.word	0x20000094

08007fd8 <_strtol_l.isra.0>:
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fde:	d001      	beq.n	8007fe4 <_strtol_l.isra.0+0xc>
 8007fe0:	2b24      	cmp	r3, #36	; 0x24
 8007fe2:	d906      	bls.n	8007ff2 <_strtol_l.isra.0+0x1a>
 8007fe4:	f7fe fad4 	bl	8006590 <__errno>
 8007fe8:	2316      	movs	r3, #22
 8007fea:	6003      	str	r3, [r0, #0]
 8007fec:	2000      	movs	r0, #0
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	4f3a      	ldr	r7, [pc, #232]	; (80080dc <_strtol_l.isra.0+0x104>)
 8007ff4:	468e      	mov	lr, r1
 8007ff6:	4676      	mov	r6, lr
 8007ff8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ffc:	5de5      	ldrb	r5, [r4, r7]
 8007ffe:	f015 0508 	ands.w	r5, r5, #8
 8008002:	d1f8      	bne.n	8007ff6 <_strtol_l.isra.0+0x1e>
 8008004:	2c2d      	cmp	r4, #45	; 0x2d
 8008006:	d134      	bne.n	8008072 <_strtol_l.isra.0+0x9a>
 8008008:	f89e 4000 	ldrb.w	r4, [lr]
 800800c:	f04f 0801 	mov.w	r8, #1
 8008010:	f106 0e02 	add.w	lr, r6, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05c      	beq.n	80080d2 <_strtol_l.isra.0+0xfa>
 8008018:	2b10      	cmp	r3, #16
 800801a:	d10c      	bne.n	8008036 <_strtol_l.isra.0+0x5e>
 800801c:	2c30      	cmp	r4, #48	; 0x30
 800801e:	d10a      	bne.n	8008036 <_strtol_l.isra.0+0x5e>
 8008020:	f89e 4000 	ldrb.w	r4, [lr]
 8008024:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008028:	2c58      	cmp	r4, #88	; 0x58
 800802a:	d14d      	bne.n	80080c8 <_strtol_l.isra.0+0xf0>
 800802c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008030:	2310      	movs	r3, #16
 8008032:	f10e 0e02 	add.w	lr, lr, #2
 8008036:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800803a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800803e:	2600      	movs	r6, #0
 8008040:	fbbc f9f3 	udiv	r9, ip, r3
 8008044:	4635      	mov	r5, r6
 8008046:	fb03 ca19 	mls	sl, r3, r9, ip
 800804a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800804e:	2f09      	cmp	r7, #9
 8008050:	d818      	bhi.n	8008084 <_strtol_l.isra.0+0xac>
 8008052:	463c      	mov	r4, r7
 8008054:	42a3      	cmp	r3, r4
 8008056:	dd24      	ble.n	80080a2 <_strtol_l.isra.0+0xca>
 8008058:	2e00      	cmp	r6, #0
 800805a:	db1f      	blt.n	800809c <_strtol_l.isra.0+0xc4>
 800805c:	45a9      	cmp	r9, r5
 800805e:	d31d      	bcc.n	800809c <_strtol_l.isra.0+0xc4>
 8008060:	d101      	bne.n	8008066 <_strtol_l.isra.0+0x8e>
 8008062:	45a2      	cmp	sl, r4
 8008064:	db1a      	blt.n	800809c <_strtol_l.isra.0+0xc4>
 8008066:	fb05 4503 	mla	r5, r5, r3, r4
 800806a:	2601      	movs	r6, #1
 800806c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008070:	e7eb      	b.n	800804a <_strtol_l.isra.0+0x72>
 8008072:	2c2b      	cmp	r4, #43	; 0x2b
 8008074:	bf08      	it	eq
 8008076:	f89e 4000 	ldrbeq.w	r4, [lr]
 800807a:	46a8      	mov	r8, r5
 800807c:	bf08      	it	eq
 800807e:	f106 0e02 	addeq.w	lr, r6, #2
 8008082:	e7c7      	b.n	8008014 <_strtol_l.isra.0+0x3c>
 8008084:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008088:	2f19      	cmp	r7, #25
 800808a:	d801      	bhi.n	8008090 <_strtol_l.isra.0+0xb8>
 800808c:	3c37      	subs	r4, #55	; 0x37
 800808e:	e7e1      	b.n	8008054 <_strtol_l.isra.0+0x7c>
 8008090:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008094:	2f19      	cmp	r7, #25
 8008096:	d804      	bhi.n	80080a2 <_strtol_l.isra.0+0xca>
 8008098:	3c57      	subs	r4, #87	; 0x57
 800809a:	e7db      	b.n	8008054 <_strtol_l.isra.0+0x7c>
 800809c:	f04f 36ff 	mov.w	r6, #4294967295
 80080a0:	e7e4      	b.n	800806c <_strtol_l.isra.0+0x94>
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	da05      	bge.n	80080b2 <_strtol_l.isra.0+0xda>
 80080a6:	2322      	movs	r3, #34	; 0x22
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	4665      	mov	r5, ip
 80080ac:	b942      	cbnz	r2, 80080c0 <_strtol_l.isra.0+0xe8>
 80080ae:	4628      	mov	r0, r5
 80080b0:	e79d      	b.n	8007fee <_strtol_l.isra.0+0x16>
 80080b2:	f1b8 0f00 	cmp.w	r8, #0
 80080b6:	d000      	beq.n	80080ba <_strtol_l.isra.0+0xe2>
 80080b8:	426d      	negs	r5, r5
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	d0f7      	beq.n	80080ae <_strtol_l.isra.0+0xd6>
 80080be:	b10e      	cbz	r6, 80080c4 <_strtol_l.isra.0+0xec>
 80080c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	e7f2      	b.n	80080ae <_strtol_l.isra.0+0xd6>
 80080c8:	2430      	movs	r4, #48	; 0x30
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1b3      	bne.n	8008036 <_strtol_l.isra.0+0x5e>
 80080ce:	2308      	movs	r3, #8
 80080d0:	e7b1      	b.n	8008036 <_strtol_l.isra.0+0x5e>
 80080d2:	2c30      	cmp	r4, #48	; 0x30
 80080d4:	d0a4      	beq.n	8008020 <_strtol_l.isra.0+0x48>
 80080d6:	230a      	movs	r3, #10
 80080d8:	e7ad      	b.n	8008036 <_strtol_l.isra.0+0x5e>
 80080da:	bf00      	nop
 80080dc:	0800aff9 	.word	0x0800aff9

080080e0 <_strtol_r>:
 80080e0:	f7ff bf7a 	b.w	8007fd8 <_strtol_l.isra.0>

080080e4 <quorem>:
 80080e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	6903      	ldr	r3, [r0, #16]
 80080ea:	690c      	ldr	r4, [r1, #16]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	4607      	mov	r7, r0
 80080f0:	f2c0 8081 	blt.w	80081f6 <quorem+0x112>
 80080f4:	3c01      	subs	r4, #1
 80080f6:	f101 0814 	add.w	r8, r1, #20
 80080fa:	f100 0514 	add.w	r5, r0, #20
 80080fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800810c:	3301      	adds	r3, #1
 800810e:	429a      	cmp	r2, r3
 8008110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008118:	fbb2 f6f3 	udiv	r6, r2, r3
 800811c:	d331      	bcc.n	8008182 <quorem+0x9e>
 800811e:	f04f 0e00 	mov.w	lr, #0
 8008122:	4640      	mov	r0, r8
 8008124:	46ac      	mov	ip, r5
 8008126:	46f2      	mov	sl, lr
 8008128:	f850 2b04 	ldr.w	r2, [r0], #4
 800812c:	b293      	uxth	r3, r2
 800812e:	fb06 e303 	mla	r3, r6, r3, lr
 8008132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	ebaa 0303 	sub.w	r3, sl, r3
 800813c:	0c12      	lsrs	r2, r2, #16
 800813e:	f8dc a000 	ldr.w	sl, [ip]
 8008142:	fb06 e202 	mla	r2, r6, r2, lr
 8008146:	fa13 f38a 	uxtah	r3, r3, sl
 800814a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800814e:	fa1f fa82 	uxth.w	sl, r2
 8008152:	f8dc 2000 	ldr.w	r2, [ip]
 8008156:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800815a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008164:	4581      	cmp	r9, r0
 8008166:	f84c 3b04 	str.w	r3, [ip], #4
 800816a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800816e:	d2db      	bcs.n	8008128 <quorem+0x44>
 8008170:	f855 300b 	ldr.w	r3, [r5, fp]
 8008174:	b92b      	cbnz	r3, 8008182 <quorem+0x9e>
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	3b04      	subs	r3, #4
 800817a:	429d      	cmp	r5, r3
 800817c:	461a      	mov	r2, r3
 800817e:	d32e      	bcc.n	80081de <quorem+0xfa>
 8008180:	613c      	str	r4, [r7, #16]
 8008182:	4638      	mov	r0, r7
 8008184:	f001 fd76 	bl	8009c74 <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	db24      	blt.n	80081d6 <quorem+0xf2>
 800818c:	3601      	adds	r6, #1
 800818e:	4628      	mov	r0, r5
 8008190:	f04f 0c00 	mov.w	ip, #0
 8008194:	f858 2b04 	ldr.w	r2, [r8], #4
 8008198:	f8d0 e000 	ldr.w	lr, [r0]
 800819c:	b293      	uxth	r3, r2
 800819e:	ebac 0303 	sub.w	r3, ip, r3
 80081a2:	0c12      	lsrs	r2, r2, #16
 80081a4:	fa13 f38e 	uxtah	r3, r3, lr
 80081a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081b6:	45c1      	cmp	r9, r8
 80081b8:	f840 3b04 	str.w	r3, [r0], #4
 80081bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081c0:	d2e8      	bcs.n	8008194 <quorem+0xb0>
 80081c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ca:	b922      	cbnz	r2, 80081d6 <quorem+0xf2>
 80081cc:	3b04      	subs	r3, #4
 80081ce:	429d      	cmp	r5, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	d30a      	bcc.n	80081ea <quorem+0x106>
 80081d4:	613c      	str	r4, [r7, #16]
 80081d6:	4630      	mov	r0, r6
 80081d8:	b003      	add	sp, #12
 80081da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	3b04      	subs	r3, #4
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d1cc      	bne.n	8008180 <quorem+0x9c>
 80081e6:	3c01      	subs	r4, #1
 80081e8:	e7c7      	b.n	800817a <quorem+0x96>
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	3b04      	subs	r3, #4
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	d1f0      	bne.n	80081d4 <quorem+0xf0>
 80081f2:	3c01      	subs	r4, #1
 80081f4:	e7eb      	b.n	80081ce <quorem+0xea>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7ee      	b.n	80081d8 <quorem+0xf4>
 80081fa:	0000      	movs	r0, r0
 80081fc:	0000      	movs	r0, r0
	...

08008200 <_dtoa_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	ed2d 8b02 	vpush	{d8}
 8008208:	ec57 6b10 	vmov	r6, r7, d0
 800820c:	b095      	sub	sp, #84	; 0x54
 800820e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008210:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008214:	9105      	str	r1, [sp, #20]
 8008216:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800821a:	4604      	mov	r4, r0
 800821c:	9209      	str	r2, [sp, #36]	; 0x24
 800821e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008220:	b975      	cbnz	r5, 8008240 <_dtoa_r+0x40>
 8008222:	2010      	movs	r0, #16
 8008224:	f001 fa44 	bl	80096b0 <malloc>
 8008228:	4602      	mov	r2, r0
 800822a:	6260      	str	r0, [r4, #36]	; 0x24
 800822c:	b920      	cbnz	r0, 8008238 <_dtoa_r+0x38>
 800822e:	4bb2      	ldr	r3, [pc, #712]	; (80084f8 <_dtoa_r+0x2f8>)
 8008230:	21ea      	movs	r1, #234	; 0xea
 8008232:	48b2      	ldr	r0, [pc, #712]	; (80084fc <_dtoa_r+0x2fc>)
 8008234:	f002 fbce 	bl	800a9d4 <__assert_func>
 8008238:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800823c:	6005      	str	r5, [r0, #0]
 800823e:	60c5      	str	r5, [r0, #12]
 8008240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	b151      	cbz	r1, 800825c <_dtoa_r+0x5c>
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	604a      	str	r2, [r1, #4]
 800824a:	2301      	movs	r3, #1
 800824c:	4093      	lsls	r3, r2
 800824e:	608b      	str	r3, [r1, #8]
 8008250:	4620      	mov	r0, r4
 8008252:	f001 fa87 	bl	8009764 <_Bfree>
 8008256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	1e3b      	subs	r3, r7, #0
 800825e:	bfb9      	ittee	lt
 8008260:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008264:	9303      	strlt	r3, [sp, #12]
 8008266:	2300      	movge	r3, #0
 8008268:	f8c8 3000 	strge.w	r3, [r8]
 800826c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008270:	4ba3      	ldr	r3, [pc, #652]	; (8008500 <_dtoa_r+0x300>)
 8008272:	bfbc      	itt	lt
 8008274:	2201      	movlt	r2, #1
 8008276:	f8c8 2000 	strlt.w	r2, [r8]
 800827a:	ea33 0309 	bics.w	r3, r3, r9
 800827e:	d11b      	bne.n	80082b8 <_dtoa_r+0xb8>
 8008280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008282:	f242 730f 	movw	r3, #9999	; 0x270f
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800828c:	4333      	orrs	r3, r6
 800828e:	f000 857a 	beq.w	8008d86 <_dtoa_r+0xb86>
 8008292:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008294:	b963      	cbnz	r3, 80082b0 <_dtoa_r+0xb0>
 8008296:	4b9b      	ldr	r3, [pc, #620]	; (8008504 <_dtoa_r+0x304>)
 8008298:	e024      	b.n	80082e4 <_dtoa_r+0xe4>
 800829a:	4b9b      	ldr	r3, [pc, #620]	; (8008508 <_dtoa_r+0x308>)
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	9800      	ldr	r0, [sp, #0]
 80082a6:	b015      	add	sp, #84	; 0x54
 80082a8:	ecbd 8b02 	vpop	{d8}
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	4b94      	ldr	r3, [pc, #592]	; (8008504 <_dtoa_r+0x304>)
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	3303      	adds	r3, #3
 80082b6:	e7f3      	b.n	80082a0 <_dtoa_r+0xa0>
 80082b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	ec51 0b17 	vmov	r0, r1, d7
 80082c2:	2300      	movs	r3, #0
 80082c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082c8:	f7f8 fc06 	bl	8000ad8 <__aeabi_dcmpeq>
 80082cc:	4680      	mov	r8, r0
 80082ce:	b158      	cbz	r0, 80082e8 <_dtoa_r+0xe8>
 80082d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082d2:	2301      	movs	r3, #1
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8551 	beq.w	8008d80 <_dtoa_r+0xb80>
 80082de:	488b      	ldr	r0, [pc, #556]	; (800850c <_dtoa_r+0x30c>)
 80082e0:	6018      	str	r0, [r3, #0]
 80082e2:	1e43      	subs	r3, r0, #1
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	e7dd      	b.n	80082a4 <_dtoa_r+0xa4>
 80082e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082ec:	aa12      	add	r2, sp, #72	; 0x48
 80082ee:	a913      	add	r1, sp, #76	; 0x4c
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 fddf 	bl	8009eb4 <__d2b>
 80082f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082fa:	4683      	mov	fp, r0
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	d07c      	beq.n	80083fa <_dtoa_r+0x1fa>
 8008300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008302:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800830a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800830e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800831a:	4b7d      	ldr	r3, [pc, #500]	; (8008510 <_dtoa_r+0x310>)
 800831c:	2200      	movs	r2, #0
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f7 ffb9 	bl	8000298 <__aeabi_dsub>
 8008326:	a36e      	add	r3, pc, #440	; (adr r3, 80084e0 <_dtoa_r+0x2e0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	a36d      	add	r3, pc, #436	; (adr r3, 80084e8 <_dtoa_r+0x2e8>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	f7f7 ffb1 	bl	800029c <__adddf3>
 800833a:	4606      	mov	r6, r0
 800833c:	4628      	mov	r0, r5
 800833e:	460f      	mov	r7, r1
 8008340:	f7f8 f8f8 	bl	8000534 <__aeabi_i2d>
 8008344:	a36a      	add	r3, pc, #424	; (adr r3, 80084f0 <_dtoa_r+0x2f0>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f8 f95d 	bl	8000608 <__aeabi_dmul>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f7 ffa1 	bl	800029c <__adddf3>
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	f7f8 fc03 	bl	8000b68 <__aeabi_d2iz>
 8008362:	2200      	movs	r2, #0
 8008364:	4682      	mov	sl, r0
 8008366:	2300      	movs	r3, #0
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fbbe 	bl	8000aec <__aeabi_dcmplt>
 8008370:	b148      	cbz	r0, 8008386 <_dtoa_r+0x186>
 8008372:	4650      	mov	r0, sl
 8008374:	f7f8 f8de 	bl	8000534 <__aeabi_i2d>
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	f7f8 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008380:	b908      	cbnz	r0, 8008386 <_dtoa_r+0x186>
 8008382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008386:	f1ba 0f16 	cmp.w	sl, #22
 800838a:	d854      	bhi.n	8008436 <_dtoa_r+0x236>
 800838c:	4b61      	ldr	r3, [pc, #388]	; (8008514 <_dtoa_r+0x314>)
 800838e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800839a:	f7f8 fba7 	bl	8000aec <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d04b      	beq.n	800843a <_dtoa_r+0x23a>
 80083a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083a6:	2300      	movs	r3, #0
 80083a8:	930e      	str	r3, [sp, #56]	; 0x38
 80083aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ac:	1b5d      	subs	r5, r3, r5
 80083ae:	1e6b      	subs	r3, r5, #1
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	bf43      	ittte	mi
 80083b4:	2300      	movmi	r3, #0
 80083b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80083ba:	9304      	strmi	r3, [sp, #16]
 80083bc:	f04f 0800 	movpl.w	r8, #0
 80083c0:	f1ba 0f00 	cmp.w	sl, #0
 80083c4:	db3b      	blt.n	800843e <_dtoa_r+0x23e>
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80083cc:	4453      	add	r3, sl
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	2300      	movs	r3, #0
 80083d2:	9306      	str	r3, [sp, #24]
 80083d4:	9b05      	ldr	r3, [sp, #20]
 80083d6:	2b09      	cmp	r3, #9
 80083d8:	d869      	bhi.n	80084ae <_dtoa_r+0x2ae>
 80083da:	2b05      	cmp	r3, #5
 80083dc:	bfc4      	itt	gt
 80083de:	3b04      	subgt	r3, #4
 80083e0:	9305      	strgt	r3, [sp, #20]
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	f1a3 0302 	sub.w	r3, r3, #2
 80083e8:	bfcc      	ite	gt
 80083ea:	2500      	movgt	r5, #0
 80083ec:	2501      	movle	r5, #1
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d869      	bhi.n	80084c6 <_dtoa_r+0x2c6>
 80083f2:	e8df f003 	tbb	[pc, r3]
 80083f6:	4e2c      	.short	0x4e2c
 80083f8:	5a4c      	.short	0x5a4c
 80083fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083fe:	441d      	add	r5, r3
 8008400:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008404:	2b20      	cmp	r3, #32
 8008406:	bfc1      	itttt	gt
 8008408:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800840c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008410:	fa09 f303 	lslgt.w	r3, r9, r3
 8008414:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008418:	bfda      	itte	le
 800841a:	f1c3 0320 	rsble	r3, r3, #32
 800841e:	fa06 f003 	lslle.w	r0, r6, r3
 8008422:	4318      	orrgt	r0, r3
 8008424:	f7f8 f876 	bl	8000514 <__aeabi_ui2d>
 8008428:	2301      	movs	r3, #1
 800842a:	4606      	mov	r6, r0
 800842c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008430:	3d01      	subs	r5, #1
 8008432:	9310      	str	r3, [sp, #64]	; 0x40
 8008434:	e771      	b.n	800831a <_dtoa_r+0x11a>
 8008436:	2301      	movs	r3, #1
 8008438:	e7b6      	b.n	80083a8 <_dtoa_r+0x1a8>
 800843a:	900e      	str	r0, [sp, #56]	; 0x38
 800843c:	e7b5      	b.n	80083aa <_dtoa_r+0x1aa>
 800843e:	f1ca 0300 	rsb	r3, sl, #0
 8008442:	9306      	str	r3, [sp, #24]
 8008444:	2300      	movs	r3, #0
 8008446:	eba8 080a 	sub.w	r8, r8, sl
 800844a:	930d      	str	r3, [sp, #52]	; 0x34
 800844c:	e7c2      	b.n	80083d4 <_dtoa_r+0x1d4>
 800844e:	2300      	movs	r3, #0
 8008450:	9308      	str	r3, [sp, #32]
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	dc39      	bgt.n	80084cc <_dtoa_r+0x2cc>
 8008458:	f04f 0901 	mov.w	r9, #1
 800845c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008460:	464b      	mov	r3, r9
 8008462:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008466:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008468:	2200      	movs	r2, #0
 800846a:	6042      	str	r2, [r0, #4]
 800846c:	2204      	movs	r2, #4
 800846e:	f102 0614 	add.w	r6, r2, #20
 8008472:	429e      	cmp	r6, r3
 8008474:	6841      	ldr	r1, [r0, #4]
 8008476:	d92f      	bls.n	80084d8 <_dtoa_r+0x2d8>
 8008478:	4620      	mov	r0, r4
 800847a:	f001 f933 	bl	80096e4 <_Balloc>
 800847e:	9000      	str	r0, [sp, #0]
 8008480:	2800      	cmp	r0, #0
 8008482:	d14b      	bne.n	800851c <_dtoa_r+0x31c>
 8008484:	4b24      	ldr	r3, [pc, #144]	; (8008518 <_dtoa_r+0x318>)
 8008486:	4602      	mov	r2, r0
 8008488:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800848c:	e6d1      	b.n	8008232 <_dtoa_r+0x32>
 800848e:	2301      	movs	r3, #1
 8008490:	e7de      	b.n	8008450 <_dtoa_r+0x250>
 8008492:	2300      	movs	r3, #0
 8008494:	9308      	str	r3, [sp, #32]
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	eb0a 0903 	add.w	r9, sl, r3
 800849c:	f109 0301 	add.w	r3, r9, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	bfb8      	it	lt
 80084a6:	2301      	movlt	r3, #1
 80084a8:	e7dd      	b.n	8008466 <_dtoa_r+0x266>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e7f2      	b.n	8008494 <_dtoa_r+0x294>
 80084ae:	2501      	movs	r5, #1
 80084b0:	2300      	movs	r3, #0
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	9508      	str	r5, [sp, #32]
 80084b6:	f04f 39ff 	mov.w	r9, #4294967295
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80084c0:	2312      	movs	r3, #18
 80084c2:	9209      	str	r2, [sp, #36]	; 0x24
 80084c4:	e7cf      	b.n	8008466 <_dtoa_r+0x266>
 80084c6:	2301      	movs	r3, #1
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	e7f4      	b.n	80084b6 <_dtoa_r+0x2b6>
 80084cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80084d4:	464b      	mov	r3, r9
 80084d6:	e7c6      	b.n	8008466 <_dtoa_r+0x266>
 80084d8:	3101      	adds	r1, #1
 80084da:	6041      	str	r1, [r0, #4]
 80084dc:	0052      	lsls	r2, r2, #1
 80084de:	e7c6      	b.n	800846e <_dtoa_r+0x26e>
 80084e0:	636f4361 	.word	0x636f4361
 80084e4:	3fd287a7 	.word	0x3fd287a7
 80084e8:	8b60c8b3 	.word	0x8b60c8b3
 80084ec:	3fc68a28 	.word	0x3fc68a28
 80084f0:	509f79fb 	.word	0x509f79fb
 80084f4:	3fd34413 	.word	0x3fd34413
 80084f8:	0800b19d 	.word	0x0800b19d
 80084fc:	0800b1b4 	.word	0x0800b1b4
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	0800b199 	.word	0x0800b199
 8008508:	0800b190 	.word	0x0800b190
 800850c:	0800b111 	.word	0x0800b111
 8008510:	3ff80000 	.word	0x3ff80000
 8008514:	0800b390 	.word	0x0800b390
 8008518:	0800b213 	.word	0x0800b213
 800851c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800851e:	9a00      	ldr	r2, [sp, #0]
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	2b0e      	cmp	r3, #14
 8008526:	f200 80ad 	bhi.w	8008684 <_dtoa_r+0x484>
 800852a:	2d00      	cmp	r5, #0
 800852c:	f000 80aa 	beq.w	8008684 <_dtoa_r+0x484>
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	dd36      	ble.n	80085a4 <_dtoa_r+0x3a4>
 8008536:	4ac3      	ldr	r2, [pc, #780]	; (8008844 <_dtoa_r+0x644>)
 8008538:	f00a 030f 	and.w	r3, sl, #15
 800853c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008540:	ed93 7b00 	vldr	d7, [r3]
 8008544:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008548:	ea4f 172a 	mov.w	r7, sl, asr #4
 800854c:	eeb0 8a47 	vmov.f32	s16, s14
 8008550:	eef0 8a67 	vmov.f32	s17, s15
 8008554:	d016      	beq.n	8008584 <_dtoa_r+0x384>
 8008556:	4bbc      	ldr	r3, [pc, #752]	; (8008848 <_dtoa_r+0x648>)
 8008558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800855c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008560:	f7f8 f97c 	bl	800085c <__aeabi_ddiv>
 8008564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008568:	f007 070f 	and.w	r7, r7, #15
 800856c:	2503      	movs	r5, #3
 800856e:	4eb6      	ldr	r6, [pc, #728]	; (8008848 <_dtoa_r+0x648>)
 8008570:	b957      	cbnz	r7, 8008588 <_dtoa_r+0x388>
 8008572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008576:	ec53 2b18 	vmov	r2, r3, d8
 800857a:	f7f8 f96f 	bl	800085c <__aeabi_ddiv>
 800857e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008582:	e029      	b.n	80085d8 <_dtoa_r+0x3d8>
 8008584:	2502      	movs	r5, #2
 8008586:	e7f2      	b.n	800856e <_dtoa_r+0x36e>
 8008588:	07f9      	lsls	r1, r7, #31
 800858a:	d508      	bpl.n	800859e <_dtoa_r+0x39e>
 800858c:	ec51 0b18 	vmov	r0, r1, d8
 8008590:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008594:	f7f8 f838 	bl	8000608 <__aeabi_dmul>
 8008598:	ec41 0b18 	vmov	d8, r0, r1
 800859c:	3501      	adds	r5, #1
 800859e:	107f      	asrs	r7, r7, #1
 80085a0:	3608      	adds	r6, #8
 80085a2:	e7e5      	b.n	8008570 <_dtoa_r+0x370>
 80085a4:	f000 80a6 	beq.w	80086f4 <_dtoa_r+0x4f4>
 80085a8:	f1ca 0600 	rsb	r6, sl, #0
 80085ac:	4ba5      	ldr	r3, [pc, #660]	; (8008844 <_dtoa_r+0x644>)
 80085ae:	4fa6      	ldr	r7, [pc, #664]	; (8008848 <_dtoa_r+0x648>)
 80085b0:	f006 020f 	and.w	r2, r6, #15
 80085b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c0:	f7f8 f822 	bl	8000608 <__aeabi_dmul>
 80085c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c8:	1136      	asrs	r6, r6, #4
 80085ca:	2300      	movs	r3, #0
 80085cc:	2502      	movs	r5, #2
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	f040 8085 	bne.w	80086de <_dtoa_r+0x4de>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1d2      	bne.n	800857e <_dtoa_r+0x37e>
 80085d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 808c 	beq.w	80086f8 <_dtoa_r+0x4f8>
 80085e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085e4:	4b99      	ldr	r3, [pc, #612]	; (800884c <_dtoa_r+0x64c>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 fa7e 	bl	8000aec <__aeabi_dcmplt>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f000 8081 	beq.w	80086f8 <_dtoa_r+0x4f8>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d07d      	beq.n	80086f8 <_dtoa_r+0x4f8>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	dd3c      	ble.n	800867c <_dtoa_r+0x47c>
 8008602:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	2200      	movs	r2, #0
 800860a:	4b91      	ldr	r3, [pc, #580]	; (8008850 <_dtoa_r+0x650>)
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fffa 	bl	8000608 <__aeabi_dmul>
 8008614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008618:	3501      	adds	r5, #1
 800861a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800861e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008622:	4628      	mov	r0, r5
 8008624:	f7f7 ff86 	bl	8000534 <__aeabi_i2d>
 8008628:	4632      	mov	r2, r6
 800862a:	463b      	mov	r3, r7
 800862c:	f7f7 ffec 	bl	8000608 <__aeabi_dmul>
 8008630:	4b88      	ldr	r3, [pc, #544]	; (8008854 <_dtoa_r+0x654>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 fe32 	bl	800029c <__adddf3>
 8008638:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800863c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008644:	2b00      	cmp	r3, #0
 8008646:	d15c      	bne.n	8008702 <_dtoa_r+0x502>
 8008648:	4b83      	ldr	r3, [pc, #524]	; (8008858 <_dtoa_r+0x658>)
 800864a:	2200      	movs	r2, #0
 800864c:	4630      	mov	r0, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f7f7 fe22 	bl	8000298 <__aeabi_dsub>
 8008654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008658:	4606      	mov	r6, r0
 800865a:	460f      	mov	r7, r1
 800865c:	f7f8 fa64 	bl	8000b28 <__aeabi_dcmpgt>
 8008660:	2800      	cmp	r0, #0
 8008662:	f040 8296 	bne.w	8008b92 <_dtoa_r+0x992>
 8008666:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800866a:	4630      	mov	r0, r6
 800866c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008670:	4639      	mov	r1, r7
 8008672:	f7f8 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8288 	bne.w	8008b8c <_dtoa_r+0x98c>
 800867c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008686:	2b00      	cmp	r3, #0
 8008688:	f2c0 8158 	blt.w	800893c <_dtoa_r+0x73c>
 800868c:	f1ba 0f0e 	cmp.w	sl, #14
 8008690:	f300 8154 	bgt.w	800893c <_dtoa_r+0x73c>
 8008694:	4b6b      	ldr	r3, [pc, #428]	; (8008844 <_dtoa_r+0x644>)
 8008696:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800869a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800869e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f280 80e3 	bge.w	800886c <_dtoa_r+0x66c>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f300 80df 	bgt.w	800886c <_dtoa_r+0x66c>
 80086ae:	f040 826d 	bne.w	8008b8c <_dtoa_r+0x98c>
 80086b2:	4b69      	ldr	r3, [pc, #420]	; (8008858 <_dtoa_r+0x658>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 ffa5 	bl	8000608 <__aeabi_dmul>
 80086be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c2:	f7f8 fa27 	bl	8000b14 <__aeabi_dcmpge>
 80086c6:	9e01      	ldr	r6, [sp, #4]
 80086c8:	4637      	mov	r7, r6
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f040 8243 	bne.w	8008b56 <_dtoa_r+0x956>
 80086d0:	9d00      	ldr	r5, [sp, #0]
 80086d2:	2331      	movs	r3, #49	; 0x31
 80086d4:	f805 3b01 	strb.w	r3, [r5], #1
 80086d8:	f10a 0a01 	add.w	sl, sl, #1
 80086dc:	e23f      	b.n	8008b5e <_dtoa_r+0x95e>
 80086de:	07f2      	lsls	r2, r6, #31
 80086e0:	d505      	bpl.n	80086ee <_dtoa_r+0x4ee>
 80086e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e6:	f7f7 ff8f 	bl	8000608 <__aeabi_dmul>
 80086ea:	3501      	adds	r5, #1
 80086ec:	2301      	movs	r3, #1
 80086ee:	1076      	asrs	r6, r6, #1
 80086f0:	3708      	adds	r7, #8
 80086f2:	e76c      	b.n	80085ce <_dtoa_r+0x3ce>
 80086f4:	2502      	movs	r5, #2
 80086f6:	e76f      	b.n	80085d8 <_dtoa_r+0x3d8>
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80086fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008700:	e78d      	b.n	800861e <_dtoa_r+0x41e>
 8008702:	9900      	ldr	r1, [sp, #0]
 8008704:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008708:	4b4e      	ldr	r3, [pc, #312]	; (8008844 <_dtoa_r+0x644>)
 800870a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800870e:	4401      	add	r1, r0
 8008710:	9102      	str	r1, [sp, #8]
 8008712:	9908      	ldr	r1, [sp, #32]
 8008714:	eeb0 8a47 	vmov.f32	s16, s14
 8008718:	eef0 8a67 	vmov.f32	s17, s15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008724:	2900      	cmp	r1, #0
 8008726:	d045      	beq.n	80087b4 <_dtoa_r+0x5b4>
 8008728:	494c      	ldr	r1, [pc, #304]	; (800885c <_dtoa_r+0x65c>)
 800872a:	2000      	movs	r0, #0
 800872c:	f7f8 f896 	bl	800085c <__aeabi_ddiv>
 8008730:	ec53 2b18 	vmov	r2, r3, d8
 8008734:	f7f7 fdb0 	bl	8000298 <__aeabi_dsub>
 8008738:	9d00      	ldr	r5, [sp, #0]
 800873a:	ec41 0b18 	vmov	d8, r0, r1
 800873e:	4639      	mov	r1, r7
 8008740:	4630      	mov	r0, r6
 8008742:	f7f8 fa11 	bl	8000b68 <__aeabi_d2iz>
 8008746:	900c      	str	r0, [sp, #48]	; 0x30
 8008748:	f7f7 fef4 	bl	8000534 <__aeabi_i2d>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4630      	mov	r0, r6
 8008752:	4639      	mov	r1, r7
 8008754:	f7f7 fda0 	bl	8000298 <__aeabi_dsub>
 8008758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800875a:	3330      	adds	r3, #48	; 0x30
 800875c:	f805 3b01 	strb.w	r3, [r5], #1
 8008760:	ec53 2b18 	vmov	r2, r3, d8
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	f7f8 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800876c:	2800      	cmp	r0, #0
 800876e:	d165      	bne.n	800883c <_dtoa_r+0x63c>
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	4935      	ldr	r1, [pc, #212]	; (800884c <_dtoa_r+0x64c>)
 8008776:	2000      	movs	r0, #0
 8008778:	f7f7 fd8e 	bl	8000298 <__aeabi_dsub>
 800877c:	ec53 2b18 	vmov	r2, r3, d8
 8008780:	f7f8 f9b4 	bl	8000aec <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f040 80b9 	bne.w	80088fc <_dtoa_r+0x6fc>
 800878a:	9b02      	ldr	r3, [sp, #8]
 800878c:	429d      	cmp	r5, r3
 800878e:	f43f af75 	beq.w	800867c <_dtoa_r+0x47c>
 8008792:	4b2f      	ldr	r3, [pc, #188]	; (8008850 <_dtoa_r+0x650>)
 8008794:	ec51 0b18 	vmov	r0, r1, d8
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	4b2c      	ldr	r3, [pc, #176]	; (8008850 <_dtoa_r+0x650>)
 80087a0:	ec41 0b18 	vmov	d8, r0, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	4630      	mov	r0, r6
 80087a8:	4639      	mov	r1, r7
 80087aa:	f7f7 ff2d 	bl	8000608 <__aeabi_dmul>
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	e7c4      	b.n	800873e <_dtoa_r+0x53e>
 80087b4:	ec51 0b17 	vmov	r0, r1, d7
 80087b8:	f7f7 ff26 	bl	8000608 <__aeabi_dmul>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	9d00      	ldr	r5, [sp, #0]
 80087c0:	930c      	str	r3, [sp, #48]	; 0x30
 80087c2:	ec41 0b18 	vmov	d8, r0, r1
 80087c6:	4639      	mov	r1, r7
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7f8 f9cd 	bl	8000b68 <__aeabi_d2iz>
 80087ce:	9011      	str	r0, [sp, #68]	; 0x44
 80087d0:	f7f7 feb0 	bl	8000534 <__aeabi_i2d>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f7 fd5c 	bl	8000298 <__aeabi_dsub>
 80087e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e2:	3330      	adds	r3, #48	; 0x30
 80087e4:	f805 3b01 	strb.w	r3, [r5], #1
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	429d      	cmp	r5, r3
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	d134      	bne.n	8008860 <_dtoa_r+0x660>
 80087f6:	4b19      	ldr	r3, [pc, #100]	; (800885c <_dtoa_r+0x65c>)
 80087f8:	ec51 0b18 	vmov	r0, r1, d8
 80087fc:	f7f7 fd4e 	bl	800029c <__adddf3>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f8 f98e 	bl	8000b28 <__aeabi_dcmpgt>
 800880c:	2800      	cmp	r0, #0
 800880e:	d175      	bne.n	80088fc <_dtoa_r+0x6fc>
 8008810:	ec53 2b18 	vmov	r2, r3, d8
 8008814:	4911      	ldr	r1, [pc, #68]	; (800885c <_dtoa_r+0x65c>)
 8008816:	2000      	movs	r0, #0
 8008818:	f7f7 fd3e 	bl	8000298 <__aeabi_dsub>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f962 	bl	8000aec <__aeabi_dcmplt>
 8008828:	2800      	cmp	r0, #0
 800882a:	f43f af27 	beq.w	800867c <_dtoa_r+0x47c>
 800882e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008830:	1e6b      	subs	r3, r5, #1
 8008832:	930c      	str	r3, [sp, #48]	; 0x30
 8008834:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008838:	2b30      	cmp	r3, #48	; 0x30
 800883a:	d0f8      	beq.n	800882e <_dtoa_r+0x62e>
 800883c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008840:	e04a      	b.n	80088d8 <_dtoa_r+0x6d8>
 8008842:	bf00      	nop
 8008844:	0800b390 	.word	0x0800b390
 8008848:	0800b368 	.word	0x0800b368
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	40240000 	.word	0x40240000
 8008854:	401c0000 	.word	0x401c0000
 8008858:	40140000 	.word	0x40140000
 800885c:	3fe00000 	.word	0x3fe00000
 8008860:	4baf      	ldr	r3, [pc, #700]	; (8008b20 <_dtoa_r+0x920>)
 8008862:	f7f7 fed1 	bl	8000608 <__aeabi_dmul>
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	e7ac      	b.n	80087c6 <_dtoa_r+0x5c6>
 800886c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008870:	9d00      	ldr	r5, [sp, #0]
 8008872:	4642      	mov	r2, r8
 8008874:	464b      	mov	r3, r9
 8008876:	4630      	mov	r0, r6
 8008878:	4639      	mov	r1, r7
 800887a:	f7f7 ffef 	bl	800085c <__aeabi_ddiv>
 800887e:	f7f8 f973 	bl	8000b68 <__aeabi_d2iz>
 8008882:	9002      	str	r0, [sp, #8]
 8008884:	f7f7 fe56 	bl	8000534 <__aeabi_i2d>
 8008888:	4642      	mov	r2, r8
 800888a:	464b      	mov	r3, r9
 800888c:	f7f7 febc 	bl	8000608 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 fcfe 	bl	8000298 <__aeabi_dsub>
 800889c:	9e02      	ldr	r6, [sp, #8]
 800889e:	9f01      	ldr	r7, [sp, #4]
 80088a0:	3630      	adds	r6, #48	; 0x30
 80088a2:	f805 6b01 	strb.w	r6, [r5], #1
 80088a6:	9e00      	ldr	r6, [sp, #0]
 80088a8:	1bae      	subs	r6, r5, r6
 80088aa:	42b7      	cmp	r7, r6
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	d137      	bne.n	8008922 <_dtoa_r+0x722>
 80088b2:	f7f7 fcf3 	bl	800029c <__adddf3>
 80088b6:	4642      	mov	r2, r8
 80088b8:	464b      	mov	r3, r9
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	f7f8 f933 	bl	8000b28 <__aeabi_dcmpgt>
 80088c2:	b9c8      	cbnz	r0, 80088f8 <_dtoa_r+0x6f8>
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f7f8 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80088d0:	b110      	cbz	r0, 80088d8 <_dtoa_r+0x6d8>
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	07d9      	lsls	r1, r3, #31
 80088d6:	d40f      	bmi.n	80088f8 <_dtoa_r+0x6f8>
 80088d8:	4620      	mov	r0, r4
 80088da:	4659      	mov	r1, fp
 80088dc:	f000 ff42 	bl	8009764 <_Bfree>
 80088e0:	2300      	movs	r3, #0
 80088e2:	702b      	strb	r3, [r5, #0]
 80088e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088e6:	f10a 0001 	add.w	r0, sl, #1
 80088ea:	6018      	str	r0, [r3, #0]
 80088ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f43f acd8 	beq.w	80082a4 <_dtoa_r+0xa4>
 80088f4:	601d      	str	r5, [r3, #0]
 80088f6:	e4d5      	b.n	80082a4 <_dtoa_r+0xa4>
 80088f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80088fc:	462b      	mov	r3, r5
 80088fe:	461d      	mov	r5, r3
 8008900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008904:	2a39      	cmp	r2, #57	; 0x39
 8008906:	d108      	bne.n	800891a <_dtoa_r+0x71a>
 8008908:	9a00      	ldr	r2, [sp, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d1f7      	bne.n	80088fe <_dtoa_r+0x6fe>
 800890e:	9a07      	ldr	r2, [sp, #28]
 8008910:	9900      	ldr	r1, [sp, #0]
 8008912:	3201      	adds	r2, #1
 8008914:	9207      	str	r2, [sp, #28]
 8008916:	2230      	movs	r2, #48	; 0x30
 8008918:	700a      	strb	r2, [r1, #0]
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	3201      	adds	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	e78c      	b.n	800883c <_dtoa_r+0x63c>
 8008922:	4b7f      	ldr	r3, [pc, #508]	; (8008b20 <_dtoa_r+0x920>)
 8008924:	2200      	movs	r2, #0
 8008926:	f7f7 fe6f 	bl	8000608 <__aeabi_dmul>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	f7f8 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	d09b      	beq.n	8008872 <_dtoa_r+0x672>
 800893a:	e7cd      	b.n	80088d8 <_dtoa_r+0x6d8>
 800893c:	9a08      	ldr	r2, [sp, #32]
 800893e:	2a00      	cmp	r2, #0
 8008940:	f000 80c4 	beq.w	8008acc <_dtoa_r+0x8cc>
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	2a01      	cmp	r2, #1
 8008948:	f300 80a8 	bgt.w	8008a9c <_dtoa_r+0x89c>
 800894c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800894e:	2a00      	cmp	r2, #0
 8008950:	f000 80a0 	beq.w	8008a94 <_dtoa_r+0x894>
 8008954:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008958:	9e06      	ldr	r6, [sp, #24]
 800895a:	4645      	mov	r5, r8
 800895c:	9a04      	ldr	r2, [sp, #16]
 800895e:	2101      	movs	r1, #1
 8008960:	441a      	add	r2, r3
 8008962:	4620      	mov	r0, r4
 8008964:	4498      	add	r8, r3
 8008966:	9204      	str	r2, [sp, #16]
 8008968:	f001 f802 	bl	8009970 <__i2b>
 800896c:	4607      	mov	r7, r0
 800896e:	2d00      	cmp	r5, #0
 8008970:	dd0b      	ble.n	800898a <_dtoa_r+0x78a>
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd08      	ble.n	800898a <_dtoa_r+0x78a>
 8008978:	42ab      	cmp	r3, r5
 800897a:	9a04      	ldr	r2, [sp, #16]
 800897c:	bfa8      	it	ge
 800897e:	462b      	movge	r3, r5
 8008980:	eba8 0803 	sub.w	r8, r8, r3
 8008984:	1aed      	subs	r5, r5, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9b06      	ldr	r3, [sp, #24]
 800898c:	b1fb      	cbz	r3, 80089ce <_dtoa_r+0x7ce>
 800898e:	9b08      	ldr	r3, [sp, #32]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 809f 	beq.w	8008ad4 <_dtoa_r+0x8d4>
 8008996:	2e00      	cmp	r6, #0
 8008998:	dd11      	ble.n	80089be <_dtoa_r+0x7be>
 800899a:	4639      	mov	r1, r7
 800899c:	4632      	mov	r2, r6
 800899e:	4620      	mov	r0, r4
 80089a0:	f001 f8a2 	bl	8009ae8 <__pow5mult>
 80089a4:	465a      	mov	r2, fp
 80089a6:	4601      	mov	r1, r0
 80089a8:	4607      	mov	r7, r0
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fff6 	bl	800999c <__multiply>
 80089b0:	4659      	mov	r1, fp
 80089b2:	9007      	str	r0, [sp, #28]
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 fed5 	bl	8009764 <_Bfree>
 80089ba:	9b07      	ldr	r3, [sp, #28]
 80089bc:	469b      	mov	fp, r3
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	1b9a      	subs	r2, r3, r6
 80089c2:	d004      	beq.n	80089ce <_dtoa_r+0x7ce>
 80089c4:	4659      	mov	r1, fp
 80089c6:	4620      	mov	r0, r4
 80089c8:	f001 f88e 	bl	8009ae8 <__pow5mult>
 80089cc:	4683      	mov	fp, r0
 80089ce:	2101      	movs	r1, #1
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 ffcd 	bl	8009970 <__i2b>
 80089d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	4606      	mov	r6, r0
 80089dc:	dd7c      	ble.n	8008ad8 <_dtoa_r+0x8d8>
 80089de:	461a      	mov	r2, r3
 80089e0:	4601      	mov	r1, r0
 80089e2:	4620      	mov	r0, r4
 80089e4:	f001 f880 	bl	8009ae8 <__pow5mult>
 80089e8:	9b05      	ldr	r3, [sp, #20]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	4606      	mov	r6, r0
 80089ee:	dd76      	ble.n	8008ade <_dtoa_r+0x8de>
 80089f0:	2300      	movs	r3, #0
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	6933      	ldr	r3, [r6, #16]
 80089f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089fa:	6918      	ldr	r0, [r3, #16]
 80089fc:	f000 ff68 	bl	80098d0 <__hi0bits>
 8008a00:	f1c0 0020 	rsb	r0, r0, #32
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	4418      	add	r0, r3
 8008a08:	f010 001f 	ands.w	r0, r0, #31
 8008a0c:	f000 8086 	beq.w	8008b1c <_dtoa_r+0x91c>
 8008a10:	f1c0 0320 	rsb	r3, r0, #32
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	dd7f      	ble.n	8008b18 <_dtoa_r+0x918>
 8008a18:	f1c0 001c 	rsb	r0, r0, #28
 8008a1c:	9b04      	ldr	r3, [sp, #16]
 8008a1e:	4403      	add	r3, r0
 8008a20:	4480      	add	r8, r0
 8008a22:	4405      	add	r5, r0
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	f1b8 0f00 	cmp.w	r8, #0
 8008a2a:	dd05      	ble.n	8008a38 <_dtoa_r+0x838>
 8008a2c:	4659      	mov	r1, fp
 8008a2e:	4642      	mov	r2, r8
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 f8b3 	bl	8009b9c <__lshift>
 8008a36:	4683      	mov	fp, r0
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dd05      	ble.n	8008a4a <_dtoa_r+0x84a>
 8008a3e:	4631      	mov	r1, r6
 8008a40:	461a      	mov	r2, r3
 8008a42:	4620      	mov	r0, r4
 8008a44:	f001 f8aa 	bl	8009b9c <__lshift>
 8008a48:	4606      	mov	r6, r0
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d069      	beq.n	8008b24 <_dtoa_r+0x924>
 8008a50:	4631      	mov	r1, r6
 8008a52:	4658      	mov	r0, fp
 8008a54:	f001 f90e 	bl	8009c74 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	da63      	bge.n	8008b24 <_dtoa_r+0x924>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4659      	mov	r1, fp
 8008a60:	220a      	movs	r2, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fea0 	bl	80097a8 <__multadd>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a6e:	4683      	mov	fp, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 818f 	beq.w	8008d94 <_dtoa_r+0xb94>
 8008a76:	4639      	mov	r1, r7
 8008a78:	2300      	movs	r3, #0
 8008a7a:	220a      	movs	r2, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fe93 	bl	80097a8 <__multadd>
 8008a82:	f1b9 0f00 	cmp.w	r9, #0
 8008a86:	4607      	mov	r7, r0
 8008a88:	f300 808e 	bgt.w	8008ba8 <_dtoa_r+0x9a8>
 8008a8c:	9b05      	ldr	r3, [sp, #20]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	dc50      	bgt.n	8008b34 <_dtoa_r+0x934>
 8008a92:	e089      	b.n	8008ba8 <_dtoa_r+0x9a8>
 8008a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a9a:	e75d      	b.n	8008958 <_dtoa_r+0x758>
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	1e5e      	subs	r6, r3, #1
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	42b3      	cmp	r3, r6
 8008aa4:	bfbf      	itttt	lt
 8008aa6:	9b06      	ldrlt	r3, [sp, #24]
 8008aa8:	9606      	strlt	r6, [sp, #24]
 8008aaa:	1af2      	sublt	r2, r6, r3
 8008aac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008aae:	bfb6      	itet	lt
 8008ab0:	189b      	addlt	r3, r3, r2
 8008ab2:	1b9e      	subge	r6, r3, r6
 8008ab4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	bfb8      	it	lt
 8008aba:	2600      	movlt	r6, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bfb5      	itete	lt
 8008ac0:	eba8 0503 	sublt.w	r5, r8, r3
 8008ac4:	9b01      	ldrge	r3, [sp, #4]
 8008ac6:	2300      	movlt	r3, #0
 8008ac8:	4645      	movge	r5, r8
 8008aca:	e747      	b.n	800895c <_dtoa_r+0x75c>
 8008acc:	9e06      	ldr	r6, [sp, #24]
 8008ace:	9f08      	ldr	r7, [sp, #32]
 8008ad0:	4645      	mov	r5, r8
 8008ad2:	e74c      	b.n	800896e <_dtoa_r+0x76e>
 8008ad4:	9a06      	ldr	r2, [sp, #24]
 8008ad6:	e775      	b.n	80089c4 <_dtoa_r+0x7c4>
 8008ad8:	9b05      	ldr	r3, [sp, #20]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	dc18      	bgt.n	8008b10 <_dtoa_r+0x910>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	b9b3      	cbnz	r3, 8008b10 <_dtoa_r+0x910>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae8:	b9a3      	cbnz	r3, 8008b14 <_dtoa_r+0x914>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	051b      	lsls	r3, r3, #20
 8008af4:	b12b      	cbz	r3, 8008b02 <_dtoa_r+0x902>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	f108 0801 	add.w	r8, r8, #1
 8008b00:	2301      	movs	r3, #1
 8008b02:	9306      	str	r3, [sp, #24]
 8008b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f47f af74 	bne.w	80089f4 <_dtoa_r+0x7f4>
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	e779      	b.n	8008a04 <_dtoa_r+0x804>
 8008b10:	2300      	movs	r3, #0
 8008b12:	e7f6      	b.n	8008b02 <_dtoa_r+0x902>
 8008b14:	9b02      	ldr	r3, [sp, #8]
 8008b16:	e7f4      	b.n	8008b02 <_dtoa_r+0x902>
 8008b18:	d085      	beq.n	8008a26 <_dtoa_r+0x826>
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	301c      	adds	r0, #28
 8008b1e:	e77d      	b.n	8008a1c <_dtoa_r+0x81c>
 8008b20:	40240000 	.word	0x40240000
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	dc38      	bgt.n	8008b9c <_dtoa_r+0x99c>
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	dd35      	ble.n	8008b9c <_dtoa_r+0x99c>
 8008b30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b34:	f1b9 0f00 	cmp.w	r9, #0
 8008b38:	d10d      	bne.n	8008b56 <_dtoa_r+0x956>
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	464b      	mov	r3, r9
 8008b3e:	2205      	movs	r2, #5
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fe31 	bl	80097a8 <__multadd>
 8008b46:	4601      	mov	r1, r0
 8008b48:	4606      	mov	r6, r0
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f001 f892 	bl	8009c74 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f73f adbd 	bgt.w	80086d0 <_dtoa_r+0x4d0>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	9d00      	ldr	r5, [sp, #0]
 8008b5a:	ea6f 0a03 	mvn.w	sl, r3
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	4631      	mov	r1, r6
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fdfd 	bl	8009764 <_Bfree>
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	f43f aeb4 	beq.w	80088d8 <_dtoa_r+0x6d8>
 8008b70:	f1b8 0f00 	cmp.w	r8, #0
 8008b74:	d005      	beq.n	8008b82 <_dtoa_r+0x982>
 8008b76:	45b8      	cmp	r8, r7
 8008b78:	d003      	beq.n	8008b82 <_dtoa_r+0x982>
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fdf1 	bl	8009764 <_Bfree>
 8008b82:	4639      	mov	r1, r7
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fded 	bl	8009764 <_Bfree>
 8008b8a:	e6a5      	b.n	80088d8 <_dtoa_r+0x6d8>
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	4637      	mov	r7, r6
 8008b90:	e7e1      	b.n	8008b56 <_dtoa_r+0x956>
 8008b92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b98:	4637      	mov	r7, r6
 8008b9a:	e599      	b.n	80086d0 <_dtoa_r+0x4d0>
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80fd 	beq.w	8008da2 <_dtoa_r+0xba2>
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	dd05      	ble.n	8008bb8 <_dtoa_r+0x9b8>
 8008bac:	4639      	mov	r1, r7
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fff3 	bl	8009b9c <__lshift>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	9b06      	ldr	r3, [sp, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d05c      	beq.n	8008c78 <_dtoa_r+0xa78>
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fd8f 	bl	80096e4 <_Balloc>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <_dtoa_r+0x9d6>
 8008bca:	4b80      	ldr	r3, [pc, #512]	; (8008dcc <_dtoa_r+0xbcc>)
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bd2:	f7ff bb2e 	b.w	8008232 <_dtoa_r+0x32>
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f107 010c 	add.w	r1, r7, #12
 8008be0:	300c      	adds	r0, #12
 8008be2:	f7fd fcff 	bl	80065e4 <memcpy>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4629      	mov	r1, r5
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 ffd6 	bl	8009b9c <__lshift>
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	444b      	add	r3, r9
 8008bfa:	9307      	str	r3, [sp, #28]
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	46b8      	mov	r8, r7
 8008c04:	9306      	str	r3, [sp, #24]
 8008c06:	4607      	mov	r7, r0
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4658      	mov	r0, fp
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	f7ff fa67 	bl	80080e4 <quorem>
 8008c16:	4603      	mov	r3, r0
 8008c18:	3330      	adds	r3, #48	; 0x30
 8008c1a:	9004      	str	r0, [sp, #16]
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	4658      	mov	r0, fp
 8008c20:	9308      	str	r3, [sp, #32]
 8008c22:	f001 f827 	bl	8009c74 <__mcmp>
 8008c26:	463a      	mov	r2, r7
 8008c28:	4681      	mov	r9, r0
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f001 f83d 	bl	8009cac <__mdiff>
 8008c32:	68c2      	ldr	r2, [r0, #12]
 8008c34:	9b08      	ldr	r3, [sp, #32]
 8008c36:	4605      	mov	r5, r0
 8008c38:	bb02      	cbnz	r2, 8008c7c <_dtoa_r+0xa7c>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f001 f819 	bl	8009c74 <__mcmp>
 8008c42:	9b08      	ldr	r3, [sp, #32]
 8008c44:	4602      	mov	r2, r0
 8008c46:	4629      	mov	r1, r5
 8008c48:	4620      	mov	r0, r4
 8008c4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c4e:	f000 fd89 	bl	8009764 <_Bfree>
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c56:	9d01      	ldr	r5, [sp, #4]
 8008c58:	ea43 0102 	orr.w	r1, r3, r2
 8008c5c:	9b06      	ldr	r3, [sp, #24]
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	d10d      	bne.n	8008c80 <_dtoa_r+0xa80>
 8008c64:	2b39      	cmp	r3, #57	; 0x39
 8008c66:	d029      	beq.n	8008cbc <_dtoa_r+0xabc>
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	dd01      	ble.n	8008c72 <_dtoa_r+0xa72>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	3331      	adds	r3, #49	; 0x31
 8008c72:	9a02      	ldr	r2, [sp, #8]
 8008c74:	7013      	strb	r3, [r2, #0]
 8008c76:	e774      	b.n	8008b62 <_dtoa_r+0x962>
 8008c78:	4638      	mov	r0, r7
 8008c7a:	e7b9      	b.n	8008bf0 <_dtoa_r+0x9f0>
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	e7e2      	b.n	8008c46 <_dtoa_r+0xa46>
 8008c80:	f1b9 0f00 	cmp.w	r9, #0
 8008c84:	db06      	blt.n	8008c94 <_dtoa_r+0xa94>
 8008c86:	9905      	ldr	r1, [sp, #20]
 8008c88:	ea41 0909 	orr.w	r9, r1, r9
 8008c8c:	9906      	ldr	r1, [sp, #24]
 8008c8e:	ea59 0101 	orrs.w	r1, r9, r1
 8008c92:	d120      	bne.n	8008cd6 <_dtoa_r+0xad6>
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	ddec      	ble.n	8008c72 <_dtoa_r+0xa72>
 8008c98:	4659      	mov	r1, fp
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	f000 ff7c 	bl	8009b9c <__lshift>
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4683      	mov	fp, r0
 8008ca8:	f000 ffe4 	bl	8009c74 <__mcmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	dc02      	bgt.n	8008cb8 <_dtoa_r+0xab8>
 8008cb2:	d1de      	bne.n	8008c72 <_dtoa_r+0xa72>
 8008cb4:	07da      	lsls	r2, r3, #31
 8008cb6:	d5dc      	bpl.n	8008c72 <_dtoa_r+0xa72>
 8008cb8:	2b39      	cmp	r3, #57	; 0x39
 8008cba:	d1d8      	bne.n	8008c6e <_dtoa_r+0xa6e>
 8008cbc:	9a02      	ldr	r2, [sp, #8]
 8008cbe:	2339      	movs	r3, #57	; 0x39
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	462b      	mov	r3, r5
 8008cc4:	461d      	mov	r5, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ccc:	2a39      	cmp	r2, #57	; 0x39
 8008cce:	d050      	beq.n	8008d72 <_dtoa_r+0xb72>
 8008cd0:	3201      	adds	r2, #1
 8008cd2:	701a      	strb	r2, [r3, #0]
 8008cd4:	e745      	b.n	8008b62 <_dtoa_r+0x962>
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	dd03      	ble.n	8008ce2 <_dtoa_r+0xae2>
 8008cda:	2b39      	cmp	r3, #57	; 0x39
 8008cdc:	d0ee      	beq.n	8008cbc <_dtoa_r+0xabc>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	e7c7      	b.n	8008c72 <_dtoa_r+0xa72>
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	9907      	ldr	r1, [sp, #28]
 8008ce6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cea:	428a      	cmp	r2, r1
 8008cec:	d02a      	beq.n	8008d44 <_dtoa_r+0xb44>
 8008cee:	4659      	mov	r1, fp
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fd57 	bl	80097a8 <__multadd>
 8008cfa:	45b8      	cmp	r8, r7
 8008cfc:	4683      	mov	fp, r0
 8008cfe:	f04f 0300 	mov.w	r3, #0
 8008d02:	f04f 020a 	mov.w	r2, #10
 8008d06:	4641      	mov	r1, r8
 8008d08:	4620      	mov	r0, r4
 8008d0a:	d107      	bne.n	8008d1c <_dtoa_r+0xb1c>
 8008d0c:	f000 fd4c 	bl	80097a8 <__multadd>
 8008d10:	4680      	mov	r8, r0
 8008d12:	4607      	mov	r7, r0
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	3301      	adds	r3, #1
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	e775      	b.n	8008c08 <_dtoa_r+0xa08>
 8008d1c:	f000 fd44 	bl	80097a8 <__multadd>
 8008d20:	4639      	mov	r1, r7
 8008d22:	4680      	mov	r8, r0
 8008d24:	2300      	movs	r3, #0
 8008d26:	220a      	movs	r2, #10
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fd3d 	bl	80097a8 <__multadd>
 8008d2e:	4607      	mov	r7, r0
 8008d30:	e7f0      	b.n	8008d14 <_dtoa_r+0xb14>
 8008d32:	f1b9 0f00 	cmp.w	r9, #0
 8008d36:	9a00      	ldr	r2, [sp, #0]
 8008d38:	bfcc      	ite	gt
 8008d3a:	464d      	movgt	r5, r9
 8008d3c:	2501      	movle	r5, #1
 8008d3e:	4415      	add	r5, r2
 8008d40:	f04f 0800 	mov.w	r8, #0
 8008d44:	4659      	mov	r1, fp
 8008d46:	2201      	movs	r2, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	f000 ff26 	bl	8009b9c <__lshift>
 8008d50:	4631      	mov	r1, r6
 8008d52:	4683      	mov	fp, r0
 8008d54:	f000 ff8e 	bl	8009c74 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dcb2      	bgt.n	8008cc2 <_dtoa_r+0xac2>
 8008d5c:	d102      	bne.n	8008d64 <_dtoa_r+0xb64>
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	07db      	lsls	r3, r3, #31
 8008d62:	d4ae      	bmi.n	8008cc2 <_dtoa_r+0xac2>
 8008d64:	462b      	mov	r3, r5
 8008d66:	461d      	mov	r5, r3
 8008d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d6c:	2a30      	cmp	r2, #48	; 0x30
 8008d6e:	d0fa      	beq.n	8008d66 <_dtoa_r+0xb66>
 8008d70:	e6f7      	b.n	8008b62 <_dtoa_r+0x962>
 8008d72:	9a00      	ldr	r2, [sp, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d1a5      	bne.n	8008cc4 <_dtoa_r+0xac4>
 8008d78:	f10a 0a01 	add.w	sl, sl, #1
 8008d7c:	2331      	movs	r3, #49	; 0x31
 8008d7e:	e779      	b.n	8008c74 <_dtoa_r+0xa74>
 8008d80:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <_dtoa_r+0xbd0>)
 8008d82:	f7ff baaf 	b.w	80082e4 <_dtoa_r+0xe4>
 8008d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f aa86 	bne.w	800829a <_dtoa_r+0x9a>
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <_dtoa_r+0xbd4>)
 8008d90:	f7ff baa8 	b.w	80082e4 <_dtoa_r+0xe4>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	dc03      	bgt.n	8008da2 <_dtoa_r+0xba2>
 8008d9a:	9b05      	ldr	r3, [sp, #20]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	f73f aec9 	bgt.w	8008b34 <_dtoa_r+0x934>
 8008da2:	9d00      	ldr	r5, [sp, #0]
 8008da4:	4631      	mov	r1, r6
 8008da6:	4658      	mov	r0, fp
 8008da8:	f7ff f99c 	bl	80080e4 <quorem>
 8008dac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008db0:	f805 3b01 	strb.w	r3, [r5], #1
 8008db4:	9a00      	ldr	r2, [sp, #0]
 8008db6:	1aaa      	subs	r2, r5, r2
 8008db8:	4591      	cmp	r9, r2
 8008dba:	ddba      	ble.n	8008d32 <_dtoa_r+0xb32>
 8008dbc:	4659      	mov	r1, fp
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fcf0 	bl	80097a8 <__multadd>
 8008dc8:	4683      	mov	fp, r0
 8008dca:	e7eb      	b.n	8008da4 <_dtoa_r+0xba4>
 8008dcc:	0800b213 	.word	0x0800b213
 8008dd0:	0800b110 	.word	0x0800b110
 8008dd4:	0800b190 	.word	0x0800b190

08008dd8 <std>:
 8008dd8:	2300      	movs	r3, #0
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e9c0 3300 	strd	r3, r3, [r0]
 8008de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008de6:	6083      	str	r3, [r0, #8]
 8008de8:	8181      	strh	r1, [r0, #12]
 8008dea:	6643      	str	r3, [r0, #100]	; 0x64
 8008dec:	81c2      	strh	r2, [r0, #14]
 8008dee:	6183      	str	r3, [r0, #24]
 8008df0:	4619      	mov	r1, r3
 8008df2:	2208      	movs	r2, #8
 8008df4:	305c      	adds	r0, #92	; 0x5c
 8008df6:	f7fd fc03 	bl	8006600 <memset>
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x38>)
 8008dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <std+0x3c>)
 8008e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <std+0x40>)
 8008e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <std+0x44>)
 8008e08:	6224      	str	r4, [r4, #32]
 8008e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	0800a769 	.word	0x0800a769
 8008e14:	0800a78b 	.word	0x0800a78b
 8008e18:	0800a7c3 	.word	0x0800a7c3
 8008e1c:	0800a7e7 	.word	0x0800a7e7

08008e20 <_cleanup_r>:
 8008e20:	4901      	ldr	r1, [pc, #4]	; (8008e28 <_cleanup_r+0x8>)
 8008e22:	f000 b8af 	b.w	8008f84 <_fwalk_reent>
 8008e26:	bf00      	nop
 8008e28:	0800ab3d 	.word	0x0800ab3d

08008e2c <__sfmoreglue>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	1e4a      	subs	r2, r1, #1
 8008e30:	2568      	movs	r5, #104	; 0x68
 8008e32:	4355      	muls	r5, r2
 8008e34:	460e      	mov	r6, r1
 8008e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e3a:	f001 f96d 	bl	800a118 <_malloc_r>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	b140      	cbz	r0, 8008e54 <__sfmoreglue+0x28>
 8008e42:	2100      	movs	r1, #0
 8008e44:	e9c0 1600 	strd	r1, r6, [r0]
 8008e48:	300c      	adds	r0, #12
 8008e4a:	60a0      	str	r0, [r4, #8]
 8008e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e50:	f7fd fbd6 	bl	8006600 <memset>
 8008e54:	4620      	mov	r0, r4
 8008e56:	bd70      	pop	{r4, r5, r6, pc}

08008e58 <__sfp_lock_acquire>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__sfp_lock_acquire+0x8>)
 8008e5a:	f000 bc26 	b.w	80096aa <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20000370 	.word	0x20000370

08008e64 <__sfp_lock_release>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__sfp_lock_release+0x8>)
 8008e66:	f000 bc21 	b.w	80096ac <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20000370 	.word	0x20000370

08008e70 <__sinit_lock_acquire>:
 8008e70:	4801      	ldr	r0, [pc, #4]	; (8008e78 <__sinit_lock_acquire+0x8>)
 8008e72:	f000 bc1a 	b.w	80096aa <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	2000036b 	.word	0x2000036b

08008e7c <__sinit_lock_release>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	; (8008e84 <__sinit_lock_release+0x8>)
 8008e7e:	f000 bc15 	b.w	80096ac <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	2000036b 	.word	0x2000036b

08008e88 <__sinit>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	f7ff fff0 	bl	8008e70 <__sinit_lock_acquire>
 8008e90:	69a3      	ldr	r3, [r4, #24]
 8008e92:	b11b      	cbz	r3, 8008e9c <__sinit+0x14>
 8008e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e98:	f7ff bff0 	b.w	8008e7c <__sinit_lock_release>
 8008e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <__sinit+0x68>)
 8008ea4:	4a13      	ldr	r2, [pc, #76]	; (8008ef4 <__sinit+0x6c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	bf04      	itt	eq
 8008eae:	2301      	moveq	r3, #1
 8008eb0:	61a3      	streq	r3, [r4, #24]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 f820 	bl	8008ef8 <__sfp>
 8008eb8:	6060      	str	r0, [r4, #4]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f81c 	bl	8008ef8 <__sfp>
 8008ec0:	60a0      	str	r0, [r4, #8]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 f818 	bl	8008ef8 <__sfp>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	60e0      	str	r0, [r4, #12]
 8008ecc:	2104      	movs	r1, #4
 8008ece:	6860      	ldr	r0, [r4, #4]
 8008ed0:	f7ff ff82 	bl	8008dd8 <std>
 8008ed4:	68a0      	ldr	r0, [r4, #8]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2109      	movs	r1, #9
 8008eda:	f7ff ff7d 	bl	8008dd8 <std>
 8008ede:	68e0      	ldr	r0, [r4, #12]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	2112      	movs	r1, #18
 8008ee4:	f7ff ff78 	bl	8008dd8 <std>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	61a3      	str	r3, [r4, #24]
 8008eec:	e7d2      	b.n	8008e94 <__sinit+0xc>
 8008eee:	bf00      	nop
 8008ef0:	0800b0fc 	.word	0x0800b0fc
 8008ef4:	08008e21 	.word	0x08008e21

08008ef8 <__sfp>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	4607      	mov	r7, r0
 8008efc:	f7ff ffac 	bl	8008e58 <__sfp_lock_acquire>
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <__sfp+0x84>)
 8008f02:	681e      	ldr	r6, [r3, #0]
 8008f04:	69b3      	ldr	r3, [r6, #24]
 8008f06:	b913      	cbnz	r3, 8008f0e <__sfp+0x16>
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7ff ffbd 	bl	8008e88 <__sinit>
 8008f0e:	3648      	adds	r6, #72	; 0x48
 8008f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	d503      	bpl.n	8008f20 <__sfp+0x28>
 8008f18:	6833      	ldr	r3, [r6, #0]
 8008f1a:	b30b      	cbz	r3, 8008f60 <__sfp+0x68>
 8008f1c:	6836      	ldr	r6, [r6, #0]
 8008f1e:	e7f7      	b.n	8008f10 <__sfp+0x18>
 8008f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f24:	b9d5      	cbnz	r5, 8008f5c <__sfp+0x64>
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <__sfp+0x88>)
 8008f28:	60e3      	str	r3, [r4, #12]
 8008f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f30:	f000 fbba 	bl	80096a8 <__retarget_lock_init_recursive>
 8008f34:	f7ff ff96 	bl	8008e64 <__sfp_lock_release>
 8008f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f40:	6025      	str	r5, [r4, #0]
 8008f42:	61a5      	str	r5, [r4, #24]
 8008f44:	2208      	movs	r2, #8
 8008f46:	4629      	mov	r1, r5
 8008f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f4c:	f7fd fb58 	bl	8006600 <memset>
 8008f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f58:	4620      	mov	r0, r4
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5c:	3468      	adds	r4, #104	; 0x68
 8008f5e:	e7d9      	b.n	8008f14 <__sfp+0x1c>
 8008f60:	2104      	movs	r1, #4
 8008f62:	4638      	mov	r0, r7
 8008f64:	f7ff ff62 	bl	8008e2c <__sfmoreglue>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	6030      	str	r0, [r6, #0]
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1d5      	bne.n	8008f1c <__sfp+0x24>
 8008f70:	f7ff ff78 	bl	8008e64 <__sfp_lock_release>
 8008f74:	230c      	movs	r3, #12
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	e7ee      	b.n	8008f58 <__sfp+0x60>
 8008f7a:	bf00      	nop
 8008f7c:	0800b0fc 	.word	0x0800b0fc
 8008f80:	ffff0001 	.word	0xffff0001

08008f84 <_fwalk_reent>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4606      	mov	r6, r0
 8008f8a:	4688      	mov	r8, r1
 8008f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f90:	2700      	movs	r7, #0
 8008f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f96:	f1b9 0901 	subs.w	r9, r9, #1
 8008f9a:	d505      	bpl.n	8008fa8 <_fwalk_reent+0x24>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	d1f7      	bne.n	8008f92 <_fwalk_reent+0xe>
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa8:	89ab      	ldrh	r3, [r5, #12]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d907      	bls.n	8008fbe <_fwalk_reent+0x3a>
 8008fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	d003      	beq.n	8008fbe <_fwalk_reent+0x3a>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4630      	mov	r0, r6
 8008fba:	47c0      	blx	r8
 8008fbc:	4307      	orrs	r7, r0
 8008fbe:	3568      	adds	r5, #104	; 0x68
 8008fc0:	e7e9      	b.n	8008f96 <_fwalk_reent+0x12>

08008fc2 <rshift>:
 8008fc2:	6903      	ldr	r3, [r0, #16]
 8008fc4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fd0:	f100 0414 	add.w	r4, r0, #20
 8008fd4:	dd45      	ble.n	8009062 <rshift+0xa0>
 8008fd6:	f011 011f 	ands.w	r1, r1, #31
 8008fda:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fde:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fe2:	d10c      	bne.n	8008ffe <rshift+0x3c>
 8008fe4:	f100 0710 	add.w	r7, r0, #16
 8008fe8:	4629      	mov	r1, r5
 8008fea:	42b1      	cmp	r1, r6
 8008fec:	d334      	bcc.n	8009058 <rshift+0x96>
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	1eea      	subs	r2, r5, #3
 8008ff4:	4296      	cmp	r6, r2
 8008ff6:	bf38      	it	cc
 8008ff8:	2300      	movcc	r3, #0
 8008ffa:	4423      	add	r3, r4
 8008ffc:	e015      	b.n	800902a <rshift+0x68>
 8008ffe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009002:	f1c1 0820 	rsb	r8, r1, #32
 8009006:	40cf      	lsrs	r7, r1
 8009008:	f105 0e04 	add.w	lr, r5, #4
 800900c:	46a1      	mov	r9, r4
 800900e:	4576      	cmp	r6, lr
 8009010:	46f4      	mov	ip, lr
 8009012:	d815      	bhi.n	8009040 <rshift+0x7e>
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	009a      	lsls	r2, r3, #2
 8009018:	3a04      	subs	r2, #4
 800901a:	3501      	adds	r5, #1
 800901c:	42ae      	cmp	r6, r5
 800901e:	bf38      	it	cc
 8009020:	2200      	movcc	r2, #0
 8009022:	18a3      	adds	r3, r4, r2
 8009024:	50a7      	str	r7, [r4, r2]
 8009026:	b107      	cbz	r7, 800902a <rshift+0x68>
 8009028:	3304      	adds	r3, #4
 800902a:	1b1a      	subs	r2, r3, r4
 800902c:	42a3      	cmp	r3, r4
 800902e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009032:	bf08      	it	eq
 8009034:	2300      	moveq	r3, #0
 8009036:	6102      	str	r2, [r0, #16]
 8009038:	bf08      	it	eq
 800903a:	6143      	streq	r3, [r0, #20]
 800903c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009040:	f8dc c000 	ldr.w	ip, [ip]
 8009044:	fa0c fc08 	lsl.w	ip, ip, r8
 8009048:	ea4c 0707 	orr.w	r7, ip, r7
 800904c:	f849 7b04 	str.w	r7, [r9], #4
 8009050:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009054:	40cf      	lsrs	r7, r1
 8009056:	e7da      	b.n	800900e <rshift+0x4c>
 8009058:	f851 cb04 	ldr.w	ip, [r1], #4
 800905c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009060:	e7c3      	b.n	8008fea <rshift+0x28>
 8009062:	4623      	mov	r3, r4
 8009064:	e7e1      	b.n	800902a <rshift+0x68>

08009066 <__hexdig_fun>:
 8009066:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800906a:	2b09      	cmp	r3, #9
 800906c:	d802      	bhi.n	8009074 <__hexdig_fun+0xe>
 800906e:	3820      	subs	r0, #32
 8009070:	b2c0      	uxtb	r0, r0
 8009072:	4770      	bx	lr
 8009074:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009078:	2b05      	cmp	r3, #5
 800907a:	d801      	bhi.n	8009080 <__hexdig_fun+0x1a>
 800907c:	3847      	subs	r0, #71	; 0x47
 800907e:	e7f7      	b.n	8009070 <__hexdig_fun+0xa>
 8009080:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009084:	2b05      	cmp	r3, #5
 8009086:	d801      	bhi.n	800908c <__hexdig_fun+0x26>
 8009088:	3827      	subs	r0, #39	; 0x27
 800908a:	e7f1      	b.n	8009070 <__hexdig_fun+0xa>
 800908c:	2000      	movs	r0, #0
 800908e:	4770      	bx	lr

08009090 <__gethex>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ed2d 8b02 	vpush	{d8}
 8009098:	b089      	sub	sp, #36	; 0x24
 800909a:	ee08 0a10 	vmov	s16, r0
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	4bbc      	ldr	r3, [pc, #752]	; (8009394 <__gethex+0x304>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	4618      	mov	r0, r3
 80090a8:	468b      	mov	fp, r1
 80090aa:	4690      	mov	r8, r2
 80090ac:	f7f7 f898 	bl	80001e0 <strlen>
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	f8db 2000 	ldr.w	r2, [fp]
 80090b6:	4403      	add	r3, r0
 80090b8:	4682      	mov	sl, r0
 80090ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090be:	9305      	str	r3, [sp, #20]
 80090c0:	1c93      	adds	r3, r2, #2
 80090c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80090c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80090ca:	32fe      	adds	r2, #254	; 0xfe
 80090cc:	18d1      	adds	r1, r2, r3
 80090ce:	461f      	mov	r7, r3
 80090d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80090d4:	9100      	str	r1, [sp, #0]
 80090d6:	2830      	cmp	r0, #48	; 0x30
 80090d8:	d0f8      	beq.n	80090cc <__gethex+0x3c>
 80090da:	f7ff ffc4 	bl	8009066 <__hexdig_fun>
 80090de:	4604      	mov	r4, r0
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d13a      	bne.n	800915a <__gethex+0xca>
 80090e4:	9901      	ldr	r1, [sp, #4]
 80090e6:	4652      	mov	r2, sl
 80090e8:	4638      	mov	r0, r7
 80090ea:	f001 fb80 	bl	800a7ee <strncmp>
 80090ee:	4605      	mov	r5, r0
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d168      	bne.n	80091c6 <__gethex+0x136>
 80090f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80090f8:	eb07 060a 	add.w	r6, r7, sl
 80090fc:	f7ff ffb3 	bl	8009066 <__hexdig_fun>
 8009100:	2800      	cmp	r0, #0
 8009102:	d062      	beq.n	80091ca <__gethex+0x13a>
 8009104:	4633      	mov	r3, r6
 8009106:	7818      	ldrb	r0, [r3, #0]
 8009108:	2830      	cmp	r0, #48	; 0x30
 800910a:	461f      	mov	r7, r3
 800910c:	f103 0301 	add.w	r3, r3, #1
 8009110:	d0f9      	beq.n	8009106 <__gethex+0x76>
 8009112:	f7ff ffa8 	bl	8009066 <__hexdig_fun>
 8009116:	2301      	movs	r3, #1
 8009118:	fab0 f480 	clz	r4, r0
 800911c:	0964      	lsrs	r4, r4, #5
 800911e:	4635      	mov	r5, r6
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	463a      	mov	r2, r7
 8009124:	4616      	mov	r6, r2
 8009126:	3201      	adds	r2, #1
 8009128:	7830      	ldrb	r0, [r6, #0]
 800912a:	f7ff ff9c 	bl	8009066 <__hexdig_fun>
 800912e:	2800      	cmp	r0, #0
 8009130:	d1f8      	bne.n	8009124 <__gethex+0x94>
 8009132:	9901      	ldr	r1, [sp, #4]
 8009134:	4652      	mov	r2, sl
 8009136:	4630      	mov	r0, r6
 8009138:	f001 fb59 	bl	800a7ee <strncmp>
 800913c:	b980      	cbnz	r0, 8009160 <__gethex+0xd0>
 800913e:	b94d      	cbnz	r5, 8009154 <__gethex+0xc4>
 8009140:	eb06 050a 	add.w	r5, r6, sl
 8009144:	462a      	mov	r2, r5
 8009146:	4616      	mov	r6, r2
 8009148:	3201      	adds	r2, #1
 800914a:	7830      	ldrb	r0, [r6, #0]
 800914c:	f7ff ff8b 	bl	8009066 <__hexdig_fun>
 8009150:	2800      	cmp	r0, #0
 8009152:	d1f8      	bne.n	8009146 <__gethex+0xb6>
 8009154:	1bad      	subs	r5, r5, r6
 8009156:	00ad      	lsls	r5, r5, #2
 8009158:	e004      	b.n	8009164 <__gethex+0xd4>
 800915a:	2400      	movs	r4, #0
 800915c:	4625      	mov	r5, r4
 800915e:	e7e0      	b.n	8009122 <__gethex+0x92>
 8009160:	2d00      	cmp	r5, #0
 8009162:	d1f7      	bne.n	8009154 <__gethex+0xc4>
 8009164:	7833      	ldrb	r3, [r6, #0]
 8009166:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800916a:	2b50      	cmp	r3, #80	; 0x50
 800916c:	d13b      	bne.n	80091e6 <__gethex+0x156>
 800916e:	7873      	ldrb	r3, [r6, #1]
 8009170:	2b2b      	cmp	r3, #43	; 0x2b
 8009172:	d02c      	beq.n	80091ce <__gethex+0x13e>
 8009174:	2b2d      	cmp	r3, #45	; 0x2d
 8009176:	d02e      	beq.n	80091d6 <__gethex+0x146>
 8009178:	1c71      	adds	r1, r6, #1
 800917a:	f04f 0900 	mov.w	r9, #0
 800917e:	7808      	ldrb	r0, [r1, #0]
 8009180:	f7ff ff71 	bl	8009066 <__hexdig_fun>
 8009184:	1e43      	subs	r3, r0, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b18      	cmp	r3, #24
 800918a:	d82c      	bhi.n	80091e6 <__gethex+0x156>
 800918c:	f1a0 0210 	sub.w	r2, r0, #16
 8009190:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009194:	f7ff ff67 	bl	8009066 <__hexdig_fun>
 8009198:	1e43      	subs	r3, r0, #1
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b18      	cmp	r3, #24
 800919e:	d91d      	bls.n	80091dc <__gethex+0x14c>
 80091a0:	f1b9 0f00 	cmp.w	r9, #0
 80091a4:	d000      	beq.n	80091a8 <__gethex+0x118>
 80091a6:	4252      	negs	r2, r2
 80091a8:	4415      	add	r5, r2
 80091aa:	f8cb 1000 	str.w	r1, [fp]
 80091ae:	b1e4      	cbz	r4, 80091ea <__gethex+0x15a>
 80091b0:	9b00      	ldr	r3, [sp, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bf14      	ite	ne
 80091b6:	2700      	movne	r7, #0
 80091b8:	2706      	moveq	r7, #6
 80091ba:	4638      	mov	r0, r7
 80091bc:	b009      	add	sp, #36	; 0x24
 80091be:	ecbd 8b02 	vpop	{d8}
 80091c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c6:	463e      	mov	r6, r7
 80091c8:	4625      	mov	r5, r4
 80091ca:	2401      	movs	r4, #1
 80091cc:	e7ca      	b.n	8009164 <__gethex+0xd4>
 80091ce:	f04f 0900 	mov.w	r9, #0
 80091d2:	1cb1      	adds	r1, r6, #2
 80091d4:	e7d3      	b.n	800917e <__gethex+0xee>
 80091d6:	f04f 0901 	mov.w	r9, #1
 80091da:	e7fa      	b.n	80091d2 <__gethex+0x142>
 80091dc:	230a      	movs	r3, #10
 80091de:	fb03 0202 	mla	r2, r3, r2, r0
 80091e2:	3a10      	subs	r2, #16
 80091e4:	e7d4      	b.n	8009190 <__gethex+0x100>
 80091e6:	4631      	mov	r1, r6
 80091e8:	e7df      	b.n	80091aa <__gethex+0x11a>
 80091ea:	1bf3      	subs	r3, r6, r7
 80091ec:	3b01      	subs	r3, #1
 80091ee:	4621      	mov	r1, r4
 80091f0:	2b07      	cmp	r3, #7
 80091f2:	dc0b      	bgt.n	800920c <__gethex+0x17c>
 80091f4:	ee18 0a10 	vmov	r0, s16
 80091f8:	f000 fa74 	bl	80096e4 <_Balloc>
 80091fc:	4604      	mov	r4, r0
 80091fe:	b940      	cbnz	r0, 8009212 <__gethex+0x182>
 8009200:	4b65      	ldr	r3, [pc, #404]	; (8009398 <__gethex+0x308>)
 8009202:	4602      	mov	r2, r0
 8009204:	21de      	movs	r1, #222	; 0xde
 8009206:	4865      	ldr	r0, [pc, #404]	; (800939c <__gethex+0x30c>)
 8009208:	f001 fbe4 	bl	800a9d4 <__assert_func>
 800920c:	3101      	adds	r1, #1
 800920e:	105b      	asrs	r3, r3, #1
 8009210:	e7ee      	b.n	80091f0 <__gethex+0x160>
 8009212:	f100 0914 	add.w	r9, r0, #20
 8009216:	f04f 0b00 	mov.w	fp, #0
 800921a:	f1ca 0301 	rsb	r3, sl, #1
 800921e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009222:	f8cd b000 	str.w	fp, [sp]
 8009226:	9306      	str	r3, [sp, #24]
 8009228:	42b7      	cmp	r7, r6
 800922a:	d340      	bcc.n	80092ae <__gethex+0x21e>
 800922c:	9802      	ldr	r0, [sp, #8]
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	f840 3b04 	str.w	r3, [r0], #4
 8009234:	eba0 0009 	sub.w	r0, r0, r9
 8009238:	1080      	asrs	r0, r0, #2
 800923a:	0146      	lsls	r6, r0, #5
 800923c:	6120      	str	r0, [r4, #16]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fb46 	bl	80098d0 <__hi0bits>
 8009244:	1a30      	subs	r0, r6, r0
 8009246:	f8d8 6000 	ldr.w	r6, [r8]
 800924a:	42b0      	cmp	r0, r6
 800924c:	dd63      	ble.n	8009316 <__gethex+0x286>
 800924e:	1b87      	subs	r7, r0, r6
 8009250:	4639      	mov	r1, r7
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fee0 	bl	800a018 <__any_on>
 8009258:	4682      	mov	sl, r0
 800925a:	b1a8      	cbz	r0, 8009288 <__gethex+0x1f8>
 800925c:	1e7b      	subs	r3, r7, #1
 800925e:	1159      	asrs	r1, r3, #5
 8009260:	f003 021f 	and.w	r2, r3, #31
 8009264:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009268:	f04f 0a01 	mov.w	sl, #1
 800926c:	fa0a f202 	lsl.w	r2, sl, r2
 8009270:	420a      	tst	r2, r1
 8009272:	d009      	beq.n	8009288 <__gethex+0x1f8>
 8009274:	4553      	cmp	r3, sl
 8009276:	dd05      	ble.n	8009284 <__gethex+0x1f4>
 8009278:	1eb9      	subs	r1, r7, #2
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fecc 	bl	800a018 <__any_on>
 8009280:	2800      	cmp	r0, #0
 8009282:	d145      	bne.n	8009310 <__gethex+0x280>
 8009284:	f04f 0a02 	mov.w	sl, #2
 8009288:	4639      	mov	r1, r7
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff fe99 	bl	8008fc2 <rshift>
 8009290:	443d      	add	r5, r7
 8009292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009296:	42ab      	cmp	r3, r5
 8009298:	da4c      	bge.n	8009334 <__gethex+0x2a4>
 800929a:	ee18 0a10 	vmov	r0, s16
 800929e:	4621      	mov	r1, r4
 80092a0:	f000 fa60 	bl	8009764 <_Bfree>
 80092a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092a6:	2300      	movs	r3, #0
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	27a3      	movs	r7, #163	; 0xa3
 80092ac:	e785      	b.n	80091ba <__gethex+0x12a>
 80092ae:	1e73      	subs	r3, r6, #1
 80092b0:	9a05      	ldr	r2, [sp, #20]
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d019      	beq.n	80092f0 <__gethex+0x260>
 80092bc:	f1bb 0f20 	cmp.w	fp, #32
 80092c0:	d107      	bne.n	80092d2 <__gethex+0x242>
 80092c2:	9b02      	ldr	r3, [sp, #8]
 80092c4:	9a00      	ldr	r2, [sp, #0]
 80092c6:	f843 2b04 	str.w	r2, [r3], #4
 80092ca:	9302      	str	r3, [sp, #8]
 80092cc:	2300      	movs	r3, #0
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	469b      	mov	fp, r3
 80092d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80092d6:	f7ff fec6 	bl	8009066 <__hexdig_fun>
 80092da:	9b00      	ldr	r3, [sp, #0]
 80092dc:	f000 000f 	and.w	r0, r0, #15
 80092e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80092e4:	4303      	orrs	r3, r0
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	f10b 0b04 	add.w	fp, fp, #4
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	e00d      	b.n	800930c <__gethex+0x27c>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	9a06      	ldr	r2, [sp, #24]
 80092f4:	4413      	add	r3, r2
 80092f6:	42bb      	cmp	r3, r7
 80092f8:	d3e0      	bcc.n	80092bc <__gethex+0x22c>
 80092fa:	4618      	mov	r0, r3
 80092fc:	9901      	ldr	r1, [sp, #4]
 80092fe:	9307      	str	r3, [sp, #28]
 8009300:	4652      	mov	r2, sl
 8009302:	f001 fa74 	bl	800a7ee <strncmp>
 8009306:	9b07      	ldr	r3, [sp, #28]
 8009308:	2800      	cmp	r0, #0
 800930a:	d1d7      	bne.n	80092bc <__gethex+0x22c>
 800930c:	461e      	mov	r6, r3
 800930e:	e78b      	b.n	8009228 <__gethex+0x198>
 8009310:	f04f 0a03 	mov.w	sl, #3
 8009314:	e7b8      	b.n	8009288 <__gethex+0x1f8>
 8009316:	da0a      	bge.n	800932e <__gethex+0x29e>
 8009318:	1a37      	subs	r7, r6, r0
 800931a:	4621      	mov	r1, r4
 800931c:	ee18 0a10 	vmov	r0, s16
 8009320:	463a      	mov	r2, r7
 8009322:	f000 fc3b 	bl	8009b9c <__lshift>
 8009326:	1bed      	subs	r5, r5, r7
 8009328:	4604      	mov	r4, r0
 800932a:	f100 0914 	add.w	r9, r0, #20
 800932e:	f04f 0a00 	mov.w	sl, #0
 8009332:	e7ae      	b.n	8009292 <__gethex+0x202>
 8009334:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009338:	42a8      	cmp	r0, r5
 800933a:	dd72      	ble.n	8009422 <__gethex+0x392>
 800933c:	1b45      	subs	r5, r0, r5
 800933e:	42ae      	cmp	r6, r5
 8009340:	dc36      	bgt.n	80093b0 <__gethex+0x320>
 8009342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009346:	2b02      	cmp	r3, #2
 8009348:	d02a      	beq.n	80093a0 <__gethex+0x310>
 800934a:	2b03      	cmp	r3, #3
 800934c:	d02c      	beq.n	80093a8 <__gethex+0x318>
 800934e:	2b01      	cmp	r3, #1
 8009350:	d115      	bne.n	800937e <__gethex+0x2ee>
 8009352:	42ae      	cmp	r6, r5
 8009354:	d113      	bne.n	800937e <__gethex+0x2ee>
 8009356:	2e01      	cmp	r6, #1
 8009358:	d10b      	bne.n	8009372 <__gethex+0x2e2>
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	2301      	movs	r3, #1
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	f8c9 3000 	str.w	r3, [r9]
 800936a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800936c:	2762      	movs	r7, #98	; 0x62
 800936e:	601c      	str	r4, [r3, #0]
 8009370:	e723      	b.n	80091ba <__gethex+0x12a>
 8009372:	1e71      	subs	r1, r6, #1
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fe4f 	bl	800a018 <__any_on>
 800937a:	2800      	cmp	r0, #0
 800937c:	d1ed      	bne.n	800935a <__gethex+0x2ca>
 800937e:	ee18 0a10 	vmov	r0, s16
 8009382:	4621      	mov	r1, r4
 8009384:	f000 f9ee 	bl	8009764 <_Bfree>
 8009388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800938a:	2300      	movs	r3, #0
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	2750      	movs	r7, #80	; 0x50
 8009390:	e713      	b.n	80091ba <__gethex+0x12a>
 8009392:	bf00      	nop
 8009394:	0800b2f0 	.word	0x0800b2f0
 8009398:	0800b213 	.word	0x0800b213
 800939c:	0800b284 	.word	0x0800b284
 80093a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1eb      	bne.n	800937e <__gethex+0x2ee>
 80093a6:	e7d8      	b.n	800935a <__gethex+0x2ca>
 80093a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1d5      	bne.n	800935a <__gethex+0x2ca>
 80093ae:	e7e6      	b.n	800937e <__gethex+0x2ee>
 80093b0:	1e6f      	subs	r7, r5, #1
 80093b2:	f1ba 0f00 	cmp.w	sl, #0
 80093b6:	d131      	bne.n	800941c <__gethex+0x38c>
 80093b8:	b127      	cbz	r7, 80093c4 <__gethex+0x334>
 80093ba:	4639      	mov	r1, r7
 80093bc:	4620      	mov	r0, r4
 80093be:	f000 fe2b 	bl	800a018 <__any_on>
 80093c2:	4682      	mov	sl, r0
 80093c4:	117b      	asrs	r3, r7, #5
 80093c6:	2101      	movs	r1, #1
 80093c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80093cc:	f007 071f 	and.w	r7, r7, #31
 80093d0:	fa01 f707 	lsl.w	r7, r1, r7
 80093d4:	421f      	tst	r7, r3
 80093d6:	4629      	mov	r1, r5
 80093d8:	4620      	mov	r0, r4
 80093da:	bf18      	it	ne
 80093dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80093e0:	1b76      	subs	r6, r6, r5
 80093e2:	f7ff fdee 	bl	8008fc2 <rshift>
 80093e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80093ea:	2702      	movs	r7, #2
 80093ec:	f1ba 0f00 	cmp.w	sl, #0
 80093f0:	d048      	beq.n	8009484 <__gethex+0x3f4>
 80093f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d015      	beq.n	8009426 <__gethex+0x396>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d017      	beq.n	800942e <__gethex+0x39e>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d109      	bne.n	8009416 <__gethex+0x386>
 8009402:	f01a 0f02 	tst.w	sl, #2
 8009406:	d006      	beq.n	8009416 <__gethex+0x386>
 8009408:	f8d9 0000 	ldr.w	r0, [r9]
 800940c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009410:	f01a 0f01 	tst.w	sl, #1
 8009414:	d10e      	bne.n	8009434 <__gethex+0x3a4>
 8009416:	f047 0710 	orr.w	r7, r7, #16
 800941a:	e033      	b.n	8009484 <__gethex+0x3f4>
 800941c:	f04f 0a01 	mov.w	sl, #1
 8009420:	e7d0      	b.n	80093c4 <__gethex+0x334>
 8009422:	2701      	movs	r7, #1
 8009424:	e7e2      	b.n	80093ec <__gethex+0x35c>
 8009426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009428:	f1c3 0301 	rsb	r3, r3, #1
 800942c:	9315      	str	r3, [sp, #84]	; 0x54
 800942e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f0      	beq.n	8009416 <__gethex+0x386>
 8009434:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009438:	f104 0314 	add.w	r3, r4, #20
 800943c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009440:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009444:	f04f 0c00 	mov.w	ip, #0
 8009448:	4618      	mov	r0, r3
 800944a:	f853 2b04 	ldr.w	r2, [r3], #4
 800944e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009452:	d01c      	beq.n	800948e <__gethex+0x3fe>
 8009454:	3201      	adds	r2, #1
 8009456:	6002      	str	r2, [r0, #0]
 8009458:	2f02      	cmp	r7, #2
 800945a:	f104 0314 	add.w	r3, r4, #20
 800945e:	d13f      	bne.n	80094e0 <__gethex+0x450>
 8009460:	f8d8 2000 	ldr.w	r2, [r8]
 8009464:	3a01      	subs	r2, #1
 8009466:	42b2      	cmp	r2, r6
 8009468:	d10a      	bne.n	8009480 <__gethex+0x3f0>
 800946a:	1171      	asrs	r1, r6, #5
 800946c:	2201      	movs	r2, #1
 800946e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009472:	f006 061f 	and.w	r6, r6, #31
 8009476:	fa02 f606 	lsl.w	r6, r2, r6
 800947a:	421e      	tst	r6, r3
 800947c:	bf18      	it	ne
 800947e:	4617      	movne	r7, r2
 8009480:	f047 0720 	orr.w	r7, r7, #32
 8009484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009486:	601c      	str	r4, [r3, #0]
 8009488:	9b04      	ldr	r3, [sp, #16]
 800948a:	601d      	str	r5, [r3, #0]
 800948c:	e695      	b.n	80091ba <__gethex+0x12a>
 800948e:	4299      	cmp	r1, r3
 8009490:	f843 cc04 	str.w	ip, [r3, #-4]
 8009494:	d8d8      	bhi.n	8009448 <__gethex+0x3b8>
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	459b      	cmp	fp, r3
 800949a:	db19      	blt.n	80094d0 <__gethex+0x440>
 800949c:	6861      	ldr	r1, [r4, #4]
 800949e:	ee18 0a10 	vmov	r0, s16
 80094a2:	3101      	adds	r1, #1
 80094a4:	f000 f91e 	bl	80096e4 <_Balloc>
 80094a8:	4681      	mov	r9, r0
 80094aa:	b918      	cbnz	r0, 80094b4 <__gethex+0x424>
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <__gethex+0x488>)
 80094ae:	4602      	mov	r2, r0
 80094b0:	2184      	movs	r1, #132	; 0x84
 80094b2:	e6a8      	b.n	8009206 <__gethex+0x176>
 80094b4:	6922      	ldr	r2, [r4, #16]
 80094b6:	3202      	adds	r2, #2
 80094b8:	f104 010c 	add.w	r1, r4, #12
 80094bc:	0092      	lsls	r2, r2, #2
 80094be:	300c      	adds	r0, #12
 80094c0:	f7fd f890 	bl	80065e4 <memcpy>
 80094c4:	4621      	mov	r1, r4
 80094c6:	ee18 0a10 	vmov	r0, s16
 80094ca:	f000 f94b 	bl	8009764 <_Bfree>
 80094ce:	464c      	mov	r4, r9
 80094d0:	6923      	ldr	r3, [r4, #16]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094d8:	6122      	str	r2, [r4, #16]
 80094da:	2201      	movs	r2, #1
 80094dc:	615a      	str	r2, [r3, #20]
 80094de:	e7bb      	b.n	8009458 <__gethex+0x3c8>
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	455a      	cmp	r2, fp
 80094e4:	dd0b      	ble.n	80094fe <__gethex+0x46e>
 80094e6:	2101      	movs	r1, #1
 80094e8:	4620      	mov	r0, r4
 80094ea:	f7ff fd6a 	bl	8008fc2 <rshift>
 80094ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094f2:	3501      	adds	r5, #1
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	f6ff aed0 	blt.w	800929a <__gethex+0x20a>
 80094fa:	2701      	movs	r7, #1
 80094fc:	e7c0      	b.n	8009480 <__gethex+0x3f0>
 80094fe:	f016 061f 	ands.w	r6, r6, #31
 8009502:	d0fa      	beq.n	80094fa <__gethex+0x46a>
 8009504:	449a      	add	sl, r3
 8009506:	f1c6 0620 	rsb	r6, r6, #32
 800950a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800950e:	f000 f9df 	bl	80098d0 <__hi0bits>
 8009512:	42b0      	cmp	r0, r6
 8009514:	dbe7      	blt.n	80094e6 <__gethex+0x456>
 8009516:	e7f0      	b.n	80094fa <__gethex+0x46a>
 8009518:	0800b213 	.word	0x0800b213

0800951c <L_shift>:
 800951c:	f1c2 0208 	rsb	r2, r2, #8
 8009520:	0092      	lsls	r2, r2, #2
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	f1c2 0620 	rsb	r6, r2, #32
 8009528:	6843      	ldr	r3, [r0, #4]
 800952a:	6804      	ldr	r4, [r0, #0]
 800952c:	fa03 f506 	lsl.w	r5, r3, r6
 8009530:	432c      	orrs	r4, r5
 8009532:	40d3      	lsrs	r3, r2
 8009534:	6004      	str	r4, [r0, #0]
 8009536:	f840 3f04 	str.w	r3, [r0, #4]!
 800953a:	4288      	cmp	r0, r1
 800953c:	d3f4      	bcc.n	8009528 <L_shift+0xc>
 800953e:	bd70      	pop	{r4, r5, r6, pc}

08009540 <__match>:
 8009540:	b530      	push	{r4, r5, lr}
 8009542:	6803      	ldr	r3, [r0, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954a:	b914      	cbnz	r4, 8009552 <__match+0x12>
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	2001      	movs	r0, #1
 8009550:	bd30      	pop	{r4, r5, pc}
 8009552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009556:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800955a:	2d19      	cmp	r5, #25
 800955c:	bf98      	it	ls
 800955e:	3220      	addls	r2, #32
 8009560:	42a2      	cmp	r2, r4
 8009562:	d0f0      	beq.n	8009546 <__match+0x6>
 8009564:	2000      	movs	r0, #0
 8009566:	e7f3      	b.n	8009550 <__match+0x10>

08009568 <__hexnan>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	680b      	ldr	r3, [r1, #0]
 800956e:	6801      	ldr	r1, [r0, #0]
 8009570:	115e      	asrs	r6, r3, #5
 8009572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009576:	f013 031f 	ands.w	r3, r3, #31
 800957a:	b087      	sub	sp, #28
 800957c:	bf18      	it	ne
 800957e:	3604      	addne	r6, #4
 8009580:	2500      	movs	r5, #0
 8009582:	1f37      	subs	r7, r6, #4
 8009584:	4682      	mov	sl, r0
 8009586:	4690      	mov	r8, r2
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	f846 5c04 	str.w	r5, [r6, #-4]
 800958e:	46b9      	mov	r9, r7
 8009590:	463c      	mov	r4, r7
 8009592:	9502      	str	r5, [sp, #8]
 8009594:	46ab      	mov	fp, r5
 8009596:	784a      	ldrb	r2, [r1, #1]
 8009598:	1c4b      	adds	r3, r1, #1
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	b342      	cbz	r2, 80095f0 <__hexnan+0x88>
 800959e:	4610      	mov	r0, r2
 80095a0:	9105      	str	r1, [sp, #20]
 80095a2:	9204      	str	r2, [sp, #16]
 80095a4:	f7ff fd5f 	bl	8009066 <__hexdig_fun>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d14f      	bne.n	800964c <__hexnan+0xe4>
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	9905      	ldr	r1, [sp, #20]
 80095b0:	2a20      	cmp	r2, #32
 80095b2:	d818      	bhi.n	80095e6 <__hexnan+0x7e>
 80095b4:	9b02      	ldr	r3, [sp, #8]
 80095b6:	459b      	cmp	fp, r3
 80095b8:	dd13      	ble.n	80095e2 <__hexnan+0x7a>
 80095ba:	454c      	cmp	r4, r9
 80095bc:	d206      	bcs.n	80095cc <__hexnan+0x64>
 80095be:	2d07      	cmp	r5, #7
 80095c0:	dc04      	bgt.n	80095cc <__hexnan+0x64>
 80095c2:	462a      	mov	r2, r5
 80095c4:	4649      	mov	r1, r9
 80095c6:	4620      	mov	r0, r4
 80095c8:	f7ff ffa8 	bl	800951c <L_shift>
 80095cc:	4544      	cmp	r4, r8
 80095ce:	d950      	bls.n	8009672 <__hexnan+0x10a>
 80095d0:	2300      	movs	r3, #0
 80095d2:	f1a4 0904 	sub.w	r9, r4, #4
 80095d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80095da:	f8cd b008 	str.w	fp, [sp, #8]
 80095de:	464c      	mov	r4, r9
 80095e0:	461d      	mov	r5, r3
 80095e2:	9903      	ldr	r1, [sp, #12]
 80095e4:	e7d7      	b.n	8009596 <__hexnan+0x2e>
 80095e6:	2a29      	cmp	r2, #41	; 0x29
 80095e8:	d156      	bne.n	8009698 <__hexnan+0x130>
 80095ea:	3102      	adds	r1, #2
 80095ec:	f8ca 1000 	str.w	r1, [sl]
 80095f0:	f1bb 0f00 	cmp.w	fp, #0
 80095f4:	d050      	beq.n	8009698 <__hexnan+0x130>
 80095f6:	454c      	cmp	r4, r9
 80095f8:	d206      	bcs.n	8009608 <__hexnan+0xa0>
 80095fa:	2d07      	cmp	r5, #7
 80095fc:	dc04      	bgt.n	8009608 <__hexnan+0xa0>
 80095fe:	462a      	mov	r2, r5
 8009600:	4649      	mov	r1, r9
 8009602:	4620      	mov	r0, r4
 8009604:	f7ff ff8a 	bl	800951c <L_shift>
 8009608:	4544      	cmp	r4, r8
 800960a:	d934      	bls.n	8009676 <__hexnan+0x10e>
 800960c:	f1a8 0204 	sub.w	r2, r8, #4
 8009610:	4623      	mov	r3, r4
 8009612:	f853 1b04 	ldr.w	r1, [r3], #4
 8009616:	f842 1f04 	str.w	r1, [r2, #4]!
 800961a:	429f      	cmp	r7, r3
 800961c:	d2f9      	bcs.n	8009612 <__hexnan+0xaa>
 800961e:	1b3b      	subs	r3, r7, r4
 8009620:	f023 0303 	bic.w	r3, r3, #3
 8009624:	3304      	adds	r3, #4
 8009626:	3401      	adds	r4, #1
 8009628:	3e03      	subs	r6, #3
 800962a:	42b4      	cmp	r4, r6
 800962c:	bf88      	it	hi
 800962e:	2304      	movhi	r3, #4
 8009630:	4443      	add	r3, r8
 8009632:	2200      	movs	r2, #0
 8009634:	f843 2b04 	str.w	r2, [r3], #4
 8009638:	429f      	cmp	r7, r3
 800963a:	d2fb      	bcs.n	8009634 <__hexnan+0xcc>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	b91b      	cbnz	r3, 8009648 <__hexnan+0xe0>
 8009640:	4547      	cmp	r7, r8
 8009642:	d127      	bne.n	8009694 <__hexnan+0x12c>
 8009644:	2301      	movs	r3, #1
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	2005      	movs	r0, #5
 800964a:	e026      	b.n	800969a <__hexnan+0x132>
 800964c:	3501      	adds	r5, #1
 800964e:	2d08      	cmp	r5, #8
 8009650:	f10b 0b01 	add.w	fp, fp, #1
 8009654:	dd06      	ble.n	8009664 <__hexnan+0xfc>
 8009656:	4544      	cmp	r4, r8
 8009658:	d9c3      	bls.n	80095e2 <__hexnan+0x7a>
 800965a:	2300      	movs	r3, #0
 800965c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009660:	2501      	movs	r5, #1
 8009662:	3c04      	subs	r4, #4
 8009664:	6822      	ldr	r2, [r4, #0]
 8009666:	f000 000f 	and.w	r0, r0, #15
 800966a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800966e:	6022      	str	r2, [r4, #0]
 8009670:	e7b7      	b.n	80095e2 <__hexnan+0x7a>
 8009672:	2508      	movs	r5, #8
 8009674:	e7b5      	b.n	80095e2 <__hexnan+0x7a>
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0df      	beq.n	800963c <__hexnan+0xd4>
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	f1c3 0320 	rsb	r3, r3, #32
 8009684:	fa22 f303 	lsr.w	r3, r2, r3
 8009688:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800968c:	401a      	ands	r2, r3
 800968e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009692:	e7d3      	b.n	800963c <__hexnan+0xd4>
 8009694:	3f04      	subs	r7, #4
 8009696:	e7d1      	b.n	800963c <__hexnan+0xd4>
 8009698:	2004      	movs	r0, #4
 800969a:	b007      	add	sp, #28
 800969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096a0 <_localeconv_r>:
 80096a0:	4800      	ldr	r0, [pc, #0]	; (80096a4 <_localeconv_r+0x4>)
 80096a2:	4770      	bx	lr
 80096a4:	20000184 	.word	0x20000184

080096a8 <__retarget_lock_init_recursive>:
 80096a8:	4770      	bx	lr

080096aa <__retarget_lock_acquire_recursive>:
 80096aa:	4770      	bx	lr

080096ac <__retarget_lock_release_recursive>:
 80096ac:	4770      	bx	lr
	...

080096b0 <malloc>:
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <malloc+0xc>)
 80096b2:	4601      	mov	r1, r0
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	f000 bd2f 	b.w	800a118 <_malloc_r>
 80096ba:	bf00      	nop
 80096bc:	2000002c 	.word	0x2000002c

080096c0 <__ascii_mbtowc>:
 80096c0:	b082      	sub	sp, #8
 80096c2:	b901      	cbnz	r1, 80096c6 <__ascii_mbtowc+0x6>
 80096c4:	a901      	add	r1, sp, #4
 80096c6:	b142      	cbz	r2, 80096da <__ascii_mbtowc+0x1a>
 80096c8:	b14b      	cbz	r3, 80096de <__ascii_mbtowc+0x1e>
 80096ca:	7813      	ldrb	r3, [r2, #0]
 80096cc:	600b      	str	r3, [r1, #0]
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	1e10      	subs	r0, r2, #0
 80096d2:	bf18      	it	ne
 80096d4:	2001      	movne	r0, #1
 80096d6:	b002      	add	sp, #8
 80096d8:	4770      	bx	lr
 80096da:	4610      	mov	r0, r2
 80096dc:	e7fb      	b.n	80096d6 <__ascii_mbtowc+0x16>
 80096de:	f06f 0001 	mvn.w	r0, #1
 80096e2:	e7f8      	b.n	80096d6 <__ascii_mbtowc+0x16>

080096e4 <_Balloc>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	b976      	cbnz	r6, 800970c <_Balloc+0x28>
 80096ee:	2010      	movs	r0, #16
 80096f0:	f7ff ffde 	bl	80096b0 <malloc>
 80096f4:	4602      	mov	r2, r0
 80096f6:	6260      	str	r0, [r4, #36]	; 0x24
 80096f8:	b920      	cbnz	r0, 8009704 <_Balloc+0x20>
 80096fa:	4b18      	ldr	r3, [pc, #96]	; (800975c <_Balloc+0x78>)
 80096fc:	4818      	ldr	r0, [pc, #96]	; (8009760 <_Balloc+0x7c>)
 80096fe:	2166      	movs	r1, #102	; 0x66
 8009700:	f001 f968 	bl	800a9d4 <__assert_func>
 8009704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009708:	6006      	str	r6, [r0, #0]
 800970a:	60c6      	str	r6, [r0, #12]
 800970c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800970e:	68f3      	ldr	r3, [r6, #12]
 8009710:	b183      	cbz	r3, 8009734 <_Balloc+0x50>
 8009712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971a:	b9b8      	cbnz	r0, 800974c <_Balloc+0x68>
 800971c:	2101      	movs	r1, #1
 800971e:	fa01 f605 	lsl.w	r6, r1, r5
 8009722:	1d72      	adds	r2, r6, #5
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	4620      	mov	r0, r4
 8009728:	f000 fc97 	bl	800a05a <_calloc_r>
 800972c:	b160      	cbz	r0, 8009748 <_Balloc+0x64>
 800972e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009732:	e00e      	b.n	8009752 <_Balloc+0x6e>
 8009734:	2221      	movs	r2, #33	; 0x21
 8009736:	2104      	movs	r1, #4
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fc8e 	bl	800a05a <_calloc_r>
 800973e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009740:	60f0      	str	r0, [r6, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <_Balloc+0x2e>
 8009748:	2000      	movs	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009752:	2300      	movs	r3, #0
 8009754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009758:	e7f7      	b.n	800974a <_Balloc+0x66>
 800975a:	bf00      	nop
 800975c:	0800b19d 	.word	0x0800b19d
 8009760:	0800b304 	.word	0x0800b304

08009764 <_Bfree>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b976      	cbnz	r6, 800978c <_Bfree+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7ff ff9e 	bl	80096b0 <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	6268      	str	r0, [r5, #36]	; 0x24
 8009778:	b920      	cbnz	r0, 8009784 <_Bfree+0x20>
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <_Bfree+0x3c>)
 800977c:	4809      	ldr	r0, [pc, #36]	; (80097a4 <_Bfree+0x40>)
 800977e:	218a      	movs	r1, #138	; 0x8a
 8009780:	f001 f928 	bl	800a9d4 <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	b13c      	cbz	r4, 800979e <_Bfree+0x3a>
 800978e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009798:	6021      	str	r1, [r4, #0]
 800979a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	0800b19d 	.word	0x0800b19d
 80097a4:	0800b304 	.word	0x0800b304

080097a8 <__multadd>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	690e      	ldr	r6, [r1, #16]
 80097ae:	4607      	mov	r7, r0
 80097b0:	4698      	mov	r8, r3
 80097b2:	460c      	mov	r4, r1
 80097b4:	f101 0014 	add.w	r0, r1, #20
 80097b8:	2300      	movs	r3, #0
 80097ba:	6805      	ldr	r5, [r0, #0]
 80097bc:	b2a9      	uxth	r1, r5
 80097be:	fb02 8101 	mla	r1, r2, r1, r8
 80097c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097c6:	0c2d      	lsrs	r5, r5, #16
 80097c8:	fb02 c505 	mla	r5, r2, r5, ip
 80097cc:	b289      	uxth	r1, r1
 80097ce:	3301      	adds	r3, #1
 80097d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097d4:	429e      	cmp	r6, r3
 80097d6:	f840 1b04 	str.w	r1, [r0], #4
 80097da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097de:	dcec      	bgt.n	80097ba <__multadd+0x12>
 80097e0:	f1b8 0f00 	cmp.w	r8, #0
 80097e4:	d022      	beq.n	800982c <__multadd+0x84>
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	42b3      	cmp	r3, r6
 80097ea:	dc19      	bgt.n	8009820 <__multadd+0x78>
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4638      	mov	r0, r7
 80097f0:	3101      	adds	r1, #1
 80097f2:	f7ff ff77 	bl	80096e4 <_Balloc>
 80097f6:	4605      	mov	r5, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__multadd+0x5e>
 80097fa:	4602      	mov	r2, r0
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <__multadd+0x8c>)
 80097fe:	480e      	ldr	r0, [pc, #56]	; (8009838 <__multadd+0x90>)
 8009800:	21b5      	movs	r1, #181	; 0xb5
 8009802:	f001 f8e7 	bl	800a9d4 <__assert_func>
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	3202      	adds	r2, #2
 800980a:	f104 010c 	add.w	r1, r4, #12
 800980e:	0092      	lsls	r2, r2, #2
 8009810:	300c      	adds	r0, #12
 8009812:	f7fc fee7 	bl	80065e4 <memcpy>
 8009816:	4621      	mov	r1, r4
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ffa3 	bl	8009764 <_Bfree>
 800981e:	462c      	mov	r4, r5
 8009820:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009824:	3601      	adds	r6, #1
 8009826:	f8c3 8014 	str.w	r8, [r3, #20]
 800982a:	6126      	str	r6, [r4, #16]
 800982c:	4620      	mov	r0, r4
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009832:	bf00      	nop
 8009834:	0800b213 	.word	0x0800b213
 8009838:	0800b304 	.word	0x0800b304

0800983c <__s2b>:
 800983c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009840:	460c      	mov	r4, r1
 8009842:	4615      	mov	r5, r2
 8009844:	461f      	mov	r7, r3
 8009846:	2209      	movs	r2, #9
 8009848:	3308      	adds	r3, #8
 800984a:	4606      	mov	r6, r0
 800984c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009850:	2100      	movs	r1, #0
 8009852:	2201      	movs	r2, #1
 8009854:	429a      	cmp	r2, r3
 8009856:	db09      	blt.n	800986c <__s2b+0x30>
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff ff43 	bl	80096e4 <_Balloc>
 800985e:	b940      	cbnz	r0, 8009872 <__s2b+0x36>
 8009860:	4602      	mov	r2, r0
 8009862:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <__s2b+0x8c>)
 8009864:	4819      	ldr	r0, [pc, #100]	; (80098cc <__s2b+0x90>)
 8009866:	21ce      	movs	r1, #206	; 0xce
 8009868:	f001 f8b4 	bl	800a9d4 <__assert_func>
 800986c:	0052      	lsls	r2, r2, #1
 800986e:	3101      	adds	r1, #1
 8009870:	e7f0      	b.n	8009854 <__s2b+0x18>
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	6143      	str	r3, [r0, #20]
 8009876:	2d09      	cmp	r5, #9
 8009878:	f04f 0301 	mov.w	r3, #1
 800987c:	6103      	str	r3, [r0, #16]
 800987e:	dd16      	ble.n	80098ae <__s2b+0x72>
 8009880:	f104 0909 	add.w	r9, r4, #9
 8009884:	46c8      	mov	r8, r9
 8009886:	442c      	add	r4, r5
 8009888:	f818 3b01 	ldrb.w	r3, [r8], #1
 800988c:	4601      	mov	r1, r0
 800988e:	3b30      	subs	r3, #48	; 0x30
 8009890:	220a      	movs	r2, #10
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff ff88 	bl	80097a8 <__multadd>
 8009898:	45a0      	cmp	r8, r4
 800989a:	d1f5      	bne.n	8009888 <__s2b+0x4c>
 800989c:	f1a5 0408 	sub.w	r4, r5, #8
 80098a0:	444c      	add	r4, r9
 80098a2:	1b2d      	subs	r5, r5, r4
 80098a4:	1963      	adds	r3, r4, r5
 80098a6:	42bb      	cmp	r3, r7
 80098a8:	db04      	blt.n	80098b4 <__s2b+0x78>
 80098aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ae:	340a      	adds	r4, #10
 80098b0:	2509      	movs	r5, #9
 80098b2:	e7f6      	b.n	80098a2 <__s2b+0x66>
 80098b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098b8:	4601      	mov	r1, r0
 80098ba:	3b30      	subs	r3, #48	; 0x30
 80098bc:	220a      	movs	r2, #10
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ff72 	bl	80097a8 <__multadd>
 80098c4:	e7ee      	b.n	80098a4 <__s2b+0x68>
 80098c6:	bf00      	nop
 80098c8:	0800b213 	.word	0x0800b213
 80098cc:	0800b304 	.word	0x0800b304

080098d0 <__hi0bits>:
 80098d0:	0c03      	lsrs	r3, r0, #16
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	b9d3      	cbnz	r3, 800990c <__hi0bits+0x3c>
 80098d6:	0400      	lsls	r0, r0, #16
 80098d8:	2310      	movs	r3, #16
 80098da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098de:	bf04      	itt	eq
 80098e0:	0200      	lsleq	r0, r0, #8
 80098e2:	3308      	addeq	r3, #8
 80098e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098e8:	bf04      	itt	eq
 80098ea:	0100      	lsleq	r0, r0, #4
 80098ec:	3304      	addeq	r3, #4
 80098ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098f2:	bf04      	itt	eq
 80098f4:	0080      	lsleq	r0, r0, #2
 80098f6:	3302      	addeq	r3, #2
 80098f8:	2800      	cmp	r0, #0
 80098fa:	db05      	blt.n	8009908 <__hi0bits+0x38>
 80098fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009900:	f103 0301 	add.w	r3, r3, #1
 8009904:	bf08      	it	eq
 8009906:	2320      	moveq	r3, #32
 8009908:	4618      	mov	r0, r3
 800990a:	4770      	bx	lr
 800990c:	2300      	movs	r3, #0
 800990e:	e7e4      	b.n	80098da <__hi0bits+0xa>

08009910 <__lo0bits>:
 8009910:	6803      	ldr	r3, [r0, #0]
 8009912:	f013 0207 	ands.w	r2, r3, #7
 8009916:	4601      	mov	r1, r0
 8009918:	d00b      	beq.n	8009932 <__lo0bits+0x22>
 800991a:	07da      	lsls	r2, r3, #31
 800991c:	d424      	bmi.n	8009968 <__lo0bits+0x58>
 800991e:	0798      	lsls	r0, r3, #30
 8009920:	bf49      	itett	mi
 8009922:	085b      	lsrmi	r3, r3, #1
 8009924:	089b      	lsrpl	r3, r3, #2
 8009926:	2001      	movmi	r0, #1
 8009928:	600b      	strmi	r3, [r1, #0]
 800992a:	bf5c      	itt	pl
 800992c:	600b      	strpl	r3, [r1, #0]
 800992e:	2002      	movpl	r0, #2
 8009930:	4770      	bx	lr
 8009932:	b298      	uxth	r0, r3
 8009934:	b9b0      	cbnz	r0, 8009964 <__lo0bits+0x54>
 8009936:	0c1b      	lsrs	r3, r3, #16
 8009938:	2010      	movs	r0, #16
 800993a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800993e:	bf04      	itt	eq
 8009940:	0a1b      	lsreq	r3, r3, #8
 8009942:	3008      	addeq	r0, #8
 8009944:	071a      	lsls	r2, r3, #28
 8009946:	bf04      	itt	eq
 8009948:	091b      	lsreq	r3, r3, #4
 800994a:	3004      	addeq	r0, #4
 800994c:	079a      	lsls	r2, r3, #30
 800994e:	bf04      	itt	eq
 8009950:	089b      	lsreq	r3, r3, #2
 8009952:	3002      	addeq	r0, #2
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	d403      	bmi.n	8009960 <__lo0bits+0x50>
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	f100 0001 	add.w	r0, r0, #1
 800995e:	d005      	beq.n	800996c <__lo0bits+0x5c>
 8009960:	600b      	str	r3, [r1, #0]
 8009962:	4770      	bx	lr
 8009964:	4610      	mov	r0, r2
 8009966:	e7e8      	b.n	800993a <__lo0bits+0x2a>
 8009968:	2000      	movs	r0, #0
 800996a:	4770      	bx	lr
 800996c:	2020      	movs	r0, #32
 800996e:	4770      	bx	lr

08009970 <__i2b>:
 8009970:	b510      	push	{r4, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	2101      	movs	r1, #1
 8009976:	f7ff feb5 	bl	80096e4 <_Balloc>
 800997a:	4602      	mov	r2, r0
 800997c:	b928      	cbnz	r0, 800998a <__i2b+0x1a>
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <__i2b+0x24>)
 8009980:	4805      	ldr	r0, [pc, #20]	; (8009998 <__i2b+0x28>)
 8009982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009986:	f001 f825 	bl	800a9d4 <__assert_func>
 800998a:	2301      	movs	r3, #1
 800998c:	6144      	str	r4, [r0, #20]
 800998e:	6103      	str	r3, [r0, #16]
 8009990:	bd10      	pop	{r4, pc}
 8009992:	bf00      	nop
 8009994:	0800b213 	.word	0x0800b213
 8009998:	0800b304 	.word	0x0800b304

0800999c <__multiply>:
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	4614      	mov	r4, r2
 80099a2:	690a      	ldr	r2, [r1, #16]
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	bfb8      	it	lt
 80099aa:	460b      	movlt	r3, r1
 80099ac:	460d      	mov	r5, r1
 80099ae:	bfbc      	itt	lt
 80099b0:	4625      	movlt	r5, r4
 80099b2:	461c      	movlt	r4, r3
 80099b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80099b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099bc:	68ab      	ldr	r3, [r5, #8]
 80099be:	6869      	ldr	r1, [r5, #4]
 80099c0:	eb0a 0709 	add.w	r7, sl, r9
 80099c4:	42bb      	cmp	r3, r7
 80099c6:	b085      	sub	sp, #20
 80099c8:	bfb8      	it	lt
 80099ca:	3101      	addlt	r1, #1
 80099cc:	f7ff fe8a 	bl	80096e4 <_Balloc>
 80099d0:	b930      	cbnz	r0, 80099e0 <__multiply+0x44>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b42      	ldr	r3, [pc, #264]	; (8009ae0 <__multiply+0x144>)
 80099d6:	4843      	ldr	r0, [pc, #268]	; (8009ae4 <__multiply+0x148>)
 80099d8:	f240 115d 	movw	r1, #349	; 0x15d
 80099dc:	f000 fffa 	bl	800a9d4 <__assert_func>
 80099e0:	f100 0614 	add.w	r6, r0, #20
 80099e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80099e8:	4633      	mov	r3, r6
 80099ea:	2200      	movs	r2, #0
 80099ec:	4543      	cmp	r3, r8
 80099ee:	d31e      	bcc.n	8009a2e <__multiply+0x92>
 80099f0:	f105 0c14 	add.w	ip, r5, #20
 80099f4:	f104 0314 	add.w	r3, r4, #20
 80099f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80099fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a00:	9202      	str	r2, [sp, #8]
 8009a02:	ebac 0205 	sub.w	r2, ip, r5
 8009a06:	3a15      	subs	r2, #21
 8009a08:	f022 0203 	bic.w	r2, r2, #3
 8009a0c:	3204      	adds	r2, #4
 8009a0e:	f105 0115 	add.w	r1, r5, #21
 8009a12:	458c      	cmp	ip, r1
 8009a14:	bf38      	it	cc
 8009a16:	2204      	movcc	r2, #4
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9a02      	ldr	r2, [sp, #8]
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d808      	bhi.n	8009a34 <__multiply+0x98>
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	dc55      	bgt.n	8009ad2 <__multiply+0x136>
 8009a26:	6107      	str	r7, [r0, #16]
 8009a28:	b005      	add	sp, #20
 8009a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2e:	f843 2b04 	str.w	r2, [r3], #4
 8009a32:	e7db      	b.n	80099ec <__multiply+0x50>
 8009a34:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a38:	f1ba 0f00 	cmp.w	sl, #0
 8009a3c:	d020      	beq.n	8009a80 <__multiply+0xe4>
 8009a3e:	f105 0e14 	add.w	lr, r5, #20
 8009a42:	46b1      	mov	r9, r6
 8009a44:	2200      	movs	r2, #0
 8009a46:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a4a:	f8d9 b000 	ldr.w	fp, [r9]
 8009a4e:	b2a1      	uxth	r1, r4
 8009a50:	fa1f fb8b 	uxth.w	fp, fp
 8009a54:	fb0a b101 	mla	r1, sl, r1, fp
 8009a58:	4411      	add	r1, r2
 8009a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8009a5e:	0c24      	lsrs	r4, r4, #16
 8009a60:	0c12      	lsrs	r2, r2, #16
 8009a62:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a66:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a6a:	b289      	uxth	r1, r1
 8009a6c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a70:	45f4      	cmp	ip, lr
 8009a72:	f849 1b04 	str.w	r1, [r9], #4
 8009a76:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a7a:	d8e4      	bhi.n	8009a46 <__multiply+0xaa>
 8009a7c:	9901      	ldr	r1, [sp, #4]
 8009a7e:	5072      	str	r2, [r6, r1]
 8009a80:	9a03      	ldr	r2, [sp, #12]
 8009a82:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a86:	3304      	adds	r3, #4
 8009a88:	f1b9 0f00 	cmp.w	r9, #0
 8009a8c:	d01f      	beq.n	8009ace <__multiply+0x132>
 8009a8e:	6834      	ldr	r4, [r6, #0]
 8009a90:	f105 0114 	add.w	r1, r5, #20
 8009a94:	46b6      	mov	lr, r6
 8009a96:	f04f 0a00 	mov.w	sl, #0
 8009a9a:	880a      	ldrh	r2, [r1, #0]
 8009a9c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009aa0:	fb09 b202 	mla	r2, r9, r2, fp
 8009aa4:	4492      	add	sl, r2
 8009aa6:	b2a4      	uxth	r4, r4
 8009aa8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009aac:	f84e 4b04 	str.w	r4, [lr], #4
 8009ab0:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ab4:	f8be 2000 	ldrh.w	r2, [lr]
 8009ab8:	0c24      	lsrs	r4, r4, #16
 8009aba:	fb09 2404 	mla	r4, r9, r4, r2
 8009abe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ac2:	458c      	cmp	ip, r1
 8009ac4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ac8:	d8e7      	bhi.n	8009a9a <__multiply+0xfe>
 8009aca:	9a01      	ldr	r2, [sp, #4]
 8009acc:	50b4      	str	r4, [r6, r2]
 8009ace:	3604      	adds	r6, #4
 8009ad0:	e7a3      	b.n	8009a1a <__multiply+0x7e>
 8009ad2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1a5      	bne.n	8009a26 <__multiply+0x8a>
 8009ada:	3f01      	subs	r7, #1
 8009adc:	e7a1      	b.n	8009a22 <__multiply+0x86>
 8009ade:	bf00      	nop
 8009ae0:	0800b213 	.word	0x0800b213
 8009ae4:	0800b304 	.word	0x0800b304

08009ae8 <__pow5mult>:
 8009ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aec:	4615      	mov	r5, r2
 8009aee:	f012 0203 	ands.w	r2, r2, #3
 8009af2:	4606      	mov	r6, r0
 8009af4:	460f      	mov	r7, r1
 8009af6:	d007      	beq.n	8009b08 <__pow5mult+0x20>
 8009af8:	4c25      	ldr	r4, [pc, #148]	; (8009b90 <__pow5mult+0xa8>)
 8009afa:	3a01      	subs	r2, #1
 8009afc:	2300      	movs	r3, #0
 8009afe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b02:	f7ff fe51 	bl	80097a8 <__multadd>
 8009b06:	4607      	mov	r7, r0
 8009b08:	10ad      	asrs	r5, r5, #2
 8009b0a:	d03d      	beq.n	8009b88 <__pow5mult+0xa0>
 8009b0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b0e:	b97c      	cbnz	r4, 8009b30 <__pow5mult+0x48>
 8009b10:	2010      	movs	r0, #16
 8009b12:	f7ff fdcd 	bl	80096b0 <malloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	6270      	str	r0, [r6, #36]	; 0x24
 8009b1a:	b928      	cbnz	r0, 8009b28 <__pow5mult+0x40>
 8009b1c:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <__pow5mult+0xac>)
 8009b1e:	481e      	ldr	r0, [pc, #120]	; (8009b98 <__pow5mult+0xb0>)
 8009b20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b24:	f000 ff56 	bl	800a9d4 <__assert_func>
 8009b28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b2c:	6004      	str	r4, [r0, #0]
 8009b2e:	60c4      	str	r4, [r0, #12]
 8009b30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b38:	b94c      	cbnz	r4, 8009b4e <__pow5mult+0x66>
 8009b3a:	f240 2171 	movw	r1, #625	; 0x271
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7ff ff16 	bl	8009970 <__i2b>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	f04f 0900 	mov.w	r9, #0
 8009b52:	07eb      	lsls	r3, r5, #31
 8009b54:	d50a      	bpl.n	8009b6c <__pow5mult+0x84>
 8009b56:	4639      	mov	r1, r7
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ff1e 	bl	800999c <__multiply>
 8009b60:	4639      	mov	r1, r7
 8009b62:	4680      	mov	r8, r0
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff fdfd 	bl	8009764 <_Bfree>
 8009b6a:	4647      	mov	r7, r8
 8009b6c:	106d      	asrs	r5, r5, #1
 8009b6e:	d00b      	beq.n	8009b88 <__pow5mult+0xa0>
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	b938      	cbnz	r0, 8009b84 <__pow5mult+0x9c>
 8009b74:	4622      	mov	r2, r4
 8009b76:	4621      	mov	r1, r4
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff ff0f 	bl	800999c <__multiply>
 8009b7e:	6020      	str	r0, [r4, #0]
 8009b80:	f8c0 9000 	str.w	r9, [r0]
 8009b84:	4604      	mov	r4, r0
 8009b86:	e7e4      	b.n	8009b52 <__pow5mult+0x6a>
 8009b88:	4638      	mov	r0, r7
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800b458 	.word	0x0800b458
 8009b94:	0800b19d 	.word	0x0800b19d
 8009b98:	0800b304 	.word	0x0800b304

08009b9c <__lshift>:
 8009b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	6849      	ldr	r1, [r1, #4]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009baa:	68a3      	ldr	r3, [r4, #8]
 8009bac:	4607      	mov	r7, r0
 8009bae:	4691      	mov	r9, r2
 8009bb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bb4:	f108 0601 	add.w	r6, r8, #1
 8009bb8:	42b3      	cmp	r3, r6
 8009bba:	db0b      	blt.n	8009bd4 <__lshift+0x38>
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff fd91 	bl	80096e4 <_Balloc>
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	b948      	cbnz	r0, 8009bda <__lshift+0x3e>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <__lshift+0xd0>)
 8009bca:	4829      	ldr	r0, [pc, #164]	; (8009c70 <__lshift+0xd4>)
 8009bcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bd0:	f000 ff00 	bl	800a9d4 <__assert_func>
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	e7ee      	b.n	8009bb8 <__lshift+0x1c>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f100 0114 	add.w	r1, r0, #20
 8009be0:	f100 0210 	add.w	r2, r0, #16
 8009be4:	4618      	mov	r0, r3
 8009be6:	4553      	cmp	r3, sl
 8009be8:	db33      	blt.n	8009c52 <__lshift+0xb6>
 8009bea:	6920      	ldr	r0, [r4, #16]
 8009bec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bf0:	f104 0314 	add.w	r3, r4, #20
 8009bf4:	f019 091f 	ands.w	r9, r9, #31
 8009bf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c00:	d02b      	beq.n	8009c5a <__lshift+0xbe>
 8009c02:	f1c9 0e20 	rsb	lr, r9, #32
 8009c06:	468a      	mov	sl, r1
 8009c08:	2200      	movs	r2, #0
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c10:	4302      	orrs	r2, r0
 8009c12:	f84a 2b04 	str.w	r2, [sl], #4
 8009c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1a:	459c      	cmp	ip, r3
 8009c1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c20:	d8f3      	bhi.n	8009c0a <__lshift+0x6e>
 8009c22:	ebac 0304 	sub.w	r3, ip, r4
 8009c26:	3b15      	subs	r3, #21
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	f104 0015 	add.w	r0, r4, #21
 8009c32:	4584      	cmp	ip, r0
 8009c34:	bf38      	it	cc
 8009c36:	2304      	movcc	r3, #4
 8009c38:	50ca      	str	r2, [r1, r3]
 8009c3a:	b10a      	cbz	r2, 8009c40 <__lshift+0xa4>
 8009c3c:	f108 0602 	add.w	r6, r8, #2
 8009c40:	3e01      	subs	r6, #1
 8009c42:	4638      	mov	r0, r7
 8009c44:	612e      	str	r6, [r5, #16]
 8009c46:	4621      	mov	r1, r4
 8009c48:	f7ff fd8c 	bl	8009764 <_Bfree>
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c56:	3301      	adds	r3, #1
 8009c58:	e7c5      	b.n	8009be6 <__lshift+0x4a>
 8009c5a:	3904      	subs	r1, #4
 8009c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c64:	459c      	cmp	ip, r3
 8009c66:	d8f9      	bhi.n	8009c5c <__lshift+0xc0>
 8009c68:	e7ea      	b.n	8009c40 <__lshift+0xa4>
 8009c6a:	bf00      	nop
 8009c6c:	0800b213 	.word	0x0800b213
 8009c70:	0800b304 	.word	0x0800b304

08009c74 <__mcmp>:
 8009c74:	b530      	push	{r4, r5, lr}
 8009c76:	6902      	ldr	r2, [r0, #16]
 8009c78:	690c      	ldr	r4, [r1, #16]
 8009c7a:	1b12      	subs	r2, r2, r4
 8009c7c:	d10e      	bne.n	8009c9c <__mcmp+0x28>
 8009c7e:	f100 0314 	add.w	r3, r0, #20
 8009c82:	3114      	adds	r1, #20
 8009c84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d003      	beq.n	8009ca0 <__mcmp+0x2c>
 8009c98:	d305      	bcc.n	8009ca6 <__mcmp+0x32>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	bd30      	pop	{r4, r5, pc}
 8009ca0:	4283      	cmp	r3, r0
 8009ca2:	d3f3      	bcc.n	8009c8c <__mcmp+0x18>
 8009ca4:	e7fa      	b.n	8009c9c <__mcmp+0x28>
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	e7f7      	b.n	8009c9c <__mcmp+0x28>

08009cac <__mdiff>:
 8009cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4617      	mov	r7, r2
 8009cba:	f7ff ffdb 	bl	8009c74 <__mcmp>
 8009cbe:	1e05      	subs	r5, r0, #0
 8009cc0:	d110      	bne.n	8009ce4 <__mdiff+0x38>
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f7ff fd0d 	bl	80096e4 <_Balloc>
 8009cca:	b930      	cbnz	r0, 8009cda <__mdiff+0x2e>
 8009ccc:	4b39      	ldr	r3, [pc, #228]	; (8009db4 <__mdiff+0x108>)
 8009cce:	4602      	mov	r2, r0
 8009cd0:	f240 2132 	movw	r1, #562	; 0x232
 8009cd4:	4838      	ldr	r0, [pc, #224]	; (8009db8 <__mdiff+0x10c>)
 8009cd6:	f000 fe7d 	bl	800a9d4 <__assert_func>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	bfa4      	itt	ge
 8009ce6:	463b      	movge	r3, r7
 8009ce8:	4627      	movge	r7, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	bfa6      	itte	ge
 8009cf0:	461c      	movge	r4, r3
 8009cf2:	2500      	movge	r5, #0
 8009cf4:	2501      	movlt	r5, #1
 8009cf6:	f7ff fcf5 	bl	80096e4 <_Balloc>
 8009cfa:	b920      	cbnz	r0, 8009d06 <__mdiff+0x5a>
 8009cfc:	4b2d      	ldr	r3, [pc, #180]	; (8009db4 <__mdiff+0x108>)
 8009cfe:	4602      	mov	r2, r0
 8009d00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d04:	e7e6      	b.n	8009cd4 <__mdiff+0x28>
 8009d06:	693e      	ldr	r6, [r7, #16]
 8009d08:	60c5      	str	r5, [r0, #12]
 8009d0a:	6925      	ldr	r5, [r4, #16]
 8009d0c:	f107 0114 	add.w	r1, r7, #20
 8009d10:	f104 0914 	add.w	r9, r4, #20
 8009d14:	f100 0e14 	add.w	lr, r0, #20
 8009d18:	f107 0210 	add.w	r2, r7, #16
 8009d1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d24:	46f2      	mov	sl, lr
 8009d26:	2700      	movs	r7, #0
 8009d28:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d30:	fa1f f883 	uxth.w	r8, r3
 8009d34:	fa17 f78b 	uxtah	r7, r7, fp
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	eba7 0808 	sub.w	r8, r7, r8
 8009d3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d46:	fa1f f888 	uxth.w	r8, r8
 8009d4a:	141f      	asrs	r7, r3, #16
 8009d4c:	454d      	cmp	r5, r9
 8009d4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d52:	f84a 3b04 	str.w	r3, [sl], #4
 8009d56:	d8e7      	bhi.n	8009d28 <__mdiff+0x7c>
 8009d58:	1b2b      	subs	r3, r5, r4
 8009d5a:	3b15      	subs	r3, #21
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	3304      	adds	r3, #4
 8009d62:	3415      	adds	r4, #21
 8009d64:	42a5      	cmp	r5, r4
 8009d66:	bf38      	it	cc
 8009d68:	2304      	movcc	r3, #4
 8009d6a:	4419      	add	r1, r3
 8009d6c:	4473      	add	r3, lr
 8009d6e:	469e      	mov	lr, r3
 8009d70:	460d      	mov	r5, r1
 8009d72:	4565      	cmp	r5, ip
 8009d74:	d30e      	bcc.n	8009d94 <__mdiff+0xe8>
 8009d76:	f10c 0203 	add.w	r2, ip, #3
 8009d7a:	1a52      	subs	r2, r2, r1
 8009d7c:	f022 0203 	bic.w	r2, r2, #3
 8009d80:	3903      	subs	r1, #3
 8009d82:	458c      	cmp	ip, r1
 8009d84:	bf38      	it	cc
 8009d86:	2200      	movcc	r2, #0
 8009d88:	441a      	add	r2, r3
 8009d8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d8e:	b17b      	cbz	r3, 8009db0 <__mdiff+0x104>
 8009d90:	6106      	str	r6, [r0, #16]
 8009d92:	e7a5      	b.n	8009ce0 <__mdiff+0x34>
 8009d94:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d98:	fa17 f488 	uxtah	r4, r7, r8
 8009d9c:	1422      	asrs	r2, r4, #16
 8009d9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009da2:	b2a4      	uxth	r4, r4
 8009da4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009da8:	f84e 4b04 	str.w	r4, [lr], #4
 8009dac:	1417      	asrs	r7, r2, #16
 8009dae:	e7e0      	b.n	8009d72 <__mdiff+0xc6>
 8009db0:	3e01      	subs	r6, #1
 8009db2:	e7ea      	b.n	8009d8a <__mdiff+0xde>
 8009db4:	0800b213 	.word	0x0800b213
 8009db8:	0800b304 	.word	0x0800b304

08009dbc <__ulp>:
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	ed8d 0b00 	vstr	d0, [sp]
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	4912      	ldr	r1, [pc, #72]	; (8009e10 <__ulp+0x54>)
 8009dc6:	4019      	ands	r1, r3
 8009dc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	dd05      	ble.n	8009ddc <__ulp+0x20>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	ec43 2b10 	vmov	d0, r2, r3
 8009dd8:	b002      	add	sp, #8
 8009dda:	4770      	bx	lr
 8009ddc:	4249      	negs	r1, r1
 8009dde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009de2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	da04      	bge.n	8009dfa <__ulp+0x3e>
 8009df0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009df4:	fa41 f300 	asr.w	r3, r1, r0
 8009df8:	e7ec      	b.n	8009dd4 <__ulp+0x18>
 8009dfa:	f1a0 0114 	sub.w	r1, r0, #20
 8009dfe:	291e      	cmp	r1, #30
 8009e00:	bfda      	itte	le
 8009e02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009e06:	fa20 f101 	lsrle.w	r1, r0, r1
 8009e0a:	2101      	movgt	r1, #1
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	e7e1      	b.n	8009dd4 <__ulp+0x18>
 8009e10:	7ff00000 	.word	0x7ff00000

08009e14 <__b2d>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	6905      	ldr	r5, [r0, #16]
 8009e18:	f100 0714 	add.w	r7, r0, #20
 8009e1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009e20:	1f2e      	subs	r6, r5, #4
 8009e22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009e26:	4620      	mov	r0, r4
 8009e28:	f7ff fd52 	bl	80098d0 <__hi0bits>
 8009e2c:	f1c0 0320 	rsb	r3, r0, #32
 8009e30:	280a      	cmp	r0, #10
 8009e32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009eb0 <__b2d+0x9c>
 8009e36:	600b      	str	r3, [r1, #0]
 8009e38:	dc14      	bgt.n	8009e64 <__b2d+0x50>
 8009e3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009e3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009e42:	42b7      	cmp	r7, r6
 8009e44:	ea41 030c 	orr.w	r3, r1, ip
 8009e48:	bf34      	ite	cc
 8009e4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e4e:	2100      	movcs	r1, #0
 8009e50:	3015      	adds	r0, #21
 8009e52:	fa04 f000 	lsl.w	r0, r4, r0
 8009e56:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e5a:	ea40 0201 	orr.w	r2, r0, r1
 8009e5e:	ec43 2b10 	vmov	d0, r2, r3
 8009e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e64:	42b7      	cmp	r7, r6
 8009e66:	bf3a      	itte	cc
 8009e68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e70:	2100      	movcs	r1, #0
 8009e72:	380b      	subs	r0, #11
 8009e74:	d017      	beq.n	8009ea6 <__b2d+0x92>
 8009e76:	f1c0 0c20 	rsb	ip, r0, #32
 8009e7a:	fa04 f500 	lsl.w	r5, r4, r0
 8009e7e:	42be      	cmp	r6, r7
 8009e80:	fa21 f40c 	lsr.w	r4, r1, ip
 8009e84:	ea45 0504 	orr.w	r5, r5, r4
 8009e88:	bf8c      	ite	hi
 8009e8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e8e:	2400      	movls	r4, #0
 8009e90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009e94:	fa01 f000 	lsl.w	r0, r1, r0
 8009e98:	fa24 f40c 	lsr.w	r4, r4, ip
 8009e9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ea0:	ea40 0204 	orr.w	r2, r0, r4
 8009ea4:	e7db      	b.n	8009e5e <__b2d+0x4a>
 8009ea6:	ea44 030c 	orr.w	r3, r4, ip
 8009eaa:	460a      	mov	r2, r1
 8009eac:	e7d7      	b.n	8009e5e <__b2d+0x4a>
 8009eae:	bf00      	nop
 8009eb0:	3ff00000 	.word	0x3ff00000

08009eb4 <__d2b>:
 8009eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4689      	mov	r9, r1
 8009eba:	2101      	movs	r1, #1
 8009ebc:	ec57 6b10 	vmov	r6, r7, d0
 8009ec0:	4690      	mov	r8, r2
 8009ec2:	f7ff fc0f 	bl	80096e4 <_Balloc>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	b930      	cbnz	r0, 8009ed8 <__d2b+0x24>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b25      	ldr	r3, [pc, #148]	; (8009f64 <__d2b+0xb0>)
 8009ece:	4826      	ldr	r0, [pc, #152]	; (8009f68 <__d2b+0xb4>)
 8009ed0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ed4:	f000 fd7e 	bl	800a9d4 <__assert_func>
 8009ed8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009edc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ee0:	bb35      	cbnz	r5, 8009f30 <__d2b+0x7c>
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	d028      	beq.n	8009f3a <__d2b+0x86>
 8009ee8:	4668      	mov	r0, sp
 8009eea:	9600      	str	r6, [sp, #0]
 8009eec:	f7ff fd10 	bl	8009910 <__lo0bits>
 8009ef0:	9900      	ldr	r1, [sp, #0]
 8009ef2:	b300      	cbz	r0, 8009f36 <__d2b+0x82>
 8009ef4:	9a01      	ldr	r2, [sp, #4]
 8009ef6:	f1c0 0320 	rsb	r3, r0, #32
 8009efa:	fa02 f303 	lsl.w	r3, r2, r3
 8009efe:	430b      	orrs	r3, r1
 8009f00:	40c2      	lsrs	r2, r0
 8009f02:	6163      	str	r3, [r4, #20]
 8009f04:	9201      	str	r2, [sp, #4]
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	61a3      	str	r3, [r4, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bf14      	ite	ne
 8009f0e:	2202      	movne	r2, #2
 8009f10:	2201      	moveq	r2, #1
 8009f12:	6122      	str	r2, [r4, #16]
 8009f14:	b1d5      	cbz	r5, 8009f4c <__d2b+0x98>
 8009f16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f1a:	4405      	add	r5, r0
 8009f1c:	f8c9 5000 	str.w	r5, [r9]
 8009f20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f24:	f8c8 0000 	str.w	r0, [r8]
 8009f28:	4620      	mov	r0, r4
 8009f2a:	b003      	add	sp, #12
 8009f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f34:	e7d5      	b.n	8009ee2 <__d2b+0x2e>
 8009f36:	6161      	str	r1, [r4, #20]
 8009f38:	e7e5      	b.n	8009f06 <__d2b+0x52>
 8009f3a:	a801      	add	r0, sp, #4
 8009f3c:	f7ff fce8 	bl	8009910 <__lo0bits>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	2201      	movs	r2, #1
 8009f46:	6122      	str	r2, [r4, #16]
 8009f48:	3020      	adds	r0, #32
 8009f4a:	e7e3      	b.n	8009f14 <__d2b+0x60>
 8009f4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f54:	f8c9 0000 	str.w	r0, [r9]
 8009f58:	6918      	ldr	r0, [r3, #16]
 8009f5a:	f7ff fcb9 	bl	80098d0 <__hi0bits>
 8009f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f62:	e7df      	b.n	8009f24 <__d2b+0x70>
 8009f64:	0800b213 	.word	0x0800b213
 8009f68:	0800b304 	.word	0x0800b304

08009f6c <__ratio>:
 8009f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	4688      	mov	r8, r1
 8009f72:	4669      	mov	r1, sp
 8009f74:	4681      	mov	r9, r0
 8009f76:	f7ff ff4d 	bl	8009e14 <__b2d>
 8009f7a:	a901      	add	r1, sp, #4
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	ec55 4b10 	vmov	r4, r5, d0
 8009f82:	f7ff ff47 	bl	8009e14 <__b2d>
 8009f86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f8e:	eba3 0c02 	sub.w	ip, r3, r2
 8009f92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f9c:	ec51 0b10 	vmov	r0, r1, d0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bfd6      	itet	le
 8009fa4:	460a      	movle	r2, r1
 8009fa6:	462a      	movgt	r2, r5
 8009fa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fac:	468b      	mov	fp, r1
 8009fae:	462f      	mov	r7, r5
 8009fb0:	bfd4      	ite	le
 8009fb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009fb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009fba:	4620      	mov	r0, r4
 8009fbc:	ee10 2a10 	vmov	r2, s0
 8009fc0:	465b      	mov	r3, fp
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 fc4a 	bl	800085c <__aeabi_ddiv>
 8009fc8:	ec41 0b10 	vmov	d0, r0, r1
 8009fcc:	b003      	add	sp, #12
 8009fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fd2 <__copybits>:
 8009fd2:	3901      	subs	r1, #1
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	1149      	asrs	r1, r1, #5
 8009fd8:	6914      	ldr	r4, [r2, #16]
 8009fda:	3101      	adds	r1, #1
 8009fdc:	f102 0314 	add.w	r3, r2, #20
 8009fe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fe8:	1f05      	subs	r5, r0, #4
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	d30c      	bcc.n	800a008 <__copybits+0x36>
 8009fee:	1aa3      	subs	r3, r4, r2
 8009ff0:	3b11      	subs	r3, #17
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	3211      	adds	r2, #17
 8009ff8:	42a2      	cmp	r2, r4
 8009ffa:	bf88      	it	hi
 8009ffc:	2300      	movhi	r3, #0
 8009ffe:	4418      	add	r0, r3
 800a000:	2300      	movs	r3, #0
 800a002:	4288      	cmp	r0, r1
 800a004:	d305      	bcc.n	800a012 <__copybits+0x40>
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	f853 6b04 	ldr.w	r6, [r3], #4
 800a00c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a010:	e7eb      	b.n	8009fea <__copybits+0x18>
 800a012:	f840 3b04 	str.w	r3, [r0], #4
 800a016:	e7f4      	b.n	800a002 <__copybits+0x30>

0800a018 <__any_on>:
 800a018:	f100 0214 	add.w	r2, r0, #20
 800a01c:	6900      	ldr	r0, [r0, #16]
 800a01e:	114b      	asrs	r3, r1, #5
 800a020:	4298      	cmp	r0, r3
 800a022:	b510      	push	{r4, lr}
 800a024:	db11      	blt.n	800a04a <__any_on+0x32>
 800a026:	dd0a      	ble.n	800a03e <__any_on+0x26>
 800a028:	f011 011f 	ands.w	r1, r1, #31
 800a02c:	d007      	beq.n	800a03e <__any_on+0x26>
 800a02e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a032:	fa24 f001 	lsr.w	r0, r4, r1
 800a036:	fa00 f101 	lsl.w	r1, r0, r1
 800a03a:	428c      	cmp	r4, r1
 800a03c:	d10b      	bne.n	800a056 <__any_on+0x3e>
 800a03e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a042:	4293      	cmp	r3, r2
 800a044:	d803      	bhi.n	800a04e <__any_on+0x36>
 800a046:	2000      	movs	r0, #0
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	4603      	mov	r3, r0
 800a04c:	e7f7      	b.n	800a03e <__any_on+0x26>
 800a04e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a052:	2900      	cmp	r1, #0
 800a054:	d0f5      	beq.n	800a042 <__any_on+0x2a>
 800a056:	2001      	movs	r0, #1
 800a058:	e7f6      	b.n	800a048 <__any_on+0x30>

0800a05a <_calloc_r>:
 800a05a:	b513      	push	{r0, r1, r4, lr}
 800a05c:	434a      	muls	r2, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	9201      	str	r2, [sp, #4]
 800a062:	f000 f859 	bl	800a118 <_malloc_r>
 800a066:	4604      	mov	r4, r0
 800a068:	b118      	cbz	r0, 800a072 <_calloc_r+0x18>
 800a06a:	9a01      	ldr	r2, [sp, #4]
 800a06c:	2100      	movs	r1, #0
 800a06e:	f7fc fac7 	bl	8006600 <memset>
 800a072:	4620      	mov	r0, r4
 800a074:	b002      	add	sp, #8
 800a076:	bd10      	pop	{r4, pc}

0800a078 <_free_r>:
 800a078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a07a:	2900      	cmp	r1, #0
 800a07c:	d048      	beq.n	800a110 <_free_r+0x98>
 800a07e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a082:	9001      	str	r0, [sp, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f1a1 0404 	sub.w	r4, r1, #4
 800a08a:	bfb8      	it	lt
 800a08c:	18e4      	addlt	r4, r4, r3
 800a08e:	f000 fe33 	bl	800acf8 <__malloc_lock>
 800a092:	4a20      	ldr	r2, [pc, #128]	; (800a114 <_free_r+0x9c>)
 800a094:	9801      	ldr	r0, [sp, #4]
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	4615      	mov	r5, r2
 800a09a:	b933      	cbnz	r3, 800a0aa <_free_r+0x32>
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	6014      	str	r4, [r2, #0]
 800a0a0:	b003      	add	sp, #12
 800a0a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a6:	f000 be2d 	b.w	800ad04 <__malloc_unlock>
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	d90b      	bls.n	800a0c6 <_free_r+0x4e>
 800a0ae:	6821      	ldr	r1, [r4, #0]
 800a0b0:	1862      	adds	r2, r4, r1
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bf04      	itt	eq
 800a0b6:	681a      	ldreq	r2, [r3, #0]
 800a0b8:	685b      	ldreq	r3, [r3, #4]
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	bf04      	itt	eq
 800a0be:	1852      	addeq	r2, r2, r1
 800a0c0:	6022      	streq	r2, [r4, #0]
 800a0c2:	602c      	str	r4, [r5, #0]
 800a0c4:	e7ec      	b.n	800a0a0 <_free_r+0x28>
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	b10b      	cbz	r3, 800a0d0 <_free_r+0x58>
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	d9fa      	bls.n	800a0c6 <_free_r+0x4e>
 800a0d0:	6811      	ldr	r1, [r2, #0]
 800a0d2:	1855      	adds	r5, r2, r1
 800a0d4:	42a5      	cmp	r5, r4
 800a0d6:	d10b      	bne.n	800a0f0 <_free_r+0x78>
 800a0d8:	6824      	ldr	r4, [r4, #0]
 800a0da:	4421      	add	r1, r4
 800a0dc:	1854      	adds	r4, r2, r1
 800a0de:	42a3      	cmp	r3, r4
 800a0e0:	6011      	str	r1, [r2, #0]
 800a0e2:	d1dd      	bne.n	800a0a0 <_free_r+0x28>
 800a0e4:	681c      	ldr	r4, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	6053      	str	r3, [r2, #4]
 800a0ea:	4421      	add	r1, r4
 800a0ec:	6011      	str	r1, [r2, #0]
 800a0ee:	e7d7      	b.n	800a0a0 <_free_r+0x28>
 800a0f0:	d902      	bls.n	800a0f8 <_free_r+0x80>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	e7d3      	b.n	800a0a0 <_free_r+0x28>
 800a0f8:	6825      	ldr	r5, [r4, #0]
 800a0fa:	1961      	adds	r1, r4, r5
 800a0fc:	428b      	cmp	r3, r1
 800a0fe:	bf04      	itt	eq
 800a100:	6819      	ldreq	r1, [r3, #0]
 800a102:	685b      	ldreq	r3, [r3, #4]
 800a104:	6063      	str	r3, [r4, #4]
 800a106:	bf04      	itt	eq
 800a108:	1949      	addeq	r1, r1, r5
 800a10a:	6021      	streq	r1, [r4, #0]
 800a10c:	6054      	str	r4, [r2, #4]
 800a10e:	e7c7      	b.n	800a0a0 <_free_r+0x28>
 800a110:	b003      	add	sp, #12
 800a112:	bd30      	pop	{r4, r5, pc}
 800a114:	20000224 	.word	0x20000224

0800a118 <_malloc_r>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	1ccd      	adds	r5, r1, #3
 800a11c:	f025 0503 	bic.w	r5, r5, #3
 800a120:	3508      	adds	r5, #8
 800a122:	2d0c      	cmp	r5, #12
 800a124:	bf38      	it	cc
 800a126:	250c      	movcc	r5, #12
 800a128:	2d00      	cmp	r5, #0
 800a12a:	4606      	mov	r6, r0
 800a12c:	db01      	blt.n	800a132 <_malloc_r+0x1a>
 800a12e:	42a9      	cmp	r1, r5
 800a130:	d903      	bls.n	800a13a <_malloc_r+0x22>
 800a132:	230c      	movs	r3, #12
 800a134:	6033      	str	r3, [r6, #0]
 800a136:	2000      	movs	r0, #0
 800a138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13a:	f000 fddd 	bl	800acf8 <__malloc_lock>
 800a13e:	4921      	ldr	r1, [pc, #132]	; (800a1c4 <_malloc_r+0xac>)
 800a140:	680a      	ldr	r2, [r1, #0]
 800a142:	4614      	mov	r4, r2
 800a144:	b99c      	cbnz	r4, 800a16e <_malloc_r+0x56>
 800a146:	4f20      	ldr	r7, [pc, #128]	; (800a1c8 <_malloc_r+0xb0>)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	b923      	cbnz	r3, 800a156 <_malloc_r+0x3e>
 800a14c:	4621      	mov	r1, r4
 800a14e:	4630      	mov	r0, r6
 800a150:	f000 fafa 	bl	800a748 <_sbrk_r>
 800a154:	6038      	str	r0, [r7, #0]
 800a156:	4629      	mov	r1, r5
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 faf5 	bl	800a748 <_sbrk_r>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d123      	bne.n	800a1aa <_malloc_r+0x92>
 800a162:	230c      	movs	r3, #12
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	4630      	mov	r0, r6
 800a168:	f000 fdcc 	bl	800ad04 <__malloc_unlock>
 800a16c:	e7e3      	b.n	800a136 <_malloc_r+0x1e>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	1b5b      	subs	r3, r3, r5
 800a172:	d417      	bmi.n	800a1a4 <_malloc_r+0x8c>
 800a174:	2b0b      	cmp	r3, #11
 800a176:	d903      	bls.n	800a180 <_malloc_r+0x68>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	441c      	add	r4, r3
 800a17c:	6025      	str	r5, [r4, #0]
 800a17e:	e004      	b.n	800a18a <_malloc_r+0x72>
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	42a2      	cmp	r2, r4
 800a184:	bf0c      	ite	eq
 800a186:	600b      	streq	r3, [r1, #0]
 800a188:	6053      	strne	r3, [r2, #4]
 800a18a:	4630      	mov	r0, r6
 800a18c:	f000 fdba 	bl	800ad04 <__malloc_unlock>
 800a190:	f104 000b 	add.w	r0, r4, #11
 800a194:	1d23      	adds	r3, r4, #4
 800a196:	f020 0007 	bic.w	r0, r0, #7
 800a19a:	1ac2      	subs	r2, r0, r3
 800a19c:	d0cc      	beq.n	800a138 <_malloc_r+0x20>
 800a19e:	1a1b      	subs	r3, r3, r0
 800a1a0:	50a3      	str	r3, [r4, r2]
 800a1a2:	e7c9      	b.n	800a138 <_malloc_r+0x20>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	6864      	ldr	r4, [r4, #4]
 800a1a8:	e7cc      	b.n	800a144 <_malloc_r+0x2c>
 800a1aa:	1cc4      	adds	r4, r0, #3
 800a1ac:	f024 0403 	bic.w	r4, r4, #3
 800a1b0:	42a0      	cmp	r0, r4
 800a1b2:	d0e3      	beq.n	800a17c <_malloc_r+0x64>
 800a1b4:	1a21      	subs	r1, r4, r0
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 fac6 	bl	800a748 <_sbrk_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d1dd      	bne.n	800a17c <_malloc_r+0x64>
 800a1c0:	e7cf      	b.n	800a162 <_malloc_r+0x4a>
 800a1c2:	bf00      	nop
 800a1c4:	20000224 	.word	0x20000224
 800a1c8:	20000228 	.word	0x20000228

0800a1cc <__ssputs_r>:
 800a1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d0:	688e      	ldr	r6, [r1, #8]
 800a1d2:	429e      	cmp	r6, r3
 800a1d4:	4682      	mov	sl, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	4690      	mov	r8, r2
 800a1da:	461f      	mov	r7, r3
 800a1dc:	d838      	bhi.n	800a250 <__ssputs_r+0x84>
 800a1de:	898a      	ldrh	r2, [r1, #12]
 800a1e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1e4:	d032      	beq.n	800a24c <__ssputs_r+0x80>
 800a1e6:	6825      	ldr	r5, [r4, #0]
 800a1e8:	6909      	ldr	r1, [r1, #16]
 800a1ea:	eba5 0901 	sub.w	r9, r5, r1
 800a1ee:	6965      	ldr	r5, [r4, #20]
 800a1f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	444b      	add	r3, r9
 800a1fc:	106d      	asrs	r5, r5, #1
 800a1fe:	429d      	cmp	r5, r3
 800a200:	bf38      	it	cc
 800a202:	461d      	movcc	r5, r3
 800a204:	0553      	lsls	r3, r2, #21
 800a206:	d531      	bpl.n	800a26c <__ssputs_r+0xa0>
 800a208:	4629      	mov	r1, r5
 800a20a:	f7ff ff85 	bl	800a118 <_malloc_r>
 800a20e:	4606      	mov	r6, r0
 800a210:	b950      	cbnz	r0, 800a228 <__ssputs_r+0x5c>
 800a212:	230c      	movs	r3, #12
 800a214:	f8ca 3000 	str.w	r3, [sl]
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	6921      	ldr	r1, [r4, #16]
 800a22a:	464a      	mov	r2, r9
 800a22c:	f7fc f9da 	bl	80065e4 <memcpy>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	6126      	str	r6, [r4, #16]
 800a23e:	6165      	str	r5, [r4, #20]
 800a240:	444e      	add	r6, r9
 800a242:	eba5 0509 	sub.w	r5, r5, r9
 800a246:	6026      	str	r6, [r4, #0]
 800a248:	60a5      	str	r5, [r4, #8]
 800a24a:	463e      	mov	r6, r7
 800a24c:	42be      	cmp	r6, r7
 800a24e:	d900      	bls.n	800a252 <__ssputs_r+0x86>
 800a250:	463e      	mov	r6, r7
 800a252:	4632      	mov	r2, r6
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	4641      	mov	r1, r8
 800a258:	f000 fd34 	bl	800acc4 <memmove>
 800a25c:	68a3      	ldr	r3, [r4, #8]
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	1b9b      	subs	r3, r3, r6
 800a262:	4432      	add	r2, r6
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	2000      	movs	r0, #0
 800a26a:	e7db      	b.n	800a224 <__ssputs_r+0x58>
 800a26c:	462a      	mov	r2, r5
 800a26e:	f000 fd4f 	bl	800ad10 <_realloc_r>
 800a272:	4606      	mov	r6, r0
 800a274:	2800      	cmp	r0, #0
 800a276:	d1e1      	bne.n	800a23c <__ssputs_r+0x70>
 800a278:	6921      	ldr	r1, [r4, #16]
 800a27a:	4650      	mov	r0, sl
 800a27c:	f7ff fefc 	bl	800a078 <_free_r>
 800a280:	e7c7      	b.n	800a212 <__ssputs_r+0x46>
	...

0800a284 <_svfiprintf_r>:
 800a284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	4698      	mov	r8, r3
 800a28a:	898b      	ldrh	r3, [r1, #12]
 800a28c:	061b      	lsls	r3, r3, #24
 800a28e:	b09d      	sub	sp, #116	; 0x74
 800a290:	4607      	mov	r7, r0
 800a292:	460d      	mov	r5, r1
 800a294:	4614      	mov	r4, r2
 800a296:	d50e      	bpl.n	800a2b6 <_svfiprintf_r+0x32>
 800a298:	690b      	ldr	r3, [r1, #16]
 800a29a:	b963      	cbnz	r3, 800a2b6 <_svfiprintf_r+0x32>
 800a29c:	2140      	movs	r1, #64	; 0x40
 800a29e:	f7ff ff3b 	bl	800a118 <_malloc_r>
 800a2a2:	6028      	str	r0, [r5, #0]
 800a2a4:	6128      	str	r0, [r5, #16]
 800a2a6:	b920      	cbnz	r0, 800a2b2 <_svfiprintf_r+0x2e>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	e0d1      	b.n	800a456 <_svfiprintf_r+0x1d2>
 800a2b2:	2340      	movs	r3, #64	; 0x40
 800a2b4:	616b      	str	r3, [r5, #20]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ba:	2320      	movs	r3, #32
 800a2bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2c4:	2330      	movs	r3, #48	; 0x30
 800a2c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a470 <_svfiprintf_r+0x1ec>
 800a2ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ce:	f04f 0901 	mov.w	r9, #1
 800a2d2:	4623      	mov	r3, r4
 800a2d4:	469a      	mov	sl, r3
 800a2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2da:	b10a      	cbz	r2, 800a2e0 <_svfiprintf_r+0x5c>
 800a2dc:	2a25      	cmp	r2, #37	; 0x25
 800a2de:	d1f9      	bne.n	800a2d4 <_svfiprintf_r+0x50>
 800a2e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a2e4:	d00b      	beq.n	800a2fe <_svfiprintf_r+0x7a>
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff ff6d 	bl	800a1cc <__ssputs_r>
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f000 80aa 	beq.w	800a44c <_svfiprintf_r+0x1c8>
 800a2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2fa:	445a      	add	r2, fp
 800a2fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 80a2 	beq.w	800a44c <_svfiprintf_r+0x1c8>
 800a308:	2300      	movs	r3, #0
 800a30a:	f04f 32ff 	mov.w	r2, #4294967295
 800a30e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a312:	f10a 0a01 	add.w	sl, sl, #1
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a31e:	931a      	str	r3, [sp, #104]	; 0x68
 800a320:	4654      	mov	r4, sl
 800a322:	2205      	movs	r2, #5
 800a324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a328:	4851      	ldr	r0, [pc, #324]	; (800a470 <_svfiprintf_r+0x1ec>)
 800a32a:	f7f5 ff61 	bl	80001f0 <memchr>
 800a32e:	9a04      	ldr	r2, [sp, #16]
 800a330:	b9d8      	cbnz	r0, 800a36a <_svfiprintf_r+0xe6>
 800a332:	06d0      	lsls	r0, r2, #27
 800a334:	bf44      	itt	mi
 800a336:	2320      	movmi	r3, #32
 800a338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a33c:	0711      	lsls	r1, r2, #28
 800a33e:	bf44      	itt	mi
 800a340:	232b      	movmi	r3, #43	; 0x2b
 800a342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a346:	f89a 3000 	ldrb.w	r3, [sl]
 800a34a:	2b2a      	cmp	r3, #42	; 0x2a
 800a34c:	d015      	beq.n	800a37a <_svfiprintf_r+0xf6>
 800a34e:	9a07      	ldr	r2, [sp, #28]
 800a350:	4654      	mov	r4, sl
 800a352:	2000      	movs	r0, #0
 800a354:	f04f 0c0a 	mov.w	ip, #10
 800a358:	4621      	mov	r1, r4
 800a35a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a35e:	3b30      	subs	r3, #48	; 0x30
 800a360:	2b09      	cmp	r3, #9
 800a362:	d94e      	bls.n	800a402 <_svfiprintf_r+0x17e>
 800a364:	b1b0      	cbz	r0, 800a394 <_svfiprintf_r+0x110>
 800a366:	9207      	str	r2, [sp, #28]
 800a368:	e014      	b.n	800a394 <_svfiprintf_r+0x110>
 800a36a:	eba0 0308 	sub.w	r3, r0, r8
 800a36e:	fa09 f303 	lsl.w	r3, r9, r3
 800a372:	4313      	orrs	r3, r2
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	46a2      	mov	sl, r4
 800a378:	e7d2      	b.n	800a320 <_svfiprintf_r+0x9c>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	1d19      	adds	r1, r3, #4
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	9103      	str	r1, [sp, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	bfbb      	ittet	lt
 800a386:	425b      	neglt	r3, r3
 800a388:	f042 0202 	orrlt.w	r2, r2, #2
 800a38c:	9307      	strge	r3, [sp, #28]
 800a38e:	9307      	strlt	r3, [sp, #28]
 800a390:	bfb8      	it	lt
 800a392:	9204      	strlt	r2, [sp, #16]
 800a394:	7823      	ldrb	r3, [r4, #0]
 800a396:	2b2e      	cmp	r3, #46	; 0x2e
 800a398:	d10c      	bne.n	800a3b4 <_svfiprintf_r+0x130>
 800a39a:	7863      	ldrb	r3, [r4, #1]
 800a39c:	2b2a      	cmp	r3, #42	; 0x2a
 800a39e:	d135      	bne.n	800a40c <_svfiprintf_r+0x188>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	1d1a      	adds	r2, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	9203      	str	r2, [sp, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfb8      	it	lt
 800a3ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3b0:	3402      	adds	r4, #2
 800a3b2:	9305      	str	r3, [sp, #20]
 800a3b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a480 <_svfiprintf_r+0x1fc>
 800a3b8:	7821      	ldrb	r1, [r4, #0]
 800a3ba:	2203      	movs	r2, #3
 800a3bc:	4650      	mov	r0, sl
 800a3be:	f7f5 ff17 	bl	80001f0 <memchr>
 800a3c2:	b140      	cbz	r0, 800a3d6 <_svfiprintf_r+0x152>
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	eba0 000a 	sub.w	r0, r0, sl
 800a3ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ce:	9b04      	ldr	r3, [sp, #16]
 800a3d0:	4303      	orrs	r3, r0
 800a3d2:	3401      	adds	r4, #1
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3da:	4826      	ldr	r0, [pc, #152]	; (800a474 <_svfiprintf_r+0x1f0>)
 800a3dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3e0:	2206      	movs	r2, #6
 800a3e2:	f7f5 ff05 	bl	80001f0 <memchr>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d038      	beq.n	800a45c <_svfiprintf_r+0x1d8>
 800a3ea:	4b23      	ldr	r3, [pc, #140]	; (800a478 <_svfiprintf_r+0x1f4>)
 800a3ec:	bb1b      	cbnz	r3, 800a436 <_svfiprintf_r+0x1b2>
 800a3ee:	9b03      	ldr	r3, [sp, #12]
 800a3f0:	3307      	adds	r3, #7
 800a3f2:	f023 0307 	bic.w	r3, r3, #7
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	9303      	str	r3, [sp, #12]
 800a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fc:	4433      	add	r3, r6
 800a3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a400:	e767      	b.n	800a2d2 <_svfiprintf_r+0x4e>
 800a402:	fb0c 3202 	mla	r2, ip, r2, r3
 800a406:	460c      	mov	r4, r1
 800a408:	2001      	movs	r0, #1
 800a40a:	e7a5      	b.n	800a358 <_svfiprintf_r+0xd4>
 800a40c:	2300      	movs	r3, #0
 800a40e:	3401      	adds	r4, #1
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	4619      	mov	r1, r3
 800a414:	f04f 0c0a 	mov.w	ip, #10
 800a418:	4620      	mov	r0, r4
 800a41a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a41e:	3a30      	subs	r2, #48	; 0x30
 800a420:	2a09      	cmp	r2, #9
 800a422:	d903      	bls.n	800a42c <_svfiprintf_r+0x1a8>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0c5      	beq.n	800a3b4 <_svfiprintf_r+0x130>
 800a428:	9105      	str	r1, [sp, #20]
 800a42a:	e7c3      	b.n	800a3b4 <_svfiprintf_r+0x130>
 800a42c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a430:	4604      	mov	r4, r0
 800a432:	2301      	movs	r3, #1
 800a434:	e7f0      	b.n	800a418 <_svfiprintf_r+0x194>
 800a436:	ab03      	add	r3, sp, #12
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	462a      	mov	r2, r5
 800a43c:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <_svfiprintf_r+0x1f8>)
 800a43e:	a904      	add	r1, sp, #16
 800a440:	4638      	mov	r0, r7
 800a442:	f7fc f985 	bl	8006750 <_printf_float>
 800a446:	1c42      	adds	r2, r0, #1
 800a448:	4606      	mov	r6, r0
 800a44a:	d1d6      	bne.n	800a3fa <_svfiprintf_r+0x176>
 800a44c:	89ab      	ldrh	r3, [r5, #12]
 800a44e:	065b      	lsls	r3, r3, #25
 800a450:	f53f af2c 	bmi.w	800a2ac <_svfiprintf_r+0x28>
 800a454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a456:	b01d      	add	sp, #116	; 0x74
 800a458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	462a      	mov	r2, r5
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <_svfiprintf_r+0x1f8>)
 800a464:	a904      	add	r1, sp, #16
 800a466:	4638      	mov	r0, r7
 800a468:	f7fc fc16 	bl	8006c98 <_printf_i>
 800a46c:	e7eb      	b.n	800a446 <_svfiprintf_r+0x1c2>
 800a46e:	bf00      	nop
 800a470:	0800b464 	.word	0x0800b464
 800a474:	0800b46e 	.word	0x0800b46e
 800a478:	08006751 	.word	0x08006751
 800a47c:	0800a1cd 	.word	0x0800a1cd
 800a480:	0800b46a 	.word	0x0800b46a

0800a484 <__sfputc_r>:
 800a484:	6893      	ldr	r3, [r2, #8]
 800a486:	3b01      	subs	r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	b410      	push	{r4}
 800a48c:	6093      	str	r3, [r2, #8]
 800a48e:	da08      	bge.n	800a4a2 <__sfputc_r+0x1e>
 800a490:	6994      	ldr	r4, [r2, #24]
 800a492:	42a3      	cmp	r3, r4
 800a494:	db01      	blt.n	800a49a <__sfputc_r+0x16>
 800a496:	290a      	cmp	r1, #10
 800a498:	d103      	bne.n	800a4a2 <__sfputc_r+0x1e>
 800a49a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49e:	f000 b9b9 	b.w	800a814 <__swbuf_r>
 800a4a2:	6813      	ldr	r3, [r2, #0]
 800a4a4:	1c58      	adds	r0, r3, #1
 800a4a6:	6010      	str	r0, [r2, #0]
 800a4a8:	7019      	strb	r1, [r3, #0]
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <__sfputs_r>:
 800a4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	18d5      	adds	r5, r2, r3
 800a4bc:	42ac      	cmp	r4, r5
 800a4be:	d101      	bne.n	800a4c4 <__sfputs_r+0x12>
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	e007      	b.n	800a4d4 <__sfputs_r+0x22>
 800a4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c8:	463a      	mov	r2, r7
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ffda 	bl	800a484 <__sfputc_r>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d1f3      	bne.n	800a4bc <__sfputs_r+0xa>
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4d8 <_vfiprintf_r>:
 800a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	460d      	mov	r5, r1
 800a4de:	b09d      	sub	sp, #116	; 0x74
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	4698      	mov	r8, r3
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	b118      	cbz	r0, 800a4f0 <_vfiprintf_r+0x18>
 800a4e8:	6983      	ldr	r3, [r0, #24]
 800a4ea:	b90b      	cbnz	r3, 800a4f0 <_vfiprintf_r+0x18>
 800a4ec:	f7fe fccc 	bl	8008e88 <__sinit>
 800a4f0:	4b89      	ldr	r3, [pc, #548]	; (800a718 <_vfiprintf_r+0x240>)
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	d11b      	bne.n	800a52e <_vfiprintf_r+0x56>
 800a4f6:	6875      	ldr	r5, [r6, #4]
 800a4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4fa:	07d9      	lsls	r1, r3, #31
 800a4fc:	d405      	bmi.n	800a50a <_vfiprintf_r+0x32>
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	059a      	lsls	r2, r3, #22
 800a502:	d402      	bmi.n	800a50a <_vfiprintf_r+0x32>
 800a504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a506:	f7ff f8d0 	bl	80096aa <__retarget_lock_acquire_recursive>
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	071b      	lsls	r3, r3, #28
 800a50e:	d501      	bpl.n	800a514 <_vfiprintf_r+0x3c>
 800a510:	692b      	ldr	r3, [r5, #16]
 800a512:	b9eb      	cbnz	r3, 800a550 <_vfiprintf_r+0x78>
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f9ee 	bl	800a8f8 <__swsetup_r>
 800a51c:	b1c0      	cbz	r0, 800a550 <_vfiprintf_r+0x78>
 800a51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a520:	07dc      	lsls	r4, r3, #31
 800a522:	d50e      	bpl.n	800a542 <_vfiprintf_r+0x6a>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	b01d      	add	sp, #116	; 0x74
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	4b7b      	ldr	r3, [pc, #492]	; (800a71c <_vfiprintf_r+0x244>)
 800a530:	429d      	cmp	r5, r3
 800a532:	d101      	bne.n	800a538 <_vfiprintf_r+0x60>
 800a534:	68b5      	ldr	r5, [r6, #8]
 800a536:	e7df      	b.n	800a4f8 <_vfiprintf_r+0x20>
 800a538:	4b79      	ldr	r3, [pc, #484]	; (800a720 <_vfiprintf_r+0x248>)
 800a53a:	429d      	cmp	r5, r3
 800a53c:	bf08      	it	eq
 800a53e:	68f5      	ldreq	r5, [r6, #12]
 800a540:	e7da      	b.n	800a4f8 <_vfiprintf_r+0x20>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	0598      	lsls	r0, r3, #22
 800a546:	d4ed      	bmi.n	800a524 <_vfiprintf_r+0x4c>
 800a548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a54a:	f7ff f8af 	bl	80096ac <__retarget_lock_release_recursive>
 800a54e:	e7e9      	b.n	800a524 <_vfiprintf_r+0x4c>
 800a550:	2300      	movs	r3, #0
 800a552:	9309      	str	r3, [sp, #36]	; 0x24
 800a554:	2320      	movs	r3, #32
 800a556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a55a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a55e:	2330      	movs	r3, #48	; 0x30
 800a560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a724 <_vfiprintf_r+0x24c>
 800a564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a568:	f04f 0901 	mov.w	r9, #1
 800a56c:	4623      	mov	r3, r4
 800a56e:	469a      	mov	sl, r3
 800a570:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a574:	b10a      	cbz	r2, 800a57a <_vfiprintf_r+0xa2>
 800a576:	2a25      	cmp	r2, #37	; 0x25
 800a578:	d1f9      	bne.n	800a56e <_vfiprintf_r+0x96>
 800a57a:	ebba 0b04 	subs.w	fp, sl, r4
 800a57e:	d00b      	beq.n	800a598 <_vfiprintf_r+0xc0>
 800a580:	465b      	mov	r3, fp
 800a582:	4622      	mov	r2, r4
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff ff93 	bl	800a4b2 <__sfputs_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	f000 80aa 	beq.w	800a6e6 <_vfiprintf_r+0x20e>
 800a592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a594:	445a      	add	r2, fp
 800a596:	9209      	str	r2, [sp, #36]	; 0x24
 800a598:	f89a 3000 	ldrb.w	r3, [sl]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80a2 	beq.w	800a6e6 <_vfiprintf_r+0x20e>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5ac:	f10a 0a01 	add.w	sl, sl, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	9307      	str	r3, [sp, #28]
 800a5b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2205      	movs	r2, #5
 800a5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c2:	4858      	ldr	r0, [pc, #352]	; (800a724 <_vfiprintf_r+0x24c>)
 800a5c4:	f7f5 fe14 	bl	80001f0 <memchr>
 800a5c8:	9a04      	ldr	r2, [sp, #16]
 800a5ca:	b9d8      	cbnz	r0, 800a604 <_vfiprintf_r+0x12c>
 800a5cc:	06d1      	lsls	r1, r2, #27
 800a5ce:	bf44      	itt	mi
 800a5d0:	2320      	movmi	r3, #32
 800a5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d6:	0713      	lsls	r3, r2, #28
 800a5d8:	bf44      	itt	mi
 800a5da:	232b      	movmi	r3, #43	; 0x2b
 800a5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e6:	d015      	beq.n	800a614 <_vfiprintf_r+0x13c>
 800a5e8:	9a07      	ldr	r2, [sp, #28]
 800a5ea:	4654      	mov	r4, sl
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	f04f 0c0a 	mov.w	ip, #10
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f8:	3b30      	subs	r3, #48	; 0x30
 800a5fa:	2b09      	cmp	r3, #9
 800a5fc:	d94e      	bls.n	800a69c <_vfiprintf_r+0x1c4>
 800a5fe:	b1b0      	cbz	r0, 800a62e <_vfiprintf_r+0x156>
 800a600:	9207      	str	r2, [sp, #28]
 800a602:	e014      	b.n	800a62e <_vfiprintf_r+0x156>
 800a604:	eba0 0308 	sub.w	r3, r0, r8
 800a608:	fa09 f303 	lsl.w	r3, r9, r3
 800a60c:	4313      	orrs	r3, r2
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	46a2      	mov	sl, r4
 800a612:	e7d2      	b.n	800a5ba <_vfiprintf_r+0xe2>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	1d19      	adds	r1, r3, #4
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	9103      	str	r1, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bfbb      	ittet	lt
 800a620:	425b      	neglt	r3, r3
 800a622:	f042 0202 	orrlt.w	r2, r2, #2
 800a626:	9307      	strge	r3, [sp, #28]
 800a628:	9307      	strlt	r3, [sp, #28]
 800a62a:	bfb8      	it	lt
 800a62c:	9204      	strlt	r2, [sp, #16]
 800a62e:	7823      	ldrb	r3, [r4, #0]
 800a630:	2b2e      	cmp	r3, #46	; 0x2e
 800a632:	d10c      	bne.n	800a64e <_vfiprintf_r+0x176>
 800a634:	7863      	ldrb	r3, [r4, #1]
 800a636:	2b2a      	cmp	r3, #42	; 0x2a
 800a638:	d135      	bne.n	800a6a6 <_vfiprintf_r+0x1ce>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	1d1a      	adds	r2, r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	9203      	str	r2, [sp, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfb8      	it	lt
 800a646:	f04f 33ff 	movlt.w	r3, #4294967295
 800a64a:	3402      	adds	r4, #2
 800a64c:	9305      	str	r3, [sp, #20]
 800a64e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a734 <_vfiprintf_r+0x25c>
 800a652:	7821      	ldrb	r1, [r4, #0]
 800a654:	2203      	movs	r2, #3
 800a656:	4650      	mov	r0, sl
 800a658:	f7f5 fdca 	bl	80001f0 <memchr>
 800a65c:	b140      	cbz	r0, 800a670 <_vfiprintf_r+0x198>
 800a65e:	2340      	movs	r3, #64	; 0x40
 800a660:	eba0 000a 	sub.w	r0, r0, sl
 800a664:	fa03 f000 	lsl.w	r0, r3, r0
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	4303      	orrs	r3, r0
 800a66c:	3401      	adds	r4, #1
 800a66e:	9304      	str	r3, [sp, #16]
 800a670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a674:	482c      	ldr	r0, [pc, #176]	; (800a728 <_vfiprintf_r+0x250>)
 800a676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a67a:	2206      	movs	r2, #6
 800a67c:	f7f5 fdb8 	bl	80001f0 <memchr>
 800a680:	2800      	cmp	r0, #0
 800a682:	d03f      	beq.n	800a704 <_vfiprintf_r+0x22c>
 800a684:	4b29      	ldr	r3, [pc, #164]	; (800a72c <_vfiprintf_r+0x254>)
 800a686:	bb1b      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x1f8>
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	3307      	adds	r3, #7
 800a68c:	f023 0307 	bic.w	r3, r3, #7
 800a690:	3308      	adds	r3, #8
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a696:	443b      	add	r3, r7
 800a698:	9309      	str	r3, [sp, #36]	; 0x24
 800a69a:	e767      	b.n	800a56c <_vfiprintf_r+0x94>
 800a69c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	e7a5      	b.n	800a5f2 <_vfiprintf_r+0x11a>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	3401      	adds	r4, #1
 800a6aa:	9305      	str	r3, [sp, #20]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	f04f 0c0a 	mov.w	ip, #10
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b8:	3a30      	subs	r2, #48	; 0x30
 800a6ba:	2a09      	cmp	r2, #9
 800a6bc:	d903      	bls.n	800a6c6 <_vfiprintf_r+0x1ee>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0c5      	beq.n	800a64e <_vfiprintf_r+0x176>
 800a6c2:	9105      	str	r1, [sp, #20]
 800a6c4:	e7c3      	b.n	800a64e <_vfiprintf_r+0x176>
 800a6c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e7f0      	b.n	800a6b2 <_vfiprintf_r+0x1da>
 800a6d0:	ab03      	add	r3, sp, #12
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	462a      	mov	r2, r5
 800a6d6:	4b16      	ldr	r3, [pc, #88]	; (800a730 <_vfiprintf_r+0x258>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7fc f838 	bl	8006750 <_printf_float>
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	1c78      	adds	r0, r7, #1
 800a6e4:	d1d6      	bne.n	800a694 <_vfiprintf_r+0x1bc>
 800a6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e8:	07d9      	lsls	r1, r3, #31
 800a6ea:	d405      	bmi.n	800a6f8 <_vfiprintf_r+0x220>
 800a6ec:	89ab      	ldrh	r3, [r5, #12]
 800a6ee:	059a      	lsls	r2, r3, #22
 800a6f0:	d402      	bmi.n	800a6f8 <_vfiprintf_r+0x220>
 800a6f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6f4:	f7fe ffda 	bl	80096ac <__retarget_lock_release_recursive>
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	065b      	lsls	r3, r3, #25
 800a6fc:	f53f af12 	bmi.w	800a524 <_vfiprintf_r+0x4c>
 800a700:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a702:	e711      	b.n	800a528 <_vfiprintf_r+0x50>
 800a704:	ab03      	add	r3, sp, #12
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	462a      	mov	r2, r5
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <_vfiprintf_r+0x258>)
 800a70c:	a904      	add	r1, sp, #16
 800a70e:	4630      	mov	r0, r6
 800a710:	f7fc fac2 	bl	8006c98 <_printf_i>
 800a714:	e7e4      	b.n	800a6e0 <_vfiprintf_r+0x208>
 800a716:	bf00      	nop
 800a718:	0800b244 	.word	0x0800b244
 800a71c:	0800b264 	.word	0x0800b264
 800a720:	0800b224 	.word	0x0800b224
 800a724:	0800b464 	.word	0x0800b464
 800a728:	0800b46e 	.word	0x0800b46e
 800a72c:	08006751 	.word	0x08006751
 800a730:	0800a4b3 	.word	0x0800a4b3
 800a734:	0800b46a 	.word	0x0800b46a

0800a738 <nan>:
 800a738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a740 <nan+0x8>
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	00000000 	.word	0x00000000
 800a744:	7ff80000 	.word	0x7ff80000

0800a748 <_sbrk_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	; (800a764 <_sbrk_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 f864 	bl	8001820 <_sbrk>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_sbrk_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_sbrk_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20000374 	.word	0x20000374

0800a768 <__sread>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	460c      	mov	r4, r1
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	f000 faf4 	bl	800ad5c <_read_r>
 800a774:	2800      	cmp	r0, #0
 800a776:	bfab      	itete	ge
 800a778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a77a:	89a3      	ldrhlt	r3, [r4, #12]
 800a77c:	181b      	addge	r3, r3, r0
 800a77e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a782:	bfac      	ite	ge
 800a784:	6563      	strge	r3, [r4, #84]	; 0x54
 800a786:	81a3      	strhlt	r3, [r4, #12]
 800a788:	bd10      	pop	{r4, pc}

0800a78a <__swrite>:
 800a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	461f      	mov	r7, r3
 800a790:	898b      	ldrh	r3, [r1, #12]
 800a792:	05db      	lsls	r3, r3, #23
 800a794:	4605      	mov	r5, r0
 800a796:	460c      	mov	r4, r1
 800a798:	4616      	mov	r6, r2
 800a79a:	d505      	bpl.n	800a7a8 <__swrite+0x1e>
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f000 fa18 	bl	800abd8 <_lseek_r>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	f000 b889 	b.w	800a8d4 <_write_r>

0800a7c2 <__sseek>:
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ca:	f000 fa05 	bl	800abd8 <_lseek_r>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	bf15      	itete	ne
 800a7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7de:	81a3      	strheq	r3, [r4, #12]
 800a7e0:	bf18      	it	ne
 800a7e2:	81a3      	strhne	r3, [r4, #12]
 800a7e4:	bd10      	pop	{r4, pc}

0800a7e6 <__sclose>:
 800a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ea:	f000 b911 	b.w	800aa10 <_close_r>

0800a7ee <strncmp>:
 800a7ee:	b510      	push	{r4, lr}
 800a7f0:	b16a      	cbz	r2, 800a80e <strncmp+0x20>
 800a7f2:	3901      	subs	r1, #1
 800a7f4:	1884      	adds	r4, r0, r2
 800a7f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d103      	bne.n	800a80a <strncmp+0x1c>
 800a802:	42a0      	cmp	r0, r4
 800a804:	d001      	beq.n	800a80a <strncmp+0x1c>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1f5      	bne.n	800a7f6 <strncmp+0x8>
 800a80a:	1a98      	subs	r0, r3, r2
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	4610      	mov	r0, r2
 800a810:	e7fc      	b.n	800a80c <strncmp+0x1e>
	...

0800a814 <__swbuf_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	4605      	mov	r5, r0
 800a81c:	b118      	cbz	r0, 800a826 <__swbuf_r+0x12>
 800a81e:	6983      	ldr	r3, [r0, #24]
 800a820:	b90b      	cbnz	r3, 800a826 <__swbuf_r+0x12>
 800a822:	f7fe fb31 	bl	8008e88 <__sinit>
 800a826:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <__swbuf_r+0x98>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	d12b      	bne.n	800a884 <__swbuf_r+0x70>
 800a82c:	686c      	ldr	r4, [r5, #4]
 800a82e:	69a3      	ldr	r3, [r4, #24]
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	071a      	lsls	r2, r3, #28
 800a836:	d52f      	bpl.n	800a898 <__swbuf_r+0x84>
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	b36b      	cbz	r3, 800a898 <__swbuf_r+0x84>
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	6820      	ldr	r0, [r4, #0]
 800a840:	1ac0      	subs	r0, r0, r3
 800a842:	6963      	ldr	r3, [r4, #20]
 800a844:	b2f6      	uxtb	r6, r6
 800a846:	4283      	cmp	r3, r0
 800a848:	4637      	mov	r7, r6
 800a84a:	dc04      	bgt.n	800a856 <__swbuf_r+0x42>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4628      	mov	r0, r5
 800a850:	f000 f974 	bl	800ab3c <_fflush_r>
 800a854:	bb30      	cbnz	r0, 800a8a4 <__swbuf_r+0x90>
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	3b01      	subs	r3, #1
 800a85a:	60a3      	str	r3, [r4, #8]
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	6022      	str	r2, [r4, #0]
 800a862:	701e      	strb	r6, [r3, #0]
 800a864:	6963      	ldr	r3, [r4, #20]
 800a866:	3001      	adds	r0, #1
 800a868:	4283      	cmp	r3, r0
 800a86a:	d004      	beq.n	800a876 <__swbuf_r+0x62>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	07db      	lsls	r3, r3, #31
 800a870:	d506      	bpl.n	800a880 <__swbuf_r+0x6c>
 800a872:	2e0a      	cmp	r6, #10
 800a874:	d104      	bne.n	800a880 <__swbuf_r+0x6c>
 800a876:	4621      	mov	r1, r4
 800a878:	4628      	mov	r0, r5
 800a87a:	f000 f95f 	bl	800ab3c <_fflush_r>
 800a87e:	b988      	cbnz	r0, 800a8a4 <__swbuf_r+0x90>
 800a880:	4638      	mov	r0, r7
 800a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a884:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <__swbuf_r+0x9c>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d101      	bne.n	800a88e <__swbuf_r+0x7a>
 800a88a:	68ac      	ldr	r4, [r5, #8]
 800a88c:	e7cf      	b.n	800a82e <__swbuf_r+0x1a>
 800a88e:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <__swbuf_r+0xa0>)
 800a890:	429c      	cmp	r4, r3
 800a892:	bf08      	it	eq
 800a894:	68ec      	ldreq	r4, [r5, #12]
 800a896:	e7ca      	b.n	800a82e <__swbuf_r+0x1a>
 800a898:	4621      	mov	r1, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f82c 	bl	800a8f8 <__swsetup_r>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d0cb      	beq.n	800a83c <__swbuf_r+0x28>
 800a8a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8a8:	e7ea      	b.n	800a880 <__swbuf_r+0x6c>
 800a8aa:	bf00      	nop
 800a8ac:	0800b244 	.word	0x0800b244
 800a8b0:	0800b264 	.word	0x0800b264
 800a8b4:	0800b224 	.word	0x0800b224

0800a8b8 <__ascii_wctomb>:
 800a8b8:	b149      	cbz	r1, 800a8ce <__ascii_wctomb+0x16>
 800a8ba:	2aff      	cmp	r2, #255	; 0xff
 800a8bc:	bf85      	ittet	hi
 800a8be:	238a      	movhi	r3, #138	; 0x8a
 800a8c0:	6003      	strhi	r3, [r0, #0]
 800a8c2:	700a      	strbls	r2, [r1, #0]
 800a8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8c8:	bf98      	it	ls
 800a8ca:	2001      	movls	r0, #1
 800a8cc:	4770      	bx	lr
 800a8ce:	4608      	mov	r0, r1
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <_write_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4d07      	ldr	r5, [pc, #28]	; (800a8f4 <_write_r+0x20>)
 800a8d8:	4604      	mov	r4, r0
 800a8da:	4608      	mov	r0, r1
 800a8dc:	4611      	mov	r1, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f7f6 fb8a 	bl	8000ffc <_write>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_write_r+0x1e>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_write_r+0x1e>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	20000374 	.word	0x20000374

0800a8f8 <__swsetup_r>:
 800a8f8:	4b32      	ldr	r3, [pc, #200]	; (800a9c4 <__swsetup_r+0xcc>)
 800a8fa:	b570      	push	{r4, r5, r6, lr}
 800a8fc:	681d      	ldr	r5, [r3, #0]
 800a8fe:	4606      	mov	r6, r0
 800a900:	460c      	mov	r4, r1
 800a902:	b125      	cbz	r5, 800a90e <__swsetup_r+0x16>
 800a904:	69ab      	ldr	r3, [r5, #24]
 800a906:	b913      	cbnz	r3, 800a90e <__swsetup_r+0x16>
 800a908:	4628      	mov	r0, r5
 800a90a:	f7fe fabd 	bl	8008e88 <__sinit>
 800a90e:	4b2e      	ldr	r3, [pc, #184]	; (800a9c8 <__swsetup_r+0xd0>)
 800a910:	429c      	cmp	r4, r3
 800a912:	d10f      	bne.n	800a934 <__swsetup_r+0x3c>
 800a914:	686c      	ldr	r4, [r5, #4]
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a91c:	0719      	lsls	r1, r3, #28
 800a91e:	d42c      	bmi.n	800a97a <__swsetup_r+0x82>
 800a920:	06dd      	lsls	r5, r3, #27
 800a922:	d411      	bmi.n	800a948 <__swsetup_r+0x50>
 800a924:	2309      	movs	r3, #9
 800a926:	6033      	str	r3, [r6, #0]
 800a928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	f04f 30ff 	mov.w	r0, #4294967295
 800a932:	e03e      	b.n	800a9b2 <__swsetup_r+0xba>
 800a934:	4b25      	ldr	r3, [pc, #148]	; (800a9cc <__swsetup_r+0xd4>)
 800a936:	429c      	cmp	r4, r3
 800a938:	d101      	bne.n	800a93e <__swsetup_r+0x46>
 800a93a:	68ac      	ldr	r4, [r5, #8]
 800a93c:	e7eb      	b.n	800a916 <__swsetup_r+0x1e>
 800a93e:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <__swsetup_r+0xd8>)
 800a940:	429c      	cmp	r4, r3
 800a942:	bf08      	it	eq
 800a944:	68ec      	ldreq	r4, [r5, #12]
 800a946:	e7e6      	b.n	800a916 <__swsetup_r+0x1e>
 800a948:	0758      	lsls	r0, r3, #29
 800a94a:	d512      	bpl.n	800a972 <__swsetup_r+0x7a>
 800a94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94e:	b141      	cbz	r1, 800a962 <__swsetup_r+0x6a>
 800a950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a954:	4299      	cmp	r1, r3
 800a956:	d002      	beq.n	800a95e <__swsetup_r+0x66>
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff fb8d 	bl	800a078 <_free_r>
 800a95e:	2300      	movs	r3, #0
 800a960:	6363      	str	r3, [r4, #52]	; 0x34
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	2300      	movs	r3, #0
 800a96c:	6063      	str	r3, [r4, #4]
 800a96e:	6923      	ldr	r3, [r4, #16]
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	f043 0308 	orr.w	r3, r3, #8
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	b94b      	cbnz	r3, 800a992 <__swsetup_r+0x9a>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a988:	d003      	beq.n	800a992 <__swsetup_r+0x9a>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 f959 	bl	800ac44 <__smakebuf_r>
 800a992:	89a0      	ldrh	r0, [r4, #12]
 800a994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a998:	f010 0301 	ands.w	r3, r0, #1
 800a99c:	d00a      	beq.n	800a9b4 <__swsetup_r+0xbc>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60a3      	str	r3, [r4, #8]
 800a9a2:	6963      	ldr	r3, [r4, #20]
 800a9a4:	425b      	negs	r3, r3
 800a9a6:	61a3      	str	r3, [r4, #24]
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	b943      	cbnz	r3, 800a9be <__swsetup_r+0xc6>
 800a9ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9b0:	d1ba      	bne.n	800a928 <__swsetup_r+0x30>
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	0781      	lsls	r1, r0, #30
 800a9b6:	bf58      	it	pl
 800a9b8:	6963      	ldrpl	r3, [r4, #20]
 800a9ba:	60a3      	str	r3, [r4, #8]
 800a9bc:	e7f4      	b.n	800a9a8 <__swsetup_r+0xb0>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e7f7      	b.n	800a9b2 <__swsetup_r+0xba>
 800a9c2:	bf00      	nop
 800a9c4:	2000002c 	.word	0x2000002c
 800a9c8:	0800b244 	.word	0x0800b244
 800a9cc:	0800b264 	.word	0x0800b264
 800a9d0:	0800b224 	.word	0x0800b224

0800a9d4 <__assert_func>:
 800a9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9d6:	4614      	mov	r4, r2
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b09      	ldr	r3, [pc, #36]	; (800aa00 <__assert_func+0x2c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4605      	mov	r5, r0
 800a9e0:	68d8      	ldr	r0, [r3, #12]
 800a9e2:	b14c      	cbz	r4, 800a9f8 <__assert_func+0x24>
 800a9e4:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <__assert_func+0x30>)
 800a9e6:	9100      	str	r1, [sp, #0]
 800a9e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9ec:	4906      	ldr	r1, [pc, #24]	; (800aa08 <__assert_func+0x34>)
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	f000 f8e0 	bl	800abb4 <fiprintf>
 800a9f4:	f000 f9c4 	bl	800ad80 <abort>
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <__assert_func+0x38>)
 800a9fa:	461c      	mov	r4, r3
 800a9fc:	e7f3      	b.n	800a9e6 <__assert_func+0x12>
 800a9fe:	bf00      	nop
 800aa00:	2000002c 	.word	0x2000002c
 800aa04:	0800b475 	.word	0x0800b475
 800aa08:	0800b482 	.word	0x0800b482
 800aa0c:	0800b4b0 	.word	0x0800b4b0

0800aa10 <_close_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d06      	ldr	r5, [pc, #24]	; (800aa2c <_close_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f6 fecb 	bl	80017b6 <_close>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_close_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_close_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20000374 	.word	0x20000374

0800aa30 <__sflush_r>:
 800aa30:	898a      	ldrh	r2, [r1, #12]
 800aa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	4605      	mov	r5, r0
 800aa38:	0710      	lsls	r0, r2, #28
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	d458      	bmi.n	800aaf0 <__sflush_r+0xc0>
 800aa3e:	684b      	ldr	r3, [r1, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dc05      	bgt.n	800aa50 <__sflush_r+0x20>
 800aa44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	dc02      	bgt.n	800aa50 <__sflush_r+0x20>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d0f9      	beq.n	800aa4a <__sflush_r+0x1a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa5c:	682f      	ldr	r7, [r5, #0]
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	d032      	beq.n	800aac8 <__sflush_r+0x98>
 800aa62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	075a      	lsls	r2, r3, #29
 800aa68:	d505      	bpl.n	800aa76 <__sflush_r+0x46>
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	1ac0      	subs	r0, r0, r3
 800aa6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa70:	b10b      	cbz	r3, 800aa76 <__sflush_r+0x46>
 800aa72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa74:	1ac0      	subs	r0, r0, r3
 800aa76:	2300      	movs	r3, #0
 800aa78:	4602      	mov	r2, r0
 800aa7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa7c:	6a21      	ldr	r1, [r4, #32]
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b0      	blx	r6
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	d106      	bne.n	800aa96 <__sflush_r+0x66>
 800aa88:	6829      	ldr	r1, [r5, #0]
 800aa8a:	291d      	cmp	r1, #29
 800aa8c:	d82c      	bhi.n	800aae8 <__sflush_r+0xb8>
 800aa8e:	4a2a      	ldr	r2, [pc, #168]	; (800ab38 <__sflush_r+0x108>)
 800aa90:	40ca      	lsrs	r2, r1
 800aa92:	07d6      	lsls	r6, r2, #31
 800aa94:	d528      	bpl.n	800aae8 <__sflush_r+0xb8>
 800aa96:	2200      	movs	r2, #0
 800aa98:	6062      	str	r2, [r4, #4]
 800aa9a:	04d9      	lsls	r1, r3, #19
 800aa9c:	6922      	ldr	r2, [r4, #16]
 800aa9e:	6022      	str	r2, [r4, #0]
 800aaa0:	d504      	bpl.n	800aaac <__sflush_r+0x7c>
 800aaa2:	1c42      	adds	r2, r0, #1
 800aaa4:	d101      	bne.n	800aaaa <__sflush_r+0x7a>
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	b903      	cbnz	r3, 800aaac <__sflush_r+0x7c>
 800aaaa:	6560      	str	r0, [r4, #84]	; 0x54
 800aaac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaae:	602f      	str	r7, [r5, #0]
 800aab0:	2900      	cmp	r1, #0
 800aab2:	d0ca      	beq.n	800aa4a <__sflush_r+0x1a>
 800aab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab8:	4299      	cmp	r1, r3
 800aaba:	d002      	beq.n	800aac2 <__sflush_r+0x92>
 800aabc:	4628      	mov	r0, r5
 800aabe:	f7ff fadb 	bl	800a078 <_free_r>
 800aac2:	2000      	movs	r0, #0
 800aac4:	6360      	str	r0, [r4, #52]	; 0x34
 800aac6:	e7c1      	b.n	800aa4c <__sflush_r+0x1c>
 800aac8:	6a21      	ldr	r1, [r4, #32]
 800aaca:	2301      	movs	r3, #1
 800aacc:	4628      	mov	r0, r5
 800aace:	47b0      	blx	r6
 800aad0:	1c41      	adds	r1, r0, #1
 800aad2:	d1c7      	bne.n	800aa64 <__sflush_r+0x34>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0c4      	beq.n	800aa64 <__sflush_r+0x34>
 800aada:	2b1d      	cmp	r3, #29
 800aadc:	d001      	beq.n	800aae2 <__sflush_r+0xb2>
 800aade:	2b16      	cmp	r3, #22
 800aae0:	d101      	bne.n	800aae6 <__sflush_r+0xb6>
 800aae2:	602f      	str	r7, [r5, #0]
 800aae4:	e7b1      	b.n	800aa4a <__sflush_r+0x1a>
 800aae6:	89a3      	ldrh	r3, [r4, #12]
 800aae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaec:	81a3      	strh	r3, [r4, #12]
 800aaee:	e7ad      	b.n	800aa4c <__sflush_r+0x1c>
 800aaf0:	690f      	ldr	r7, [r1, #16]
 800aaf2:	2f00      	cmp	r7, #0
 800aaf4:	d0a9      	beq.n	800aa4a <__sflush_r+0x1a>
 800aaf6:	0793      	lsls	r3, r2, #30
 800aaf8:	680e      	ldr	r6, [r1, #0]
 800aafa:	bf08      	it	eq
 800aafc:	694b      	ldreq	r3, [r1, #20]
 800aafe:	600f      	str	r7, [r1, #0]
 800ab00:	bf18      	it	ne
 800ab02:	2300      	movne	r3, #0
 800ab04:	eba6 0807 	sub.w	r8, r6, r7
 800ab08:	608b      	str	r3, [r1, #8]
 800ab0a:	f1b8 0f00 	cmp.w	r8, #0
 800ab0e:	dd9c      	ble.n	800aa4a <__sflush_r+0x1a>
 800ab10:	6a21      	ldr	r1, [r4, #32]
 800ab12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab14:	4643      	mov	r3, r8
 800ab16:	463a      	mov	r2, r7
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b0      	blx	r6
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	dc06      	bgt.n	800ab2e <__sflush_r+0xfe>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab26:	81a3      	strh	r3, [r4, #12]
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	e78e      	b.n	800aa4c <__sflush_r+0x1c>
 800ab2e:	4407      	add	r7, r0
 800ab30:	eba8 0800 	sub.w	r8, r8, r0
 800ab34:	e7e9      	b.n	800ab0a <__sflush_r+0xda>
 800ab36:	bf00      	nop
 800ab38:	20400001 	.word	0x20400001

0800ab3c <_fflush_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	690b      	ldr	r3, [r1, #16]
 800ab40:	4605      	mov	r5, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	b913      	cbnz	r3, 800ab4c <_fflush_r+0x10>
 800ab46:	2500      	movs	r5, #0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	b118      	cbz	r0, 800ab56 <_fflush_r+0x1a>
 800ab4e:	6983      	ldr	r3, [r0, #24]
 800ab50:	b90b      	cbnz	r3, 800ab56 <_fflush_r+0x1a>
 800ab52:	f7fe f999 	bl	8008e88 <__sinit>
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <_fflush_r+0x6c>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	d11b      	bne.n	800ab94 <_fflush_r+0x58>
 800ab5c:	686c      	ldr	r4, [r5, #4]
 800ab5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0ef      	beq.n	800ab46 <_fflush_r+0xa>
 800ab66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab68:	07d0      	lsls	r0, r2, #31
 800ab6a:	d404      	bmi.n	800ab76 <_fflush_r+0x3a>
 800ab6c:	0599      	lsls	r1, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_fflush_r+0x3a>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f7fe fd9a 	bl	80096aa <__retarget_lock_acquire_recursive>
 800ab76:	4628      	mov	r0, r5
 800ab78:	4621      	mov	r1, r4
 800ab7a:	f7ff ff59 	bl	800aa30 <__sflush_r>
 800ab7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab80:	07da      	lsls	r2, r3, #31
 800ab82:	4605      	mov	r5, r0
 800ab84:	d4e0      	bmi.n	800ab48 <_fflush_r+0xc>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	059b      	lsls	r3, r3, #22
 800ab8a:	d4dd      	bmi.n	800ab48 <_fflush_r+0xc>
 800ab8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8e:	f7fe fd8d 	bl	80096ac <__retarget_lock_release_recursive>
 800ab92:	e7d9      	b.n	800ab48 <_fflush_r+0xc>
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <_fflush_r+0x70>)
 800ab96:	429c      	cmp	r4, r3
 800ab98:	d101      	bne.n	800ab9e <_fflush_r+0x62>
 800ab9a:	68ac      	ldr	r4, [r5, #8]
 800ab9c:	e7df      	b.n	800ab5e <_fflush_r+0x22>
 800ab9e:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <_fflush_r+0x74>)
 800aba0:	429c      	cmp	r4, r3
 800aba2:	bf08      	it	eq
 800aba4:	68ec      	ldreq	r4, [r5, #12]
 800aba6:	e7da      	b.n	800ab5e <_fflush_r+0x22>
 800aba8:	0800b244 	.word	0x0800b244
 800abac:	0800b264 	.word	0x0800b264
 800abb0:	0800b224 	.word	0x0800b224

0800abb4 <fiprintf>:
 800abb4:	b40e      	push	{r1, r2, r3}
 800abb6:	b503      	push	{r0, r1, lr}
 800abb8:	4601      	mov	r1, r0
 800abba:	ab03      	add	r3, sp, #12
 800abbc:	4805      	ldr	r0, [pc, #20]	; (800abd4 <fiprintf+0x20>)
 800abbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc2:	6800      	ldr	r0, [r0, #0]
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	f7ff fc87 	bl	800a4d8 <_vfiprintf_r>
 800abca:	b002      	add	sp, #8
 800abcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd0:	b003      	add	sp, #12
 800abd2:	4770      	bx	lr
 800abd4:	2000002c 	.word	0x2000002c

0800abd8 <_lseek_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d07      	ldr	r5, [pc, #28]	; (800abf8 <_lseek_r+0x20>)
 800abdc:	4604      	mov	r4, r0
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	2200      	movs	r2, #0
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f6 fe0c 	bl	8001804 <_lseek>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_lseek_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_lseek_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20000374 	.word	0x20000374

0800abfc <__swhatbuf_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	b096      	sub	sp, #88	; 0x58
 800ac08:	4614      	mov	r4, r2
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	da07      	bge.n	800ac1e <__swhatbuf_r+0x22>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	89b3      	ldrh	r3, [r6, #12]
 800ac14:	061a      	lsls	r2, r3, #24
 800ac16:	d410      	bmi.n	800ac3a <__swhatbuf_r+0x3e>
 800ac18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1c:	e00e      	b.n	800ac3c <__swhatbuf_r+0x40>
 800ac1e:	466a      	mov	r2, sp
 800ac20:	f000 f8b6 	bl	800ad90 <_fstat_r>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	dbf2      	blt.n	800ac0e <__swhatbuf_r+0x12>
 800ac28:	9a01      	ldr	r2, [sp, #4]
 800ac2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac32:	425a      	negs	r2, r3
 800ac34:	415a      	adcs	r2, r3
 800ac36:	602a      	str	r2, [r5, #0]
 800ac38:	e7ee      	b.n	800ac18 <__swhatbuf_r+0x1c>
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	b016      	add	sp, #88	; 0x58
 800ac42:	bd70      	pop	{r4, r5, r6, pc}

0800ac44 <__smakebuf_r>:
 800ac44:	898b      	ldrh	r3, [r1, #12]
 800ac46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac48:	079d      	lsls	r5, r3, #30
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	d507      	bpl.n	800ac60 <__smakebuf_r+0x1c>
 800ac50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	6123      	str	r3, [r4, #16]
 800ac58:	2301      	movs	r3, #1
 800ac5a:	6163      	str	r3, [r4, #20]
 800ac5c:	b002      	add	sp, #8
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	ab01      	add	r3, sp, #4
 800ac62:	466a      	mov	r2, sp
 800ac64:	f7ff ffca 	bl	800abfc <__swhatbuf_r>
 800ac68:	9900      	ldr	r1, [sp, #0]
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff fa53 	bl	800a118 <_malloc_r>
 800ac72:	b948      	cbnz	r0, 800ac88 <__smakebuf_r+0x44>
 800ac74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac78:	059a      	lsls	r2, r3, #22
 800ac7a:	d4ef      	bmi.n	800ac5c <__smakebuf_r+0x18>
 800ac7c:	f023 0303 	bic.w	r3, r3, #3
 800ac80:	f043 0302 	orr.w	r3, r3, #2
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e7e3      	b.n	800ac50 <__smakebuf_r+0xc>
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <__smakebuf_r+0x7c>)
 800ac8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	6020      	str	r0, [r4, #0]
 800ac90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	6163      	str	r3, [r4, #20]
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	6120      	str	r0, [r4, #16]
 800ac9e:	b15b      	cbz	r3, 800acb8 <__smakebuf_r+0x74>
 800aca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca4:	4630      	mov	r0, r6
 800aca6:	f000 f885 	bl	800adb4 <_isatty_r>
 800acaa:	b128      	cbz	r0, 800acb8 <__smakebuf_r+0x74>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	f043 0301 	orr.w	r3, r3, #1
 800acb6:	81a3      	strh	r3, [r4, #12]
 800acb8:	89a0      	ldrh	r0, [r4, #12]
 800acba:	4305      	orrs	r5, r0
 800acbc:	81a5      	strh	r5, [r4, #12]
 800acbe:	e7cd      	b.n	800ac5c <__smakebuf_r+0x18>
 800acc0:	08008e21 	.word	0x08008e21

0800acc4 <memmove>:
 800acc4:	4288      	cmp	r0, r1
 800acc6:	b510      	push	{r4, lr}
 800acc8:	eb01 0402 	add.w	r4, r1, r2
 800accc:	d902      	bls.n	800acd4 <memmove+0x10>
 800acce:	4284      	cmp	r4, r0
 800acd0:	4623      	mov	r3, r4
 800acd2:	d807      	bhi.n	800ace4 <memmove+0x20>
 800acd4:	1e43      	subs	r3, r0, #1
 800acd6:	42a1      	cmp	r1, r4
 800acd8:	d008      	beq.n	800acec <memmove+0x28>
 800acda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ace2:	e7f8      	b.n	800acd6 <memmove+0x12>
 800ace4:	4402      	add	r2, r0
 800ace6:	4601      	mov	r1, r0
 800ace8:	428a      	cmp	r2, r1
 800acea:	d100      	bne.n	800acee <memmove+0x2a>
 800acec:	bd10      	pop	{r4, pc}
 800acee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acf6:	e7f7      	b.n	800ace8 <memmove+0x24>

0800acf8 <__malloc_lock>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__malloc_lock+0x8>)
 800acfa:	f7fe bcd6 	b.w	80096aa <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	2000036c 	.word	0x2000036c

0800ad04 <__malloc_unlock>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__malloc_unlock+0x8>)
 800ad06:	f7fe bcd1 	b.w	80096ac <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	2000036c 	.word	0x2000036c

0800ad10 <_realloc_r>:
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	4607      	mov	r7, r0
 800ad14:	4614      	mov	r4, r2
 800ad16:	460e      	mov	r6, r1
 800ad18:	b921      	cbnz	r1, 800ad24 <_realloc_r+0x14>
 800ad1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad1e:	4611      	mov	r1, r2
 800ad20:	f7ff b9fa 	b.w	800a118 <_malloc_r>
 800ad24:	b922      	cbnz	r2, 800ad30 <_realloc_r+0x20>
 800ad26:	f7ff f9a7 	bl	800a078 <_free_r>
 800ad2a:	4625      	mov	r5, r4
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad30:	f000 f850 	bl	800add4 <_malloc_usable_size_r>
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d20f      	bcs.n	800ad58 <_realloc_r+0x48>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f7ff f9ec 	bl	800a118 <_malloc_r>
 800ad40:	4605      	mov	r5, r0
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d0f2      	beq.n	800ad2c <_realloc_r+0x1c>
 800ad46:	4631      	mov	r1, r6
 800ad48:	4622      	mov	r2, r4
 800ad4a:	f7fb fc4b 	bl	80065e4 <memcpy>
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff f991 	bl	800a078 <_free_r>
 800ad56:	e7e9      	b.n	800ad2c <_realloc_r+0x1c>
 800ad58:	4635      	mov	r5, r6
 800ad5a:	e7e7      	b.n	800ad2c <_realloc_r+0x1c>

0800ad5c <_read_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	; (800ad7c <_read_r+0x20>)
 800ad60:	4604      	mov	r4, r0
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	602a      	str	r2, [r5, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f7f6 fd06 	bl	800177c <_read>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_read_r+0x1e>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_read_r+0x1e>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20000374 	.word	0x20000374

0800ad80 <abort>:
 800ad80:	b508      	push	{r3, lr}
 800ad82:	2006      	movs	r0, #6
 800ad84:	f000 f856 	bl	800ae34 <raise>
 800ad88:	2001      	movs	r0, #1
 800ad8a:	f7f6 fced 	bl	8001768 <_exit>
	...

0800ad90 <_fstat_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	; (800adb0 <_fstat_r+0x20>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	f7f6 fd16 	bl	80017ce <_fstat>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d102      	bne.n	800adac <_fstat_r+0x1c>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b103      	cbz	r3, 800adac <_fstat_r+0x1c>
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20000374 	.word	0x20000374

0800adb4 <_isatty_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d06      	ldr	r5, [pc, #24]	; (800add0 <_isatty_r+0x1c>)
 800adb8:	2300      	movs	r3, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f6 fd15 	bl	80017ee <_isatty>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_isatty_r+0x1a>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_isatty_r+0x1a>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000374 	.word	0x20000374

0800add4 <_malloc_usable_size_r>:
 800add4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add8:	1f18      	subs	r0, r3, #4
 800adda:	2b00      	cmp	r3, #0
 800addc:	bfbc      	itt	lt
 800adde:	580b      	ldrlt	r3, [r1, r0]
 800ade0:	18c0      	addlt	r0, r0, r3
 800ade2:	4770      	bx	lr

0800ade4 <_raise_r>:
 800ade4:	291f      	cmp	r1, #31
 800ade6:	b538      	push	{r3, r4, r5, lr}
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	d904      	bls.n	800adf8 <_raise_r+0x14>
 800adee:	2316      	movs	r3, #22
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	f04f 30ff 	mov.w	r0, #4294967295
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adfa:	b112      	cbz	r2, 800ae02 <_raise_r+0x1e>
 800adfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae00:	b94b      	cbnz	r3, 800ae16 <_raise_r+0x32>
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 f830 	bl	800ae68 <_getpid_r>
 800ae08:	462a      	mov	r2, r5
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae12:	f000 b817 	b.w	800ae44 <_kill_r>
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d00a      	beq.n	800ae30 <_raise_r+0x4c>
 800ae1a:	1c59      	adds	r1, r3, #1
 800ae1c:	d103      	bne.n	800ae26 <_raise_r+0x42>
 800ae1e:	2316      	movs	r3, #22
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	2001      	movs	r0, #1
 800ae24:	e7e7      	b.n	800adf6 <_raise_r+0x12>
 800ae26:	2400      	movs	r4, #0
 800ae28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	4798      	blx	r3
 800ae30:	2000      	movs	r0, #0
 800ae32:	e7e0      	b.n	800adf6 <_raise_r+0x12>

0800ae34 <raise>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <raise+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f7ff bfd3 	b.w	800ade4 <_raise_r>
 800ae3e:	bf00      	nop
 800ae40:	2000002c 	.word	0x2000002c

0800ae44 <_kill_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d07      	ldr	r5, [pc, #28]	; (800ae64 <_kill_r+0x20>)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	f7f6 fc79 	bl	8001748 <_kill>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	d102      	bne.n	800ae60 <_kill_r+0x1c>
 800ae5a:	682b      	ldr	r3, [r5, #0]
 800ae5c:	b103      	cbz	r3, 800ae60 <_kill_r+0x1c>
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	bd38      	pop	{r3, r4, r5, pc}
 800ae62:	bf00      	nop
 800ae64:	20000374 	.word	0x20000374

0800ae68 <_getpid_r>:
 800ae68:	f7f6 bc66 	b.w	8001738 <_getpid>

0800ae6c <_init>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr

0800ae78 <_fini>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr
